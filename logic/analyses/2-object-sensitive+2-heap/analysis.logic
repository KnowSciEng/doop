// Context-sensitive pointer analysis with context of 2 object and a
// context-sensitive heap abstraction.

// In this analysis, both the real context and the real heap context are pairs
// of Values. Keeping mapping functions is the way to handle analyses
// where HContext = Context (since the language considers them different
// types).
ContextFromRealContext[?value1, ?value2] = ?ctx ->
  Context(?ctx), Value(?value1), Value(?value2).
lang:constructor(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?value ->
  Context(?ctx), Value(?value).
RealContext2FromContext[?ctx] = ?value ->
  Context(?ctx), Value(?value).
RealContext1FromContext[?ctx] = ?value1,
RealContext2FromContext[?ctx] = ?value2 <-
  ContextFromRealContext[?value1, ?value2] = ?ctx.

HContextFromRealHContext[?value1, ?value2] = ?hctx ->
  HContext(?hctx), Value(?value1), Value(?value2).
lang:constructor(`HContextFromRealHContext).
RealHContext2FromHContext[?hctx] = ?value ->
  HContext(?hctx), Value(?value).
RealHContext2FromHContext[?hctx] = ?value2 <-
  HContextFromRealHContext[_, ?value2] = ?hctx.


// Merge optimization hack

// For this analysis, we only need two of the parameters that may influence the
// new context object.
MyMergeBasis(?hctx, ?value) <-
  MergeBasis(_, _, ?hctx, ?value).

// We create new context objects sparingly, because of the high cost.  We also
// cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContext2FromHContext[?hctx],?value] = ?calleeCtx,
CachedMerge[?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?value).
