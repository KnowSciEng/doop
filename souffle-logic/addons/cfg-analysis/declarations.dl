.decl Method_FirstInstruction(?method:Method, ?insn:Instruction) 
.decl OptInstructionFromMethodIndex(?method:Method, ?index:number, ?insn:Instruction) 
.decl Instruction_Next(?i:Instruction, ?next:Instruction) 
.decl Instruction_Prev(?i:Instruction, ?prev:Instruction) 
.decl JumpTarget(?insn:Instruction, ?prev:Instruction) 

// Making explicit, so it can be negated.
.decl IsJumpTarget(?insn:Instruction) 
.decl ExceptionHandlerFirstInstruction(?insn:Instruction) 
.decl FallThrough(?insn:Instruction) 
.decl BasicBlockBegin(?insn:Instruction) 
.decl BasicBlockHead(?insn:Instruction, ?headInsn:Instruction) 
.decl BasicBlockTail(?headInsn:Instruction, ?tailInsn:Instruction) 
.decl BasicBlockEnd(?insn:Instruction) 
.decl UnconditionalControlTransfer(?insn:Instruction) 

// This is almost but not really a "may" relation for successor
// instructions. It does not include the targets of throw
// instructions. Hence the predicate name, meant to remind users that
// they should always check if the instruction is the beginning of
// an exception handler.
.decl MaySuccessorModuloThrow(?next:Instruction, ?prev:Instruction) 
.decl MayPredecessorModuloThrow(?prev:Instruction, ?next:Instruction) 

// Same concept for basic blocks. Reduces the cost significantly, since
// subsequent computation is quadratic.
.decl MaySuccessorBBModuloThrow(?next:Instruction, ?prev:Instruction) 
.decl MayPredecessorBBModuloThrow(?prev:Instruction, ?next:Instruction) 

// The Dominates relation is defined on basic blocks,
// represented by their first instruction (head). Defining
// a dense quadratic relation, like Dominates, on individual
// instructions was hugely expensive.

// To get to ?insn, we need to have gone through ?dominator
.decl Dominates(?dominator:Instruction, ?insn:Instruction) 

// ?insn dominates its predecessor. Must be head of basic block
// (head of a loop).
.decl DominatesItsPredecessorInstruction(?prevInsn:Instruction, ?insn:Instruction) 

// A generally useful concept. Includes the case of both being in the
// same basic block.
.decl DominatesItsSuccessorInstruction(?insn:Instruction, ?prevInsn:Instruction) 

// Phi Nodes Definition. If we have SSA input, then any multiple
// assignments to the same var are because of a Phi node. In fact,
// these will also be consecutive.
.decl NextInSamePhiNode(?insn1:Instruction, ?insn2:Instruction) 
.decl PhiNodeHead(?insn:Instruction, ?headInsn:Instruction)


// Just inverting for efficiency.
.decl InstructionInPhiNode(?insn:Instruction, ?headInsn:Instruction)

// There may be multiple return instructions. This is a pain,
// since they also represent merges of control- and data-flow.
// We often need to define "forall" behavior over them.
.decl NextReturn(?insn1:Instruction, ?insn2:Instruction)
