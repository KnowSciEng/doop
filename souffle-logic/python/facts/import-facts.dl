
// NormalHeap

.decl _NormalHeap(?id:symbol, ?type:symbol)
.input _NormalHeap(IO="file", filename="NormalHeap.facts", delimiter="\t")

isType(?type),
isHeapAllocation(?id),
isNormalHeap(?id),
OriginalHeapAllocation_Type(?id, ?type),
HeapAllocation_Type(?id, ?type) :-
  _NormalHeap(?id, ?type).



// StringConstant

.decl _StringConstant(?id:symbol)
.input _StringConstant(IO="file", filename="StringConstant.facts", delimiter="\t")

isHeapAllocation(?id),
isStringConstant(?id),
OriginalHeapAllocation_Type(?id, "java.lang.String"),
HeapAllocation_Type(?id, "java.lang.String") :-
  _StringConstant(?id).


// StringRaw

.decl _StringRaw(?id:symbol, ?rawId:symbol)
.input _StringRaw(IO="file", filename="StringRaw.facts", delimiter="\t")

.decl String_toRaw(?id:symbol, ?rawId:symbol)

isStringRaw(?id),
String_toRaw(?id, ?rawId) :-
  _StringRaw(?id, ?rawId).


// AssignHeapAllocation

.decl _AssignHeapAllocation(?instruction:symbol, ?index:number, ?heap:symbol, ?to:symbol, ?inFunction:symbol)
.input _AssignHeapAllocation(IO="file", filename="AssignHeapAllocation.facts", delimiter="\t")

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignHeapAllocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
  _AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?function).


// AssignLocal

.decl _AssignLocal(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?inFunction:symbol)
.input _AssignLocal(IO="file", filename="AssignLocal.facts", delimiter="\t")

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignOper_Insn(?instruction),
isAssignLocal_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  _AssignLocal(?instruction, ?index, ?from, ?to, ?function).


// AssignBinop

.decl _AssignBinop(?instruction:symbol, ?index:number, ?to:symbol, ?inFunction:symbol)
.input _AssignBinop(IO="file", filename="AssignBinop.facts", delimiter="\t")

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignOper_Insn(?instruction),
isAssignBinop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
AssignInstruction_To(?instruction, ?to) :-
  _AssignBinop(?instruction, ?index, ?to, ?function).


// AssignUnop

.decl _AssignUnop(?instruction:symbol, ?index:number, ?to:symbol, ?inFunction:symbol)
.input _AssignUnop(IO="file", filename="AssignUnop.facts", delimiter="\t")

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignOper_Insn(?instruction),
isAssignUnop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
AssignInstruction_To(?instruction, ?to) :-
  _AssignUnop(?instruction, ?index, ?to, ?function).


// AssignOperFrom

.decl _AssignOperFrom(?instruction:symbol, ?from:symbol)
.input _AssignOperFrom(IO="file", filename="AssignOperFrom.facts", delimiter="\t")

AssignOper_From(?instruction, ?from) :-
  _AssignOperFrom(?instruction, ?from).


// IfVar

.decl _IfVar(?instruction:symbol, ?var:symbol)
.input _IfVar(IO="file", filename="IfVar.facts", delimiter="\t")

If_Var(?instruction, ?var) :-
  _IfVar(?instruction, ?var).



// AssignNumConstant

.decl _AssignNumConstant(?instruction:symbol, ?index:number, ?const:symbol, ?to:symbol, ?inFunction:symbol)
.input _AssignNumConstant(IO="file", filename="AssignNumConstant.facts", delimiter="\t")

isNumConstant(?const),
isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
AssignNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
  _AssignNumConstant(?instruction, ?index, ?const, ?to, ?function).


// Field

.decl _Field(?signature:symbol, ?declaringClass:symbol, ?simplename:symbol)
.input _Field(IO="file", filename="Field.facts", delimiter="\t")

isField(?signature),
Field_SimpleName(?signature, ?simplename) :-
  _Field(?signature, ?declaringType, ?simplename).



// Function invocation

.decl _FunctionInvocation(?instruction:symbol, ?index:number, ?base:symbol, ?function:symbol)
.input _FunctionInvocation(IO="file", filename="FunctionInvocation.facts", delimiter="\t")

isInstruction(?instruction),
isFunctionInvocation(?instruction),
FunctionInvocation_Base(?instruction, ?base),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function) :-
  _FunctionInvocation(?instruction, ?index, ?base, ?function).


// Throw

.decl _Throw(?instruction:symbol, ?index:number, ?var:symbol, ?function:symbol)
.input _Throw(IO="file", filename="Throw.facts", delimiter="\t")

isInstruction(?instruction),
isThrow_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
Throw(?instruction, ?var),
Throw_Var(?instruction, ?var) :-
  _Throw(?instruction, ?index, ?var, ?function).


// Exception handler

.decl _ExceptionHandler(?handler:symbol, ?function:symbol, ?index:number, ?type:symbol, ?var:symbol, ?begin:number, ?end:number)
.input _ExceptionHandler(IO="file", filename="ExceptionHandler.facts", delimiter="\t")

isExceptionHandler(?handler),
ExceptionHandler_Function(?handler, ?function),
ExceptionHandler_Index(?handler, ?index),
ExceptionHandler_Type(?handler, ?type),
ExceptionHandler_FormalParam(?handler, ?var),
ExceptionHandler_Begin(?handler, ?begin),
ExceptionHandler_End(?handler, ?end) :-
  _ExceptionHandler(?handler, ?function, ?index, ?type, ?var, ?begin, ?end).


// Function

.decl _Function(?function:symbol, ?simplename:symbol, ?declaringType:symbol, ?arity:number)
.input _Function(IO="file", filename="Function.facts", delimiter="\t")

Function_SimpleName(?function, ?simplename),
Function_Arity(?function, ?arity) :-
  _Function(?function, ?simplename, ?declaringType, ?arity).


// StoreInstanceField

.decl _StoreInstanceField(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?function:symbol)
.input _StoreInstanceField(IO="file", filename="StoreInstanceField.facts", delimiter="\t")

isInstruction(?instruction),
isFieldInstruction(?instruction),
isStoreInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
  _StoreInstanceField(?instruction, ?index, ?from, ?base, ?function).


// LoadInstanceField

.decl _LoadInstanceField(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?function:symbol)
.input _LoadInstanceField(IO="file", filename="LoadInstanceField.facts", delimiter="\t")

isInstruction(?instruction),
isFieldInstruction(?instruction),
isLoadInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
  _LoadInstanceField(?instruction, ?index, ?to, ?base, ?function).


// Goto

.decl _Goto(?instruction:symbol, ?index:number, ?to:number, ?function:symbol)
.input _Goto(IO="file", filename="Goto.facts", delimiter="\t")

isInstruction(?instruction),
isGoto_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
Goto_Target(?instruction, ?to) :-
  _Goto(?instruction, ?index, ?to, ?function).


// If

.decl _If(?instruction:symbol, ?index:number, ?to:number, ?function:symbol)
.input _If(IO="file", filename="If.facts", delimiter="\t")

isInstruction(?instruction),
isIf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
If_Target(?instruction, ?to) :-
  _If(?instruction, ?index, ?to, ?function).


// ReturnNonNone

.decl _Return(?instruction:symbol, ?index:number, ?var:symbol, ?function:symbol)
.input _Return(IO="file", filename="Return.facts", delimiter="\t")

isInstruction(?instruction),
isReturnInstruction(?instruction),
isReturnNonNone_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function),
ReturnNonNone_Var(?instruction, ?var) :-
  _Return(?instruction, ?index, ?var, ?function).


// ReturnNone

.decl _ReturnNone(?instruction:symbol, ?index:number, ?function:symbol)
.input _ReturnNone(IO="file", filename="ReturnVoid.facts", delimiter="\t")

isInstruction(?instruction),
isReturnInstruction(?instruction),
isReturnNone_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function) :-
  _ReturnNone(?instruction, ?index, ?function).



// UnsupportedInstruction

.decl _UnsupportedInstruction(?instruction:symbol, ?index:number, ?function:symbol)
.input _UnsupportedInstruction(IO="file", filename="UnsupportedInstruction.facts", delimiter="\t")

isInstruction(?instruction),
isUnsupportedInstruction(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Function(?instruction, ?function) :-
  _UnsupportedInstruction(?instruction, ?index, ?function).



// Basic Types as nullary functional-predicates

isType(?t), isPrimitiveType(?t), Type_boolean(?t) :- ?t = "boolean".
isType(?t), isPrimitiveType(?t), Type_int(?t)     :- ?t = "int".
isType(?t), isPrimitiveType(?t), Type_long(?t)    :- ?t = "long".
isType(?t), isPrimitiveType(?t), Type_float(?t)   :- ?t = "float".

isType(?t), Type_none(?t) :- ?t = "None".

//isType(?t), isClassType(?t), Type_object(?t) :- ?t = "object".

