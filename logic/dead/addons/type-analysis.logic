// Initial reachable methods
_Reachable(?inmethod) <- 
   MainMethodDeclaration(?inmethod);
   ImplicitReachable(?inmethod).

_Reachable(?method) <-
   InitializedClass(?class), 
   ClassInitializer[?class] = ?method.

_OptVarMeth[?var] = ?method <- Var:DeclaringMethod(?var, ?method).

// MOVE instructions
_VPTSubset(?from, ?to) <-
   AssignLocal(?from, ?to, ?inmethod),
   _Reachable(?inmethod).

_VPTSubset(?from, ?to) <-
   AssignCast(_, ?from, ?to, ?inmethod),
   _Reachable(?inmethod).


_OptStoreInstanceField(?meth, ?from, ?base, ?sig) <-
   StoreInstanceField(?from, ?base, ?sig, ?meth).
_OptLoadInstanceField(?meth, ?to, ?base, ?sig) <-
   LoadInstanceField(?base, ?sig, ?to, ?meth).

// LOAD + STORE
_VPTSubset(?from, ?to) <- 
   _OptStoreInstanceField(?meth, ?from, ?base, ?sig),
   _Reachable(?meth),
   _OptLoadInstanceField(?meth2, ?to, ?base2, ?sig),
   _Reachable(?meth2),
   _MayAlias(?base, ?base2).

_VPTSubset(?from, ?to) <- 
   _OptStoreInstanceField(?meth, ?from, ?base, ?sig),
   _Reachable(?meth),
   _OptLoadInstanceField(?meth2, ?to, ?base2, ?sig),
   _Reachable(?meth2),
   (!_ApplicationVar(?base); !_ApplicationVar(?base2)).

_OptStoreStaticField(?meth, ?from, ?sig) <-
   StoreStaticField(?from, ?sig, ?meth).
_OptLoadStaticField(?meth, ?to, ?sig) <-
   LoadStaticField(?sig, ?to, ?meth).

// LOADSTATIC + STORESTATIC
_VPTSubset(?from, ?to) <- 
   _OptStoreStaticField(?meth, ?from, ?sig),
   _Reachable(?meth),
   _OptLoadStaticField(?meth2, ?to, ?sig),
   _Reachable(?meth2).


// VCALL
_CallGraph(?invocation, ?tomethod),
_VPTSubset(?base, ?this),
_Reachable(?tomethod)
<-
   Var:Type[?base] = ?declaredType,
   SubtypeOf(?realtype, ?declaredType),
//   _MayAlias(?base, ?other),
//   Var:Type[?other] = ?realtype,
   Instruction:Method[?invocation] = ?inmethod,
   VirtualMethodInvocation:Base[?invocation] = ?base,
   _Reachable(?inmethod),
   ResolveInvocation[?heaptype, ?invocation] = ?tomethod,
   ThisVar[?tomethod] = ?this.

// SCALL
_CallGraph(?invocation, ?tomethod),
_Reachable(?tomethod)
<-
   StaticMethodInvocation(?invocation, ?tomethod, ?inmethod),
   _Reachable(?inmethod).

// SPCALL
_CallGraph(?invocation, ?tomethod),
_VPTSubset(?base, ?this),
_Reachable(?tomethod)
<-
   Instruction:Method[?invocation] = ?inmethod,
   SpecialMethodInvocation:Base[?invocation] = ?base,
   MethodInvocation:Method[?invocation] = ?tomethod,
   _Reachable(?inmethod),
   ThisVar[?tomethod] = ?this.

// _InterProcAssign(to, from)
_InterProcAssign(?formal, ?actual) <-
   _CallGraph(?invocation, ?method),
   FormalParam[?index, ?method] = ?formal,
   ActualParam[?index, ?invocation] = ?actual.

_InterProcAssign(?local, ?return) <-
   _CallGraph(?invocation, ?method),
   ReturnVar(?return, ?method),
   AssignReturnValue[?invocation] = ?local.

// Args + returns handling
_VPTSubset(?sub, ?sup) <-
   _InterProcAssign(?sup, ?sub).

//Auxiliaries

// both ends are app vars
_MayAlias(?v1, ?v2) -> Var(?v1), Var(?v2).
_MayAlias(?v1, ?v2) <-
   _FullAppVPTSubset(?v1, ?v2) ; _FullAppVPTSubset(?v2, ?v1).
_MayAlias(?v, ?v) <-
   _MayAlias(_, ?v).

// both ends are app vars
_FullAppVPTSubset(?v1, ?v2) <-
   _FullVPTSubset(?v2, ?v1),
   _ApplicationVar(?v1).

// ?v2 is an app var
_FullVPTSubset(?v2, ?v1) <-
   _ApplicationVar(?v2),
   _VPTSubset(?v1, ?v2).

_FullVPTSubset(?v3, ?v1) <-
   _VPTSubset(?v1, ?v2), _FullVPTSubset(?v3, ?v2).


// Precise and Imprecise may-alias preds are directly comparable

_ImpreciseMayAlias(?v1, ?v2) <-
   _MayAlias(?v1, ?v2),
   _SameAppMethodVars(?v1, ?v2).

/*
_DiffMayAlias(?v1, ?v2) <-
   _ImpreciseMayAlias(?v1, ?v2),
   !_PreciseMayAlias(?v1, ?v2).
*/

// Helper predicates
_ApplicationVar(?var) <-
   _ApplicationMethod(?method), 
   Var:DeclaringMethod(?var,?method).
 
_ApplicationMethod(?method) <-
   ApplicationClass(?class),
   Method:DeclaringType[?method] = ?class.
  
_OptDeclaringMethod[?v] = ?meth <-
   Var:DeclaringMethod(?v, ?meth).

_SameAppMethodVars(?v1, ?v2) <-
   Var:DeclaringMethod(?v1,?method),
   Reachable(?method),
   Var:DeclaringMethod(?v2,?method),
   _ApplicationMethod(?method).

_OptVPT(?h, ?v) <-
   VarPointsTo(_, ?h, _, ?v).

_Opt2VPT(?v, ?h) <-
   _OptVPT(?h, ?v).

_ReachableVar(?v) <-
   Var:DeclaringMethod(?v,?method),
   Reachable(?method).


/*
_PreciseMayAlias(?v1, ?v2) <-
   _OptVPT(?h, ?v1),
   _OptVPT(?h, ?v2),
   Var:DeclaringMethod(?v2, _OptDeclaringMethod[?v1]).
//   _SameAppMethodVars(?v1, ?v2).
*/

/*
_PreciseMayAlias(?v1, ?v2) <-
   _ApplicationVar(?v1),
   _ApplicationVar(?v2),
//   _OptDeclaringMethod[?v1] = _OptDeclaringMethod[?v2],
   _Opt2VPT(?v1, ?h),
   _Opt2VPT(?v2, ?h).
*/


// EXPERIMENTS only beyond this point

/*
// Experiment (failed) trying to speed up computation of MayAlias from
// precise points-to info,

_RepresentativeHeap[?v] = ?h <-
   agg<<?h = min(?hs)>>(_OptVPT(?hs, ?v)).

_MaybeCoveredHeap(?h),
_InitialPreciseMayAlias(?v1, ?v2),
_InitialPreciseMayAlias(?v2, ?v1) <-
   Var:DeclaringMethod(?v2, _OptDeclaringMethod[?v1]),
   _RepresentativeHeap[?v1] = ?h,
   _Opt2VPT(?v2, ?h).

_NotCoveredHeap(?h) <-
   _InitialPreciseMayAlias(?v1, ?v2),
   _RepresentativeHeap[?v1] = ?h,
   _RepresentativeHeap[?v2] = ?h2,
   ?h2 != ?h,
   !_OptVPT(?h2, ?v1).

_CoveredHeap(?h) <-
   _MaybeCoveredHeap(?h),
   !_NotCoveredHeap(?h).

// This is half the size of original set of heap nodes
_UncoveredHeap(?h) <-
   _OptVPT(?h, _),
   !_CoveredHeap(?h).

//Problem is, this is not much smaller than original VPT
_UncoveredOptVPT(?h, ?v) <-
   _OptVPT(?h, ?v),
   _UncoveredHeap(?h).

_RestPreciseMayAlias(?v1, ?v2) <-  
   Var:DeclaringMethod(?v2, _OptDeclaringMethod[?v1]),
   _UncoveredOptVPT(?h, ?v1),
   _UncoveredOptVPT(?h, ?v2).

_PreciseMayAlias(?v1, ?v2) <-
   _InitialPreciseMayAlias(?v1, ?v2);
   _RestPreciseMayAlias(?v1, ?v2).

//// Under-approximation works even without the assumption
//// of vars in same method.
//// 130sec to compute a 260M relation!
//_InitialPreciseMayAlias(?v1, ?v2) <-
//   _Opt2VPT(?v2, _RepresentativeHeap[?v1]).

//// 77sec to compute a 160M relation!
//_InitialPreciseMayAlias(?v1, ?v2) <-
//   _RepresentativeHeap[?v2] = _RepresentativeHeap[?v1].

*/
