// For this analysis, every heap context recorded on allocation
// corresponds to the two most significant elements of the calling
// context of the allocator method.
#define RecordMacro(ctx, value, hctx) \
  ctx = [ctxType, ctxValue], \
  hctx = [ctxType, ctxValue]


// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the declaring class of the
// receiver object of the caller. Again, this may trigger creation of
// a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  hctx = [hctxType, hctxValue], \
  Value_DeclaringType(hctxValue, type), \
  calleeCtx = [type, value]

/*
 * The above gives us an upper bound of the receiver allocator's allocator's dynamic type!
 * Another option is the exact dynamic type of the allocator object. In that case we have:
 * Value_Type(hctxValue, type) instead of Value_DeclaringType(hctxValue, type)
 */

// For this analysis, static calls just keep the same context as the
// caller.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  calleeCtx = callerCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  hctx = [hctxType, hctxValue], \
  Value_DeclaringType(hctxValue, type), \
  newCtx = [type, value]

#define MergeStartupMacro(hctx, value, calleeCtx) \
  hctx = [hctxType, hctxValue], \
  Value_DeclaringType(hctxValue, type), \
  calleeCtx = [type, value]

// This is exactly equivalent to the regular merge logic, but written
// differently. At finalization, we create a new hctx, based on the
// callerCtx, and then use this new hctx as we would in regular Merge.
// The macro below does this, without referring to the new hctx (i.e.,
// using knowledge of how it is created).
#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  callerCtx = [callerCtxType, callerCtxValue], \
  Value_DeclaringType(callerCtxValue, type), \
  newCtx = [type, value]


#define InitContextMacro(value) \
  isContext(ctx) :- \
    isValue(value), \
    ctx = ["java.lang.String", value]

#define InitHContextMacro(value) \
  isHContext(hctx) :- \
    isValue(value), \
    hctx = ["java.lang.String", value]
