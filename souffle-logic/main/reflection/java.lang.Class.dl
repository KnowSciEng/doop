/*************************************************************
 * java.lang.Object.getClass
 *
 *   public final Class<?> getClass();
 *
 * The actual result type is Class<? extends |X|> where |X| is the erasure of
 * the static type of the expression on which getClass is called.
 *
 * Although this is a reflection operation, it is easy to analyse statically,
 * because we know the type of every heap allocation.
 *************************************************************/

/**
 * Evaluate Object.getClass
 */
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :-
  java_lang_Object_getClass(?to, ?from),
  VarPointsTo(_, ?value, ?ctx, ?from),
  ImmutableHContextFromContext(?ctx, ?hctx),
  Value_Type(?value, ?type),
  ReifiedClass(?type, ?classValue).
  #ifdef INFORMATION_FLOW
  .plan 2:(4,2,1,3,5)
  #endif
/*************************************************************
 * java.lang.Class.forName
 *
 *   public static Class<?> forName(String className)
 *   public static Class<?> forName(String name, boolean initialize, ClassLoader loader)
 *
 * Class.forName is the main fragile point of a static pointer analysis.
 * Arbitrary strings can be constructed by the program and used as an argument
 * to Class.forName, so we cannot predict which classes they correspond to.
 *
 * Therefore, this is also the main user-configuration point (some other
 * points-to analysis implementations configure newInstance, but we think
 * Class.forName is the appropriate place)
 *
 * We do automatically support class name strings that occur as constants in
 * the program. For those, configuration is not necessary.
 *************************************************************/

/**
 * Class.forName invocations with string constant parameters
 */
// TODO Do we need this flag at all?
// NOTE that this won't fire when we are in distinguish-no-string-constants
// mode. The constant will never flow to the ?param.
.decl ForwardReflectiveAssignClassConstant(?ctx:Context, ?invocation:MethodInvocation, ?type:Type)
.decl ForwardReflectiveAssignClassConstantString(?ctx:Context, ?invocation:MethodInvocation, ?type:Type, ?constantHeap:Value)

ForwardReflectiveAssignClassConstant(?ctx, ?invocation, ?type),
ForwardReflectiveAssignClassConstantString(?ctx, ?invocation, ?type, ?constantHeap) :-
  java_lang_Class_forName(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  ActualParam(0, ?invocation, ?param),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  ClassNameMatchingStringConstant_Type(?type, ?constantHeap).

.decl HighConfidenceAssign(?value:Value, ?inmethod:Method)

HighConfidenceAssign(?value, ?inmethod) :-
  AssignHeapAllocation(?value, _, ?inmethod).


// If it is a local and precise string, consider it a high-confidence inference
.decl ForwardHighConfidenceReflectiveAssignClassConstant(?ctx:Context, ?invocation:MethodInvocation, ?type:Type)

ForwardHighConfidenceReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  ForwardReflectiveAssignClassConstantString(?ctx, ?invocation, ?type, ?constantHeap),
  Instruction_Method(?invocation, ?inmethod),
  HighConfidenceAssign(?constantHeap, ?inmethod),
  (NumberOfClassesMatchingConstant(?constantHeap, ?num),
   StringPrecisionThreshold(?t),
   ?num < ?t;
   ClassNameMatchingStringConstant_Type(?type, ?constantHeap)).


/**
 * Class.forName invocations with user-configured dynamic classes
 */
ForwardHighConfidenceReflectiveAssignClassConstant(?ctx, ?invocation, ?type),
ForwardReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  java_lang_Class_forName(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  Config_DynamicClass(?type, ?invocation).


/*************************************************************
 * java.lang.Class.getName
 *
 *   public String getName()
 *************************************************************/

VarPointsTo(?hctx, ?className, ?callerCtx, ?to) :-
  ImmutableHContextFromContext(?callerCtx, ?hctx),
  java_lang_Class_getName(?to, ?from),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?className, ?classValue),
  isStringConstant(?className),
  Value_isHeap(?className).
  #ifdef INFORMATION_FLOW
  .plan 2:(6,5,4,3,2,1)
  #endif
  .plan 1:(3,2,1,4,5,6)

// REVIEW: Note how unsound this rule is: it returns a string only
// if the string exists in the input. 

// REVIEW: when getName returns a string, but our normal reflection
// logic would have merged that string with others, should the result
// be the string itself or its HeapAllocation:Merge?

/*************************************************************
 * java.lang.Class.getComponentType
 *
 *   public Class<?> getComponentType()
 *************************************************************/

VarPointsTo(?hctx, ?componentClassValue, ?callerCtx, ?to) :-
  ImmutableHContextFromContext(?callerCtx, ?hctx),
  java_lang_Class_getComponentType(?to, ?from),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?type, ?classValue),
  isArrayType(?type),
  ComponentType(?type, ?componentType),
  ReifiedClass(?componentType,  ?componentClassValue).


/*************************************************************
 * java.lang.Class.getSuperclass
 *
 *   public Class<? super T> getSuperclass()
 *
 * If the base type is java.lang.Object, an interface or a primitive type, then
 * null is returned.
 *
 * TODO should (can?) we handle null (for NullPointerException)?
 *************************************************************/

.decl FromGetSuperClassType(?callerCtx:Context, ?hctx:HContext, ?type:Type, ?to:Var)

FromGetSuperClassType(?callerCtx, ?hctx, ?type, ?to) :-
  ImmutableHContextFromContext(?callerCtx, ?hctx),
  java_lang_Class_getSuperclass(?to, ?from),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?type, ?classValue).
  .plan 1:(3,2,4,1)


VarPointsTo(?hctx, ?superClassValue, ?callerCtx, ?to) :-
  FromGetSuperClassType(?callerCtx, ?hctx, ?type, ?to),
  isClassType(?type),
  DirectSuperclass(?type, ?superType),
  ReifiedClass(?superType, ?superClassValue).

VarPointsTo(?hctx, ?superClassValue, ?callerCtx, ?to) :-
  FromGetSuperClassType(?callerCtx, ?hctx, ?type, ?to),
  isArrayType(?type),
  isType(?superType),
  ?superType = "java.lang.Object",
  ReifiedClass(?superType, ?superClassValue).


/*************************************************************
 * java.lang.Class.getInterfaces
 *
 *   public Class<?>[] getInterfaces()
 *************************************************************/

ArrayIndexPointsTo(?hctx, ?superInterfaceValue, ?hctx, ?arrayValue) :-
  FillArray_Interfaces(?hctx, ?arrayValue, ?type),
  DirectSuperinterface(?type, ?superInterface),
  ReifiedClass(?superInterface, ?superInterfaceValue).

.decl FillArray_Interfaces(?hctx:HContext, ?arrayValue:Value, ?type:Type)

FillArray_Interfaces(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?callerCtx, ?to) :-
  ImmutableHContextFromContext(?callerCtx, ?hctx),
  java_lang_Class_getInterfaces(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).


/*************************************************************
 * java.lang.Class.getDeclaredMethods and variants
 *
 *   public Method[] getMethods()
 *   public Method getMethod(String name, Class[] parameterTypes)
 *   public Method[] getDeclaredMethods()
 *   public Method getDeclaredMethod(String name, Class[] parameterTypes)
 *************************************************************/

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?arrayValue) :-
  FillArray_PublicMethods(?hctx, ?arrayValue, ?type),
  Method_DeclaringType[?signature] = ?type,
  Method_Modifier("public", ?signature),
  ReifiedMethod(?signature, ?value),
  MethodNameMatchingStringConstant_Signature(?signature, _).
// we assume the returned methods will be filtered by some string
*/

.decl FillArray_PublicMethods(?hctx:HContext, ?arrayValue:Value, ?type:Type)

FillArray_PublicMethods(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  java_lang_Class_getMethods(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue),
  ImmutableHContextFromContext(?ctx, ?hctx).

// NOTE that this won't fire when we are in distinguish-no-string-constants
// mode. The constant will never flow to ?param.
.decl ForwardReflectiveAssignMethodConstant(?ctx:Context, ?to:Var, ?signature:Method)
.decl ForwardReflectiveAssignMethodConstantString(?ctx:Context, ?to:Var, ?signature:Method, ?constantHeap:Value)

ForwardReflectiveAssignMethodConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignMethodConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  java_lang_Class_getMethod(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedClass, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedClass),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  MethodNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  basic.SupertypeOf(?superClass, ?type),
  Method_DeclaringType(?signature, ?superClass),
  Method_Modifier("public", ?signature).

// If it is a local and precise string, consider it a high-confidence inference
.decl ForwardHighConfidenceReflectiveAssignMethodConstant(?ctx:Context, ?to:Var, ?signature:Method)

ForwardHighConfidenceReflectiveAssignMethodConstant(?ctx, ?to, ?signature) :-
   ForwardReflectiveAssignMethodConstantString(?ctx, ?to, ?signature, ?constantHeap),
// Banning method propagation this way seems too restrictive
//  _OptVarToMethod[?to] = ?inmethod,
//  AssignHeapAllocation(?constantHeap, _, ?inmethod),
  (NumberOfMethodsMatchingConstant(?constantHeap, ?num),
   StringPrecisionThreshold(?t),
   ?num < ?t;
   MethodNameMatchingStringConstant_Signature(?signature, ?constantHeap)).

// TODO: Method objects derived from dynamic info have higher confidence.

/*
//VERSION-A
// REVIEW: why reuse the hctx? Just for lack of anything better? Also later.
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?arrayValue) :-
  FillArray_Methods(?hctx, ?arrayValue, ?type),
  Method_DeclaringType[?signature] = ?type,
  ReifiedMethod[?signature] = ?value,
  MethodNameMatchingStringConstant_Signature(?signature, _).
*/

.decl FillArray_Methods(?hctx:HContext, ?arrayValue:Value, ?type:Type)

FillArray_Methods(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_Class_getDeclaredMethods(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).

// getDeclaredMethod has two differences from getMethod: it retrieves
// all methods, not just public ones, but it does not retrieve inherited
// methods.
ForwardReflectiveAssignMethodConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignMethodConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  java_lang_Class_getDeclaredMethod(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedClass, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedClass),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  MethodNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  Method_DeclaringType(?signature, ?type).


/*************************************************************
 * java.lang.Class.getConstructors and variants
 *
 *   public Constructor[] getConstructors()
 *   public Constructor getConstructor(Class[] parameterTypes)
 *   public Constructor[] getDeclaredConstructors()
 *   public Constructor getDeclaredConstructor(Class[] parameterTypes)
 *************************************************************/

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?arrayValue) :-
  FillArray_PublicConstructors(?hctx, ?arrayValue, ?classValue),
  OptClassToConstructor(?constructor, ?classValue),
  Method_Modifier("public", ?constructor),
  ReifiedConstructor[?constructor] = ?value.
*/

.decl FillArray_PublicConstructors(?hctx:HContext, ?arrayValue:Value, ?classValue:Value)

FillArray_PublicConstructors(?hctx, ?arrayValue, ?classValue),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_Class_getConstructors(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReflectiveAllocation(?invocation, _, ?arrayValue).

// NOTE Because of the inherent imprecision in array handling (the argument),
// we assume that any constructor might be returned here.
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_Class_getConstructor(?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?classValue),
  Method_Modifier("public", ?constructor),
  ReifiedConstructor(?constructor, ?value).

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?arrayValue) :-
  FillArray_Constructors(?hctx, ?arrayValue, ?classValue),
  OptClassToConstructor(?constructor, ?classValue),
  ReifiedConstructor[?constructor] = ?value.
*/
.decl FillArray_Constructors(?hctx:HContext, ?arrayValue:Value, ?classValue:Value)

FillArray_Constructors(?hctx, ?arrayValue, ?classValue),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_Class_getDeclaredConstructors(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReflectiveAllocation(?invocation, _, ?arrayValue).


// NOTE Because of the inherent imprecision in array handling (the argument),
// we assume that any constructor might be returned here.
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_Class_getDeclaredConstructor(?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?classValue),
  ReifiedConstructor(?constructor, ?value).


/*************************************************************
 * java.lang.Class.getFields and variants
 *
 *   public Field[] getFields()
 *   public Field getField(String name)
 *   public Field[] getDeclaredFields()
 *   public Field getDeclaredField(String name)
 *
 * NOTE
 * If this Class object represents a class, getFields returns the public fields
 * of this class and of all its superclasses. If this Class object represents
 * an interface, getFields returns the fields of this interface and of all its
 * superinterfaces. The same apply to getField.
 *
 * getDeclaredFields and getDeclaredField will only search in the fields
 * directly declared in the class or interface.
 *************************************************************/

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?arrayValue) :-
  FillArray_PublicFields(?hctx, ?arrayValue, ?type),
  basic.SupertypeOf(?superClass, ?type),
  Field_DeclaringType[?fld] = ?superClass,
  Field_Modifier("public", ?fld),
  ReifiedField[?fld] = ?value,
  FieldNameMatchingStringConstant_Signature(?fld, _).
*/
.decl FillArray_PublicFields(?hctx:HContext, ?arrayValue:Value, ?type:Type)

FillArray_PublicFields(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_Class_getFields(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).

// NOTE that this won't fire when we are in distinguish-no-string-constants
// mode. The constant will never flow to ?param.
.decl ForwardReflectiveAssignFieldConstant(?ctx:Context, ?to:Var, ?signature:Field)
.decl ForwardReflectiveAssignFieldConstantString(?ctx:Context, ?to:Var, ?signature:Field, ?constantHeap:Value)

ForwardReflectiveAssignFieldConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignFieldConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  java_lang_Class_getField(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedType, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedType),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  FieldNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  basic.SupertypeOf(?superClass, ?type),
  Field_DeclaringType(?signature, ?superClass),
  Field_Modifier("public", ?signature).

// If it is a local and precise string, consider it a high-confidence inference
.decl ForwardHighConfidenceReflectiveAssignFieldConstant(?ctx:Context, ?to:Var, ?signature:Field)

ForwardHighConfidenceReflectiveAssignFieldConstant(?ctx, ?to, ?signature) :-
  ForwardReflectiveAssignFieldConstantString(?ctx, ?to, ?signature, ?constantHeap),
  Var_DeclaringMethod(?to, ?inmethod),
  HighConfidenceAssign(?value, ?inmethod),
  (NumberOfFieldsMatchingConstant(?constantHeap, ?num),
   StringPrecisionThreshold(?t),
   ?num < ?t;
   FieldNameMatchingStringConstant_Signature(?signature, ?constantHeap)).

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?arrayValue) _-
  FillArray_Fields(?hctx, ?arrayValue, ?class),
  Field_DeclaringType(?fld, ?class),
  ReifiedField(?fld, ?value),
  FieldNameMatchingStringConstant_Signature(?fld, _).
*/

.decl FillArray_Fields(?hctx:HContext, ?arrayValue:Value, ?type:Type)

FillArray_Fields(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_Class_getDeclaredFields(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).

ForwardReflectiveAssignFieldConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignFieldConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  java_lang_Class_getDeclaredField(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedClass, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedClass),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  FieldNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  Field_DeclaringType(?signature, ?type).


/*************************************************************
 * java.lang.Class.newInstance
 *
 *   public Object newInstance() 
 *
 * The class is instantiated as if by a new expression with an empty argument
 * list. The class is initialized if it has not already been initialized.
 * Throws:
 *   - IllegalAccessException if the class or its nullary constructor is not accessible
 *   - InstantiationException if this Class represents an abstract class, an
 *   interface, an array class, a primitive type, or void; or if the class has
 *   no nullary constructor.
 *
 * NOTE
 *    - For the OpenJDK there is a duplication of simulating, since we
 *      also simulate reflective constructor invocations. We'll soon
 *      sort out what needs to be in #ifdefs exactly.
 *************************************************************/

// Simple optimization predicate. It matters.
.decl OptClassToConstructor(?constructor:Method, ?classValue:Value)

OptClassToConstructor(?constructor, ?classValue) :-
  ReifiedClass(?type, ?classValue),
  Method_DeclaringType(?constructor, ?type),
  Method_SimpleName(?constructor, "<init>").

.decl AssignReflectiveAllocation(?invocation:MethodInvocation, ?type:Type, ?ctx:Context, ?to:Var)
.decl ReflectiveSpecialMethodInvocation(?invocation:MethodInvocation, ?constructor:Method, ?ctx:Context, ?to:Var)

AssignReflectiveAllocation(?invocation, ?type, ?ctx, ?to),
ReflectiveSpecialMethodInvocation(?invocation, ?constructor, ?ctx, ?to),
ReflectiveBaseVar(?invocation, ?to) :-
  java_lang_Class_newInstance(?invocation, ?to, ?from),
  VarPointsTo(_, ?class, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?class),
  Method_DeclaringType(?constructor, ?type).


/*************************************************************
 * java.lang.Class.getPrimitiveClass
 *
 *   static native java.lang.Class getPrimitiveClass(String name)
 *************************************************************/

#define PrimitiveClassForParam(className, primitiveName) \
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- \
  java_lang_Class_getPrimitiveClass(?invocation, ?to, ?param), \
  VarPointsTo(?hctx, ?heap, ?ctx, ?param), \
  (?heap = "<<string-constant>>" ; ?heap = primitiveName), \
  ReifiedClass(className, ?classValue)

PrimitiveClassForParam("java.lang.Integer", "int").
PrimitiveClassForParam("java.lang.Float", "float").
PrimitiveClassForParam("java.lang.Double", "double").
PrimitiveClassForParam("java.lang.Byte", "byte").
PrimitiveClassForParam("java.lang.Boolean", "boolean").
PrimitiveClassForParam("java.lang.Character", "char").
PrimitiveClassForParam("java.lang.Long", "long").
PrimitiveClassForParam("java.lang.Short", "short").
PrimitiveClassForParam("java.lang.Void", "void").

/*************************************************************
 * java.lang.Class.getClassLoader
 *
 *   public ClassLoader getClassLoader()
 *
 * NOTE  
 * We just create a dummy value to represent the ClassLoader returned.
 *************************************************************/
  
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  java_lang_Class_getClassLoader(?invocation, ?to, ?from),
  Var_DeclaringMethod(?from, ?method),
  ReachableContext(?ctx, ?method),
  ImmutableHContextFromContext(?ctx, ?hctx),
  isType(?type),
  ?type = "java.lang.ClassLoader",
  ReflectiveAllocation(?invocation, ?type, ?value).
  
/*************************************************************
 * java.lang.ClassLoader.getResource
 *
 *   public URL getResource(java.lang.String)
 *
 * NOTE  
 * We just create a dummy value to represent the URL resource returned.
 *************************************************************/
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  java_lang_ClassLoader_getResource(?invocation, ?to, ?from),
  Var_DeclaringMethod(?from, ?method),
  ReachableContext(?ctx, ?method),
  isType(?type),
  ?type = "java.net.URL",
  ReflectiveAllocation(?invocation, ?type, ?value).


/*************************************************************
 * Auxiliaries
 *************************************************************/
.decl NumberOfClassesMatchingConstant(?constant:StringConstant, ?n:number)
.decl NumberOfMethodsMatchingConstant(?constant:StringConstant, ?n:number)
.decl NumberOfFieldsMatchingConstant(?constant:StringConstant, ?n:number)

NumberOfClassesMatchingConstant(?constant, ?n) :-
  ClassNameMatchingStringConstant_Type(_, ?constant),
  ?n = count : ClassNameMatchingStringConstant_Type(_, ?constant).
NumberOfMethodsMatchingConstant(?constant, ?n) :-
  MethodNameMatchingStringConstant_Signature(_, ?constant),
  ?n = count : MethodNameMatchingStringConstant_Signature(_, ?constant).
NumberOfFieldsMatchingConstant(?constant, ?n) :-
  FieldNameMatchingStringConstant_Signature(_, ?constant),
  ?n = count : FieldNameMatchingStringConstant_Signature(_, ?constant).
  
StringPrecisionThreshold(10).
