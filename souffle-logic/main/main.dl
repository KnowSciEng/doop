#include "class-initialization.dl"
//#include "exceptions.dl"
//#include "finalization.dl"
//#include "android.dl"
#include "implicit-reachable.dl"
//#include "native.dl"
//#include "reference.dl"
#include "string-constants.dl"
//#include "threads.dl"

#if defined(REFLECTION)
#include "reflection/rules.dl" 
#endif

FakeInvocation_RegisterFinalize(?value, ?invo) :-
   FakeInvocation_RegisterFinalize0(?heap, ?invo),
   Value_byHeap(?heap, ?value).

Value_Heap(?value, ?heap),
isValue(?value),
Value_Type(?value, ?type) :-
    [?heap] = ?value,
    isHeapAllocation(?heap),
    HeapAllocation_Type(?heap, ?type).

Value_DeclaringType(?value, ?type) :-
   AssignHeapAllocation(?heap, _, ?inmethod),
   Method_DeclaringType(?inmethod, ?type),
   !isStringConstant(?heap),
   !isClassHeap(?heap),
   [?heap] = ?value,
   Value_Heap(?value, ?heap).

Value_DeclaringType(?value, "java.lang.System") :-
   isClassHeap(?heap),
   Value_Heap(?value, ?heap).

Value_DeclaringType(?value, "java.lang.String") :-
   isStringConstant(?heap),
   Value_Heap(?value, ?heap).

Value_DeclaringType(?value, "java.lang.Object") :-
   Value_Null(?value) ;
   MainMethodArgArray(?heap),
   Value_Heap(?value, ?heap) ;
   MainMethodArgArrayContent(?heap),
   Value_Heap(?value, ?heap).

isImmutableContext(ctx), InitContext("<<immutable-context>>")
isInitialContext(ctx), InitContext("<<initial-context>>")
isJVMStartupContext(ctx), InitContext("<<jvm-startup-context>>")
isClinitContext(ctx), InitContext("<<clinit-context>>")

// The main method is reachable
ReachableContext(?initialContext, ?method) :-
  isInitialContext(?initialContext),
  MainMethodDeclaration(?method).

// Implicitly reachable methods are invoked by the JVM on startup.
ReachableContext(?jvmStartUpContext, ?method) :-
  isJVMStartupContext(?jvmStartUpContext),
  ImplicitReachable(?method).

// If a class needs to be initialized, then its class initializer is invoked
// Note: InitializedClass already deals with superclasses that need initialization
ReachableContext(?clinitContext, ?clinit) :-
  isClinitContext(?clinitContext),
  InitializedClass(?class),
  ClassInitializer(?class, ?clinit).

InitHContext("<<immutable-hcontext>>")
InitHContext("<<jvm-startup-hcontext>>")

// Create initial objects with their heap contexts
SystemThreadGroup(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  Value_byId("<<system-thread-group>>", ?alloc).

MainThreadGroup(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  Value_byId("<<main-thread-group>>", ?alloc).

MainThread(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  Value_byId("<<main-thread>>", ?alloc).