/**
 * TODO: this is not efficient
 */
ClassInitializer[?type] = ?method <-
   MethodImplemented["<clinit>", "void()", ?type] = ?method.

/**
 * JVM Specification:
 *
 *    - The execution of any one of the Java virtual machine
 *      instructions new, getstatic, putstatic, or invokestatic that
 *      references the class or interface. Each of these instructions
 *      corresponds to one of the conditions in 2.17.4. All of the
 *      previously listed instructions reference a class directly or
 *      indirectly through either a field reference or a method
 *      reference. Upon execution of a new instruction, the referenced
 *      class or interface is initialized if it has not been initialized
 *      already. Upon execution of a getstatic, putstatic, or
 *      invokestatic instruction, the class or interface that declared
 *      the resolved field or method is initialized if it has not been
 *      initialized already.
 *
 *    - Invocation of certain reflective methods in the class library,
 *      for example, in class Class or in package java.lang.reflect.
 *
 *    - The initialization of one of its subclasses
 *
 *    - Its designation as the initial class at Java virtual machine
 *      start-up (5.2)
 */

/**
 * A class is initialized if one of its subclass gets initialized
 */
InitializedClass(?superclass) <-
   InitializedClass(?classOrInterface),
   DirectSuperclass[?classOrInterface] = ?superclass.

/**
 * Class of main method declaration
 */
InitializedClass(?class) <- 
   MainMethodDeclaration(?method),
   Method:DeclaringType[?method] = ?class.

/**
 * T is a class and an instance of T is created
 * TODO Consider to add strings?
 */
InitializedClass(?class) <-
   Reachable(?inmethod),
   AssignHeapAllocation(?heap, _, ?inmethod),
   HeapAllocation:Type[?heap] = ?class.

/**
 * T is a class and a static method declared by T is invoked
 */
InitializedClass(?class) <-
   Reachable(?inmethod),
   Instruction:Method[?invocation] = ?inmethod,
   StaticMethodInvocation:Insn(?invocation),
   MethodInvocation:Method[?invocation] = ?signature,
   Method:DeclaringType[?signature] = ?class.

/**
 * A static field declared by T is assigned
 */
InitializedClass(?classOrInterface) <-
   Reachable(?inmethod),
   StoreStaticField(_, ?signature, ?inmethod),
   Field:DeclaringType[?signature] = ?classOrInterface.

/**
 * A static field declared by T is used and the field is not a constant
 * variable
 * NOTE: Checking if the field is not constant is not necessary because we
 * analyze bytecode.
 */
InitializedClass(?classOrInterface) <-
   Reachable(?inmethod),
   LoadStaticField(?signature, _, ?inmethod),
   Field:DeclaringType[?signature] = ?classOrInterface.

/**
 * T is a top-level class, and an assert statement lexically nested within T is
 * executed
 * http://stackoverflow.com/questions/17800829/what-does-t-is-a-top-level-class-and-an-assert-statement-lexically-nested-with
 */
