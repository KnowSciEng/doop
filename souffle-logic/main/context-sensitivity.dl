/**
 * Elegance hacks, using macros: instead of burdening all normal
 * analyses, provide default definitions for the common cases.
 */

#ifndef MULTIPLE_SEGREGATED_ANALYSES
ImmutableContextFromHContext(?hctx, ?ctx) :-
  isImmutableContext(?ctx),
  isHContext(?hctx).

ImmutableHContextFromContext(?ctx, ?hctx) :-
  isImmutableHContext(?hctx),
  isContext(?ctx).

ImmutableContextFromContext(?ctx1, ?ctx2) :-
  isImmutableContext(?ctx2),
  isContext(?ctx1).
#endif // MULTIPLE_SEGREGATED_ANALYSES

#ifndef CompatibleContextAndHContextMacro
#define CompatibleContextAndHContextMacro(ctx, hctx) ctx = ctx, hctx = hctx
#endif
#ifndef CompatibleHContextsMacro
#define CompatibleHContextsMacro(hctx1, hctx2) hctx1 = hctx1, hctx2 = hctx2
#endif

#include "main.dl"

/**
 * Generic context-sensitive pointer analysis
 */


/**
 * Heap allocation
 */

#ifndef AdvancedRecordBasisMacro
isHContext(?newHCtx),
VarPointsTo(?newHCtx, ?heapValue, ?ctx, ?var) :-
  AssignNormalHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
#ifdef RecordArrayMacro
  Value_Type(?heapValue, ?type),
  !isArrayType(?type),
#endif
  RecordMacro(?ctx, ?heapValue, ?newHCtx),
  ObjectShouldNotBeRefined(?heapValue).

#else /* there is advanced behavior available */
AdvancedRecordBasisMacro(?ctx, ?var, ?heapValue) :-
  AssignNormalHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod).

VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  AdvancedRecordBasisMacro(?ctx, ?var, ?value),
  CachedRecordMacro(?ctx, ?value, ?hctx),
#ifdef RecordArrayMacro
  Value_Type(?value, ?type),
  !isArrayType(?type),
#endif
  ObjectShouldNotBeRefined(?value).
#endif /* #ifndef AdvancedRecordBasisMacro */


#ifdef RecordArrayMacro
// This doesn't seem to pay off usually. So few analyses (e.g., 1-obj,
// which greatly benefits) define this macro and handle arrays
// specially.
isHContext(?newHCtx),
VarPointsTo(?newHCtx, ?heapValue, ?ctx, ?var) :-
  AssignNormalHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  Value_Type(?heapValue, ?type),
  isArrayType(?type),
  RecordArrayMacro(?ctx, ?heapValue, ?newHCtx),
  ObjectShouldNotBeRefined(?heapValue).
#endif /* #ifdef RecordArrayMacro */

isHContext(?newHCtx),
VarPointsTo(?newHCtx, ?heapValue, ?ctx, ?var) :-
  AssignAuxiliaryHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  RecordMacro(?ctx, ?heapValue, ?newHCtx).

#ifdef RecordRefinedMacro
isHContext(?newHCtx),
VarPointsTo(?newHCtx, ?heapValue, ?ctx, ?var) :-
  AssignNormalHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  ObjectShouldBeRefined(?heapValue),
  RecordRefinedMacro(?ctx, ?heapValue, ?newHCtx).
#endif

VarPointsTo(?hctx, ?heapValue, ?ctx, ?var) :-
  Reachable(?inmethod),  // optimization purposes
  AssignContextInsensitiveHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  ImmutableHContextFromContext(?ctx, ?hctx).
  .plan 2:(4,3,1,2)

/**
 * Null assignments
 */
VarPointsTo(?hctx, ?null, ?toCtx, ?to) :-
   Reachable(?inmethod),  // optimization purposes
   AssignNull(?to, ?inmethod),
   Value_Null(?null),
   ReachableContext(?toCtx, ?inmethod),
   ImmutableHContextFromContext(?toCtx, ?hctx).
   .plan 2:(5,4,1,2,3)

/**
 * Assignment of numeric constant. Currently context-insensitive and
 * only used for android analyses, hence the ad hoc logic to match
 * a specific host class (R).
 */

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
   ReachableContext(?toCtx, ?inmethod),
   Instruction_Method(?insn, ?inmethod),
   (AssignNumConstant_Id(?insn, ?const);
    AssignCastNumConstant_Id(?insn, ?const)), // TODO: check the cast?
   AssignInstruction_To(?insn, ?to),
   Value_Num(?value, ?const),
   ImmutableHContextFromContext(?toCtx, ?hctx).
   .plan 1:(6,1,2,3,4,5)

// No need to check if type compatible: check is done at original
// inputs to VarPointsTo
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  AssignLocal(?from, ?to, _).

/**
 * Cast assignments
 */

.decl OptAssignCast(?type:Type, ?to:Var, ?from:Var)

OptAssignCast(?type, ?to, ?from) :-
  Reachable(?inmethod),
  AssignCast(?type, ?from, ?to, ?inmethod).

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  OptAssignCast(?type, ?to, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  Value_Type(?value, ?valuetype),
  SupertypeOf(?type, ?valuetype).
#ifdef INFORMATION_FLOW
  .plan 2:(3,4,2,1)
#endif

/**
 * Load instance fields
 */

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
  InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
  .plan 1:(2,1)

LoadHeapInstanceField(?ctx, ?to, ?sig, ?basehctx, ?basevalue) :-
  LoadInstanceField(?base, ?sig, ?to, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

/**
 * Store instance fields
 */

InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) :-
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  NotSpecialObject(?value),
  !Value_Null(?basevalue).
  .plan 1:(2,1,3)

StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from) :-
  StoreInstanceField(?from, ?base, ?signature, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

/**
 * Load static fields
 */

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  StaticFieldPointsTo(?hctx, ?value, ?sig),
  LoadStaticField(?sig, ?to, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  CompatibleContextAndHContextMacro(?ctx, ?hctx).
  .plan 1:(3,2,1)

/**
 * Store static fields
 */

StaticFieldPointsTo(?hctx, ?value, ?signature) :-
  ReachableStoreStaticFieldFrom(?from),
  StoreStaticField(?from, ?signature, _),
  VarPointsTo(?hctx, ?value, _, ?from).

.decl ReachableStoreStaticFieldFrom(?from:Var)

ReachableStoreStaticFieldFrom(?from) :-
  Reachable(?inmethod),
  StoreStaticField(?from, _, ?inmethod).

/**
 * Store default value in static field (android-only!)
 *
 */

StaticFieldPointsTo(?hctx, ?value, ?signature) :-
  FieldInitialValue(?signature, ?const),
  Value_Num(?value, ?const),
  isImmutableHContext(?hctx).


/**
 * Load array index
 */

// Intermediate relations used for optimization purposes
.decl OptLoadHeapArrayIndex(?var:Var, ?value:Value)
.decl Temp1(?value:Value, ?var:Var)
.decl Temp2(?ctx:Context, ?var:Var, ?hctx:HContext, ?value:Value)

OptLoadHeapArrayIndex(?to, ?basevalue) :-
  LoadHeapArrayIndex(_, ?to, _, ?basevalue).

Temp1(?basevalue, ?to) :-
  NotEmptyArrayValue(?basevalue),
  OptLoadHeapArrayIndex(?to, ?basevalue),
  Value_Type(?basevalue, ?basevaluetype),
  ComponentType(?basevaluetype, ?basecomponenttype),
  Var_Type(?to, ?type),
  SupertypeOf(?type, ?basecomponenttype).

Temp2(?ctx, ?to, ?basehctx, ?basevalue) :-
  Temp1(?basevalue, ?to),
  LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue).

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  Temp2(?ctx, ?to, ?basehctx, ?basevalue),
  ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue).

// The above logic aims to optimize the following rule:
//
// VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
//   NotEmptyArrayValue(?basevalue),
//   LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue),
//   ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue).
//   // this is necessary to handle untyped array operations, e.g., the
//   // simulation of arrayCopy calls as Load/Stores
//   Value_Type(?basevalue, ?basevaluetype),
//   Var_Type(?to, ?type),
//   ComponentType(?basevaluetype, ?basecomponenttype),
//   SupertypeOf(?type, ?basecomponenttype).

.decl NotEmptyArrayValue(?value:Value)

NotEmptyArrayValue(?heapValue) :-
  Value_isHeap(?heapValue),
  !HeapAllocation_EmptyArray(?heapValue).
NotEmptyArrayValue(?value) :-
  Value_isNonHeap(?value).

LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue) :-
  ReachableLoadArrayIndexBase(?base),
  OptLoadArrayIndex(?to, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

OptLoadArrayIndex(?to, ?base) :-
  LoadArrayIndex(?base, ?to, _).

.decl ReachableLoadArrayIndexBase(?base:Var)

ReachableLoadArrayIndexBase(?base) :-
  Reachable(?inmethod),
  LoadArrayIndex(?base, _, ?inmethod).

/**
 * Store array index
 */

OptStoreIntoArray(?hctx, ?basehctx, ?basevalue, ?value) :-
  StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from).

ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue) :-
  OptStoreIntoArray(?hctx, ?basehctx, ?basevalue, ?value),
  NotSpecialObject(?value),
  NotEmptyArrayValue(?basevalue),
  Value_Type(?value, ?valuetype),
  Value_Type(?basevalue, ?basevaluetype),
  ComponentType(?basevaluetype, ?componenttype),
  SupertypeOf(?componenttype, ?valuetype).

StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from) :-
  ReachableStoreArrayIndexBase(?base),
  OptStoreArrayIndex(?from, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

.decl ReachableStoreArrayIndexBase(?base:Var)

ReachableStoreArrayIndexBase(?base) :-
  Reachable(?inmethod),
  StoreArrayIndex(_, ?base, ?inmethod).

OptStoreArrayIndex(?from, ?base) :-
  StoreArrayIndex(?from, ?base, _).


/**
 * Assignments for method invocations
 */

OptInterproceduralAssign(?calleeCtx, ?formal, ?callerCtx, ?actual) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  ActualParam(?index, ?invocation, ?actual),
  FormalParam(?index, ?method, ?formal).

OptInterproceduralAssign(?callerCtx, ?local, ?calleeCtx, ?return) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
#ifdef INFORMATION_FLOW
  !SanitizationMethod(?method),
#endif
  AssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?method).

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from),
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from).
  .plan 1:(2,1)
// TODO check: .plan 1:(2,1) can make the above rule very slow when
// VarPointsTo deltas become really big, even if it shouldn't (i.e.,
// the VarPointsTo deltas are smaller than the OptInterproceduralAssign
// relation).


/**
 * Virtual Method Invocation
 */

.decl OptVirtualMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)

OptVirtualMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  VirtualMethodInvocation_Base(?invocation, ?base).


// This rule is the default logic for the majority of analyses

#ifndef AdvancedMergeBasisMacro
// This is the "proper" form of the rule. We diverge from it
// to enable more advanced merging logic.

isContext(?newCtx),
CallGraphEdge(?callerCtx, ?invocation, ?newCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?newCtx, ?this) :-
  OptVirtualMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  Value_Type(?value, ?valuetype),
  ResolveInvocation(?valuetype, ?invocation, ?tomethod),
  ThisVar(?tomethod, ?this),
  SiteShouldNotBeRefined(?invocation),
  MergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?newCtx).
#ifdef INFORMATION_FLOW
  .plan 2:(3,2,1,4,5,6)
#endif

#else /* there is optimized behavior available */

// The optimization/advanced merge treatment is as follows: the main
// analysis (this file) first creates all the possible bindings that
// the Merge logic might need to create a new context. (It uses
// AdvancedMergeBasisMacro to communicate these bindings to the individual
// context-sensitive analysis.) Then each individual analysis creates
// new context objects by employing arbitrary logic, and communicates
// back to the main analysis the results of context creation using
// CachedMergeMacro.
AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) :-
  OptVirtualMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base).

// The main analysis is merely looking up the previously created
// context objects.
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  Value_Type(?value, ?valuetype),
  ResolveInvocation(?valuetype, ?invocation, ?tomethod),
  ThisVar(?tomethod, ?this),
  SiteShouldNotBeRefined(?invocation).
  .plan 1:(2,1,3,4,5,6)
#endif /* #ifndef AdvancedMergeBasisMacro */


#ifdef MergeRefinedMacro
#ifndef CachedMergeRefinedMacro
// Default behavior
/**
 * This logic applies to refinement-based (or "adaptive") analyses. The
 * analysis is first run with the filter predicate (SiteToRefine) empty,
 * performing a low-precision but cheap computation. Then the external logic
 * runs delta rules to populate the filter predicate and re-runs the analysis.
 * (Note that the #ifdef just checks if the analysis has defined the
 * appropriate macro. This is not an input flag.)
 */
isContext(?newCtx),
CallGraphEdge(?callerCtx, ?invocation, ?newCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?newCtx, ?this) :-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptVirtualMethodInvocationBase(?invocation, ?base),
  Value_Type(?value, ?valuetype),
  ResolveInvocation(?valuetype, ?invocation, ?tomethod),
  ThisVar(?tomethod, ?this),
  SiteShouldBeRefined(?invocation),
  MergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx).

#else /* there is optimized behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) :-
  OptVirtualMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  Value_Type(?value, ?valuetype),
  ResolveInvocation(?valuetype, ?invocation, ?tomethod),
  ThisVar(?tomethod, ?this),
  SiteShouldBeRefined(?invocation).
  .plan 1:(2,1,3,4,5,6)
#endif /* #ifndef CachedMergeRefinedMacro */
#endif /* #ifdef MergeRefinedMacro */

/**
 * Static method invocations
 */

#ifndef AdvancedMergeStaticBasisMacro
isContext(?newCtx),
CallGraphEdge(?callerCtx, ?invocation, ?newCtx, ?tomethod) :-
  ReachableContext(?callerCtx, ?inmethod),
  StaticMethodInvocation(?invocation, ?tomethod, ?inmethod),
  MergeStaticMacro(?callerCtx, ?invocation, ?newCtx).

#else

AdvancedMergeStaticBasisMacro(?callerCtx, ?invocation) :-
  ReachableContext(?callerCtx, ?inmethod),
  StaticMethodInvocation(?invocation, _, ?inmethod).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod) :-
  AdvancedMergeStaticBasisMacro(?callerCtx, ?invocation),
  CachedMergeStaticMacro(?callerCtx, ?invocation, ?calleeCtx),
  MethodInvocation_Method(?invocation, ?tomethod).
  .plan 1:(2,1,3)
#endif /* #ifndef AdvancedMergeStaticBasisMacro */

/**
 * Special method invocations
 */

.decl OptSpecialMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)

OptSpecialMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SpecialMethodInvocation_Base(?invocation, ?base).

#ifndef AdvancedMergeBasisMacro
// Default behavior
isContext(?newCtx),
CallGraphEdge(?callerCtx, ?invocation, ?newCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?newCtx, ?this) :-
  OptSpecialMethodInvocationBase(?invocation, ?base),
  MethodInvocation_Method(?invocation, ?tomethod),
  isSpecialMethodInvocation_Insn(?invocation),
  ThisVar(?tomethod, ?this),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  SiteShouldNotBeRefined(?invocation),
  MergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?newCtx).

#else /* there is advanced behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) :-
  OptSpecialMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  MethodInvocation_Method(?invocation, ?tomethod),
  ThisVar(?tomethod, ?this),
  isSpecialMethodInvocation_Insn(?invocation),
  SiteShouldNotBeRefined(?invocation).
  .plan 1:(2,1,3,4,5,6)
#endif /* #ifndef AdvancedMergeBasisMacro */

#ifdef MergeRefinedMacro
#ifndef CachedMergeRefinedMacro
// Default behavior
isContext(?newCtx),
CallGraphEdge(?callerCtx, ?invocation, ?newCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?newCtx, ?this) :-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptSpecialMethodInvocationBase(?invocation, ?base),
  MethodInvocation_Method(?invocation, ?tomethod),
  isSpecialMethodInvocation_Insn(?invocation),
  ThisVar(?tomethod, ?this),
  SiteShouldBeRefined(?invocation),
  MergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?newCtx).

#else /* there is advanced behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) :-
  OptSpecialMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  MergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  OptimizeMergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  MethodInvocation_Method(?invocation, ?tomethod),
  isSpecialMethodInvocation_Insn(?invocation),
  ThisVar(?tomethod, ?this),
  SiteShouldBeRefined(?invocation).
#endif /* #ifndef CachedMergeRefinedMacro */
#endif /* #ifdef MergeRefinedMacro


/**
 * Reachable
 */

ReachableContext(?ctx, ?method) :-
  CallGraphEdge(_, _, ?ctx, ?method).

Reachable(?method) :-
  ReachableContext(_, ?method).


/**
 * Logic to decide whether to apply refined or regular bindings for
 * methods and objects
 */
// We want to allow predicates that express the *complement* of the set
// of objects to refine. We introduce derived-only temp predicates to
// avoid logic replication in the points-to rule itself.

.decl ObjectShouldNotBeRefined(?heap:HeapAllocation)

ObjectShouldNotBeRefined(?heap) :-
  NegativeObjectFilter("true"),
  ValueToRefine(?heap).

ObjectShouldNotBeRefined(?heap) :-
  !NegativeObjectFilter("true"),
  isValue(?heap),
  !ValueToRefine(?heap).

.decl ObjectShouldBeRefined(?heap:HeapAllocation)

ObjectShouldBeRefined(?heap) :-
  !NegativeObjectFilter("true"),
  ValueToRefine(?heap).

ObjectShouldBeRefined(?heap) :-
  NegativeObjectFilter("true"),
  isValue(?heap),
  !ValueToRefine(?heap).

.decl SiteShouldNotBeRefined(?invocation:MethodInvocation)

SiteShouldNotBeRefined(?invocation) :-
  !NegativeSiteFilter("true"),
  isMethodInvocation(?invocation),
  !SiteToRefine(?invocation).

SiteShouldNotBeRefined(?invocation) :-
  NegativeSiteFilter("true"),
  SiteToRefine(?invocation).

.decl SiteShouldBeRefined(?invocation:MethodInvocation)

SiteShouldBeRefined(?invocation) :-
  !NegativeSiteFilter("true"),
  SiteToRefine(?invocation).

SiteShouldBeRefined(?invocation) :-
  NegativeSiteFilter("true"),
  isMethodInvocation(?invocation),
  !SiteToRefine(?invocation).
