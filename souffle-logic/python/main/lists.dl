.decl IsPyList(?heap:HeapAllocation)
.decl isListOfConsts(?heap:HeapAllocation)
.decl isListOfIntConsts(?heap:HeapAllocation)
.decl ListHasNonConstantVal(?ctx:configuration.Context, ?hctx:configuration.HContext, ?heap:HeapAllocation)
.decl ListHasNonConstantIntVal(?ctx:configuration.Context, ?hctx:configuration.HContext, ?heap:HeapAllocation)

.decl VarPointsToList(?hctx:configuration.HContext, ?listHeap:HeapAllocation, ?ctx:configuration.Context, ?var:Var)
.decl ConstListDimensions(?ctx:configuration.Context, ?listHeap:HeapAllocation,?hctx:configuration.HContext, ?numDimensions:number)
.decl ConstListContents(?ctx:configuration.Context, ?listHeap:HeapAllocation, ?listhctx:configuration.HContext, ?index:number, ?val:NumConstantValue, ?hctx:configuration.HContext)

.output ConstListContents
ConstListContents(?ctx, ?heap, ?listhctx, ?index, ?value, ?hctx):-
  isListOfConsts(?ctx, ?heap, ?hctx),
  VarPointsToList(?listhctx, ?heap, ?ctx, ?var),
  StoreInstanceField_Base(?instr, ?var),
  isOriginalIntConstant(?fieldName),
  FieldInstruction_Signature(?instr, ?fieldName),
  ?index = to_number(?fieldName),
  StoreInstanceField_From(?instr, ?from),
  VarPointsToConstValue(?hctx, ?value, ?ctx, ?from).

.output ConstListDimensions
ConstListDimensions(?ctx, ?heap, ?hctx, ?size):-
  isListOfConsts(?ctx, ?heap, ?hctx),
  VarPointsToList(?hctx, ?heap, ?ctx, ?var),
  ?size = 1 + max ?index: {
    StoreInstanceField_Base(?instr, ?var),
    isOriginalIntConstant(?fieldName),
    FieldInstruction_Signature(?instr, ?fieldName),
    ?index = to_number(?fieldName)
  }.

.output isListOfConsts
isListOfConsts(?heap):-
  IsPyList(?heap),
  !(ListHasNonConstantVal(_, ?heap, _)).

.output isListOfIntConsts
isListOfIntConsts(?heap):-
  IsPyList(?heap),
  !(ListHasNonConstantIntVal(_, ?heap, _)).

.decl PyConstListSpecialValueCount(?ctx:configuration.Context, ?heap:HeapAllocation, ?hctx:configuration.HContext, ?val:Value, ?count:number)
.output PyConstListSpecialValueCount

//PyConstList_ValueCount(?heap, ?val, ?countRes):-
//  isListOfConsts(?heap),
//  VarPointsToList(?var, ?heap),
//  StoreInstanceField_Base(?instr, ?var),
//  StoreInstanceField_From(?instr, ?from),
//  VarPointsToConstValue(?from, ?val),
//  ?countRes= count:
//  {
//    StoreInstanceField_Base(?instr2, ?var),
//    StoreInstanceField_From(?instr2, ?from2),
//    VarPointsToConstValue(?from2, ?val)
//  }.

PyConstListSpecialValueCount(?ctx, ?heap, ?hctx, ?val, ?countRes):-
  isListOfConsts(?ctx, ?heap, ?hctx),
  VarPointsToList(?hctx, ?heap, ?ctx, ?var),
  (
    ?val = "<None>";
    ?val = "<num-constant(int):-1>"
  ),
  ?countRes= count:
  {
    StoreInstanceField_Base(?instr, ?var),
    StoreInstanceField_Base(?instr, ?var),
    StoreInstanceField_From(?instr, ?from2),
    VarHasConstValue(?hctx, ?val, ?ctx, ?from2)
  }.

//VarPointsToList(?var, ?heap):-
//  VarPointsTo(?var, ?heap),
//  IsPyList(?heap).

.output IsPyList
IsPyList(?heap),
VarPointsTo(?hctx, ?heap, ?ctx, ?var),
VarPointsToList(?hctx, ?heap, ?ctx, ?var) :-
  AssignInstruction_To(?instr, ?var),
  AssignHeapAllocation_Heap(?instr, ?heap),
  OriginalHeapAllocation_Type(?heap, ?type),
  ?type = "list".

.output ListHasNonConstantVal
ListHasNonConstantVal(?ctx, ?heap, ?hctx):-
  VarPointsToList(?hctx, ?heap, ?ctx, ?var),
  StoreInstanceField_Base(?instr, ?var),
  StoreInstanceField_From(?instr, ?from),
  !(VarHasConstValue(?from,_)).

.output ListHasNonConstantIntVal
ListHasNonConstantIntVal(?ctx, ?heap, ?hctx):-
  VarPointsToList(?hctx, ?heap, ?ctx, ?var),
  StoreInstanceField_Base(?instr, ?var),
  StoreInstanceField_From(?instr, ?from),
  !(VarHasConstIntValue(?from, _)).

.decl ConstListMultAll(?ctx:configuration.Context, ?heap:HeapAllocation, ?hctx:configuration.HContext, ?res:number)
.decl ConstListMultAllInner(?ctx:configuration.Context, ?heap:HeapAllocation, ?hctx:configuration.HContext, ?index:number, ?res:number)

.output ConstListMultAll

ConstListMultAll(?ctx, ?heapList, ?hctx, ?res):-
  ConstListMultAllInner(?ctx, ?heapList, ?hctx, 0, ?res).

ConstListMultAllInner(?ctx, ?heapList, ?hctx, ?index, ?res):-
  ConstListDimensions(?ctx, ?heapList, ?hctx, ?dims),
  ?index = ?dims - 1,
  ConstListContents(?ctx, ?heapList, ?hctx, ?index, ?val),
  Value_Num(?val,?num),
  ?res = to_number(?num).

ConstListMultAllInner(?ctx, ?heapList, ?hctx, ?index, ?res):-
  ConstListDimensions(?ctx, ?heapList, ?hctx, ?dims),
  ConstListContents(?ctx, ?heapList, ?hctx, ?index, ?val),
  ?index < ?dims - 1,
  Value_Num(?val,?numStr),
  ?num = to_number(?numStr),
  ?num > 0,
  ConstListMultAllInner(?ctx, ?heapList, ?hctx, ?index + 1, ?prevRes),
  ?res = ?num * ?prevRes.

ConstListMultAllInner(?ctx, ?heapList, ?hctx, ?index, ?res):-
  ConstListDimensions(?ctx, ?heapList, ?hctx, ?dims),
  ConstListContents(?ctx, ?heapList, ?hctx, ?index, ?val),
  ?index < ?dims - 1,
  Value_Num(?val,?numStr),
  -1 = to_number(?numStr),
  ConstListMultAllInner(?heapList, ?index + 1, ?prevRes),
  ?res = ?prevRes.

ConstListMultAllInner(?ctx, ?heapList, ?hctx, ?index, ?res):-
  ConstListDimensions(?ctx, ?heapList, ?hctx, ?dims),
  ConstListContents(?ctx, ?heapList, ?hctx, ?index, ?val),
  ?index < ?dims - 1,
  ?val = "<None>",
  ConstListMultAllInner(?ctx, ?heapList, ?hctx, ?index + 1, ?prevRes),
  ?res = ?prevRes.