/**
 * Some library modules are generically defined, and need the macro
 * definitions for the context-sensitive pointer analysis they are
 * used in. For a context-insensitive pointer analysis we just
 * generate constant contexts.
 */

#define UNIQUE_CONTEXT  "<<unique-context>>"
#define UNIQUE_HCONTEXT "<<unique-hcontext>>"

#define RecordMacro(ctx, value, hctx) \
  hctx = UNIQUE_HCONTEXT


#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  calleeCtx = UNIQUE_CONTEXT

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  calleeCtx = UNIQUE_CONTEXT

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  newCtx = UNIQUE_CONTEXT

#define MergeStartupMacro(hctx, value, calleeCtx) \
  calleeCtx = UNIQUE_CONTEXT

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  newCtx = UNIQUE_CONTEXT


#define InitContextMacro(valueId) \
  isContext(ctx) :- ctx = UNIQUE_CONTEXT

#define InitHContextMacro(valueId) \
  isHContext(hctx) :- hctx = UNIQUE_HCONTEXT
