// For this analysis, every heap context recorded on allocation
// corresponds to the most significant element of the calling
// context of the allocator method.
#define RecordMacro(ctx, value, hctx) \
  ctx = [ctxValue1, ctxValue2], \
  hctx = [ctxValue2]


// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  hctx = [hctxValue], \
  calleeCtx = [hctxValue, value]

// For this analysis, static calls just keep the same context as the
// caller.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  callerCtx = [callerCtxElement1, callerCtxValue2], \
  calleeCtx = [invocation, callerCtxValue2]

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  hctx = [hctxValue], \
  newCtx = [hctxValue, value]

#define MergeStartupMacro(hctx, value, calleeCtx) \
  hctx = [hctxValue], \
  calleeCtx = [hctxValue, value]

// This is exactly equivalent to the regular merge logic, but written
// differently. At finalization, we create a new hctx, based on the
// callerCtx, and then use this new hctx as we would in regular Merge.
// The macro below does this, without referring to the new hctx (i.e.,
// using knowledge of how it is created).
#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  callerCtx = [callerCtxValue1, callerCtxValue2], \
  newCtx = [callerCtxValue2, value]


#define InitContextMacro(value) \
  isContext(ctx) :- ctx = [value, value]

#define InitHContextMacro(value) \
  isHContext(hctx) :- hctx = [value]
