// Facts used for optimization

/*** Method removal ***/

// Output for dead method removal.
.decl MethodToRemove(?method:Method)
MethodToRemove(?method) :-
  ApplicationMethod(?method),
  !mainAnalysis.ReachableContext(_, ?method),
//  !Method_Modifier("abstract", ?method),
  !Method_Modifier("native", ?method),
  (basic.MethodOverridesOther(?method, _);
   !basic.MethodOverridesOther(_, ?method)).
   // don't throw away root methods that may be needed for dispatch of overriding methods.
.output MethodToRemove

.decl ClassOfDeadMethod(?method:Method, ?class:ClassType)
ClassOfDeadMethod(?method, ?class) :-
  MethodToRemove(?method),
  Method_DeclaringType(?method, ?class).

.decl _RelevantStringPosition(?className: symbol, ?pos:number)
_RelevantStringPosition(?className, ?pos) :-
  ClassNameWithSlashes(_, ?className),
  mainAnalysis._StringIterationTrick(?pos), ?pos < strlen(?className).

// N^2 computation, but it doesn't matter since its application is so limited
.decl ClassNameWithSlashes(?className:ClassType, ?classNameWithSlash:symbol)
ClassNameWithSlashes(?className, ?className) :-
  ClassOfDeadMethod(_, ?className).
ClassNameWithSlashes(?className, ?classNameTransformed) :-
  ClassNameWithSlashes(?className, ?classNameOther),
  _RelevantStringPosition(?className, ?pos),
  substr(?classNameOther, ?pos, 1) = ".",
  substr(?classNameOther, 0, ?pos) = ?prefix,
  !contains(".", ?prefix),
  substr(?classNameOther, ?pos+1, strlen(?className)-?pos-1) = ?suffix,
  ?classNameTransformed = cat(?prefix, cat("/", ?suffix)).

.decl ClassNameWithOnlySlashes(?className:ClassType, ?classNameTransformed:symbol)
ClassNameWithOnlySlashes(?className, ?classNameTransformed) :-
  ClassNameWithSlashes(?className, ?classNameTransformed),
  !contains(".", ?classNameTransformed).

.decl DeadMethodWithJVMDescriptor(?jvmFullName:symbol, ?method:symbol)
DeadMethodWithJVMDescriptor(?jvmFullName, ?method) :-
  ClassOfDeadMethod(?method, ?class),
  ClassNameWithOnlySlashes(?class, ?className),
  Method_JVMDescriptor(?method, ?sig),
  Method_SimpleName(?method, ?simplename),
  ?jvmFullName = cat("L", cat(?className, cat(";:", cat(?simplename, ?sig)))).

#define FILENAME_EXPECTED_BY_OPT_PASS "methods_to_remove.csv"
.output DeadMethodWithJVMDescriptor(IO="file", filename=FILENAME_EXPECTED_BY_OPT_PASS, delimiter="\t")

/*** Devirtualization ***/

.decl ContextInsensitiveCallGraphEdge(?invocation:MethodInvocation, ?target:Method)

ContextInsensitiveCallGraphEdge(?invocation, ?target) :-
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

.decl InvocationTarget_Count(?invocation:MethodInvocation, ?n:number)

InvocationTarget_Count(?invocation, ?n) :-
  isVirtualMethodInvocation_Insn(?invocation),
  ?n = count:{ContextInsensitiveCallGraphEdge(?invocation, _)}.

// Virtual invocation sites that only call a single method (and can
// thus be candidates for devirtualization).
.decl SingleInvocationTarget(?invocation:MethodInvocation, ?target:Method)
SingleInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, 1),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

.output SingleInvocationTarget

// Helper relation: virtual invocation sites that call multiple methods.
.decl MultiInvocationTarget(?invocation:MethodInvocation, ?target:Method)
MultiInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, ?n),
  ?n > 1,
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

// Reachable methods that are only the target of invocations that can be
// devirtualized. We can thus convert them to static and remove the virtual version.
.decl ReachableMethodOnlyUsedInSingleInvocationTarget(?method:Method)

ReachableMethodOnlyUsedInSingleInvocationTarget(?method) :-
  SingleInvocationTarget(_, ?method),
  !MultiInvocationTarget(_, ?method).

.output ReachableMethodOnlyUsedInSingleInvocationTarget

/*** Inlining ***/

.decl ApplicationMethod_Size(?method:Method, ?size:number)

ApplicationMethod_Size(?method, ?size) :-
  ApplicationMethod(?method),
  ?size = count:{Instruction_Method(_, ?method)}.

.decl SmallApplicationMethod(?method:Method)

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size), ?size < 30.

.output SmallApplicationMethod

.decl InvocationToInline(?invocation:MethodInvocation, ?target:Method)

InvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  SingleInvocationTarget(?invocation, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  ApplicationMethod(?invocationMethod).

InvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  (isStaticMethodInvocation_Insn(?invocation);
   isSpecialMethodInvocation_Insn(?invocation)),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  ApplicationMethod(?invocationMethod).

.output InvocationToInline
