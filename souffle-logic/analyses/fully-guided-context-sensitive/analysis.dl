// Context-sensitive pointer analysis with context of 2 object and a
// context-sensitive heap abstraction.

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

.type ContextComponent = Type | mainAnalysis.Value

// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
.comp FullyGuidedContextSensitiveConfiguration : AbstractConfiguration {

  #define NO_CONTEXT_ELEMENT "<<immutable-context>>"


  // In this analysis, the real context is a pair of Values and the real
  // heap context a single Value.
  .type Context  = [ value1:ContextComponent, value2:ContextComponent ]
  .type HContext = [ value:ContextComponent ]

  // ToTypeString maps a (value or type) string to a string representation of a type.
  // It is useful for generating 2-type-sensitive contexts.
  .decl ToTypeString(valueOrType:symbol, type:symbol)

    // If the given string already represents a type, then return it directly.
    ToTypeString(?elem, ?type) :-
        HContextElement(?elem),
        isType(?elem),
        ?type = ?elem.

    // If the given string represents a heap object, then return the string
    // of the type which declares the allocation site of the heap object.
    ToTypeString(?elem, ?type) :-
        HContextElement(?elem),
        !isType(?elem),
        !SpecialContextElement(?elem),
        Value_DeclaringType(?elem, ?type).

    // Handle special context objects.
    ToTypeString(?elem, ?elem) :-
        SpecialContextElement(?elem).

    .decl HContextElement(elem:symbol)
    HContextElement(?elem) :-
        ContextRequest(_, ?hctx, _, _, _),
        ?hctx = [?elem].

    .decl SpecialContextElement(value:symbol)
    SpecialContextElement("<<initial-context>>").
    SpecialContextElement("<<jvm-startup-context>>").
    SpecialContextElement("<<jvm-startup-hcontext>>").
    SpecialContextElement("<<clinit-context>>").
    SpecialContextElement("<<immutable-context>>").
    SpecialContextElement("<<immutable-hcontext>>").

    // 2-object
    TwoObjectMethod(?tomethod),
    ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
        ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod),
        SpecialContextSensitivityMethod(?tomethod, "2-object"),
        ?hctx = [?hctxValue],
        ?calleeCtx = [?hctxValue, ?value].


    // 2-type
    TwoTypeMethod(?tomethod),
    ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
        ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod),
        SpecialContextSensitivityMethod(?tomethod, "2-type"),
        ?hctx = [?hctxValue],
        ToTypeString(?hctxValue, ?type1),
        Value_DeclaringType(?value, ?type2),
        ?calleeCtx = [?type1, ?type2].

    // 1-type
    OneTypeMethod(?tomethod),
    ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
        ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod),
        SpecialContextSensitivityMethod(?tomethod, "1-type"),
        Value_DeclaringType(?value, ?type),
        ?calleeCtx = [NO_CONTEXT_ELEMENT, ?type].

    // context-insensitive
    ContextInsensitiveMethod(?tomethod),
    ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
        ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod),
        SpecialContextSensitivityMethod(?tomethod, "context-insensitive"),
        isImmutableContext(?calleeCtx).


    // Scaler behaviour, keep caller contexts for static invocations
    StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
        StaticContextRequest(?callerCtx, ?invo),
        MethodInvocation_Method(?invo, ?tomethod),
        !SpecialContextSensitivityMethod(?tomethod, _),
        ?calleeCtx = ?callerCtx.

    // Oracular behaviour, keep caller contexts if method is analyzed
    // sensitively, drop context if method is analyzed insensitively
    StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
       StaticContextRequest(?callerCtx, ?invo),
       MethodInvocation_Method(?invo, ?tomethod),
       SpecialContextSensitivityMethod(?tomethod, ?sensitivity),
       ?sensitivity != "context-insensitive",
       ?calleeCtx = ?callerCtx.

    StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
       StaticContextRequest(?callerCtx, ?invo),
       MethodInvocation_Method(?invo, ?tomethod),
       SpecialContextSensitivityMethod(?tomethod, ?sensitivity),
       ?sensitivity = "context-insensitive",
       isImmutableContext(?calleeCtx),
       ?callerCtx = ?callerCtx.


    // Pick last context elements of as heap context
    RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
        RecordContextRequest(?ctx, ?value, ?var),
        ?ctx = [?ctxValue1, ?ctxValue2],
        ?hctx = [?ctxValue2],
        ?ctxValue1 = ?ctxValue1.

    // Plain handling for special context requests
    ThreadStartContextResponse(?callerCtx, ?hctx, ?value, ?newCtx) :-
        ThreadStartContextRequest(?callerCtx, ?hctx, ?value),
        ?hctx = [?hctxValue],
        ?newCtx = [?hctxValue, ?value].

    StartupContextResponse(?hctx, ?value, ?newCtx) :-
        StartupContextRequest(?hctx, ?value),
        ?hctx = [?hctxValue],
        ?newCtx = [?hctxValue, ?value].

    FinalizerRegisterContextResponse(?callerCtx, ?inmethod, ?value, ?newCtx) :-
        FinalizerRegisterContextRequest(?callerCtx, ?inmethod, ?value),
        ?callerCtx = [?callerCtxValue1, ?callerCtxValue2],
        ?newCtx = [?callerCtxValue2, ?value],
        ?callerCtxValue1 = ?callerCtxValue1.

    // InitContextResponse(?value, ?ctx) :-
    //     InitContextRequest(?value),
    //     ?ctx = [?value, ?value].

    // InitHContextResponse(?value, ?hctx) :-
    //     InitHContextRequest(?value),
    //     ?hctx = [?value].

    InitContextResponse(?value, ?ctx) :-
        InitContextRequest(?value),
		isImmutableContext(?ctx).

    InitHContextResponse(?value, ?hctx) :-
        InitHContextRequest(?value),
		isImmutableHContext(?hctx).

.decl SpecialContextSensitivityMethod(?method:Method, ?sensivity:symbol)
.input SpecialContextSensitivityMethod(IO="file", filename="SpecialContextSensitivityMethod.facts", delimiter="\t")

.decl SpecialContextSensitivityMethodNotPresentViolation(?method:Method)

SpecialContextSensitivityMethodNotPresentViolation(?method) :-
  SpecialContextSensitivityMethod(?method, _),
  !isMethod(?method).

.printsize SpecialContextSensitivityMethodNotPresentViolation
.output SpecialContextSensitivityMethodNotPresentViolation

.decl NoSensitivityViolation(?method:Method)

NoSensitivityViolation(?method) :-
  Reachable(?method),
  !SpecialContextSensitivityMethod(?method, _).

.printsize NoSensitivityViolation
.output NoSensitivityViolation

.decl TwoObjectMethod(?method:Method)
.decl TwoTypeMethod(?method:Method)
.decl OneTypeMethod(?method:Method)
.decl ContextInsensitiveMethod(?method:Method)

.printsize TwoObjectMethod
.output TwoObjectMethod
.printsize TwoTypeMethod
.output TwoTypeMethod
.printsize OneTypeMethod
.output OneTypeMethod
.printsize ContextInsensitiveMethod
.output ContextInsensitiveMethod


}
