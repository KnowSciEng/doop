#include "class-initialization.logic"
#include "exceptions.logic"
#include "finalization.logic"
#include "android.logic"
#include "implicit-reachable.logic"
#include "native.logic"
#include "reference.logic"
#include "string-constants.logic"
#ifndef DISABLE_METHOD_HANDLES
#include "method-handles.logic"
#endif
#include "threads.logic"

#if defined(REFLECTION)
#include "reflection/rules.logic" 
#endif

#if defined(HEAPDL) || defined(IMPORT_DYNAMIC_FACTS)
#include "dynamicanalysis.logic"
#endif                            

FakeInvocation:RegisterFinalize[?value] = ?invo <-
   FakeInvocation:RegisterFinalize0[?heap] = ?invo,
   Value:byHeap[?heap] = ?value.


// NOTE: should be separate rules so the engine can treat them as alternative
// indexes
Value:byHeap[?heap] = ?value <-
   Value:Heap:Cons[?heap] = ?value.
Value:Heap[?value] = ?heap <-
   Value:byHeap[?heap] = ?value.

Value:byNum[?const] = ?value <-
   Value:Num:Cons[?const] = ?value.
Value:Num[?value] = ?const <-
   Value:byNum[?const] = ?value.

Value:byId[?id] = ?value <-
   Value:Mock:Cons[?id] = ?value.
Value:byId[?id] = ?value <-
   Value:Heap:Cons[?heap] = ?value,
   HeapAllocation:Id[?heap] = ?id.
Value:Id[?value] = ?id <-
   Value:byId[?id] = ?value.

Value:Heap:Cons[?heap] = ?value,
Value(?value),
Value:Type[?value] = ?type <-
   HeapAllocation(?heap),
   HeapAllocation:Type[?heap] = ?type.

// Only create values for numeric constants in a static initializer
// (or initial field value) inside a class whose name contains
// ".R$". We are trying to capture just the constants in Android "R"
// nested classes. REVIEW to generalize.
Value:Num:Cons[?const] = ?value,
Value(?value),
Value:Type[?value] = ?type <-
//   NumConstant(?const),
   AssignNumConstant:Id[?insn] = ?const,
   Instruction:Method[?insn] = ?meth,
   Method:SimpleName[?meth] = "<clinit>",
   Method:DeclaringType[?meth] = ?class,
   Type:Id(?class:?className),
   string:substring[?className, _, 3] = ".R$",
   ?type = Type:int[].

Value:Num:Cons[?const] = ?value,
Value(?value),
Value:Type[?value] = ?type <-
//   NumConstant(?const),
   FieldInitialValue[?fld] = ?const,
   Field:DeclaringType[?fld] = ?class,
   Type:Id(?class:?className),
   string:substring[?className, _, 3] = ".R$",
   ?type = Type:int[].

Value:isHeap(?value) <-
   Value:Heap:Cons[_] = ?value.
Value:isNonHeap(?value) <-
   Value:Mock:Cons[_] = ?value;
   Value:Num:Cons[_] = ?value.

Value:Null[] = ?nullValue <-
   HeapAllocation:Null[] = ?nullHeap,
   Value:byHeap[?nullHeap] = ?nullValue.


Value:DeclaringType[?value] = ?type <-
   AssignHeapAllocation(?heap, _, ?inmethod),
   Method:DeclaringType[?inmethod] = ?type,
   !StringConstant(?heap),
   !ClassHeap(?heap),
   !MethodHandleConstant(?heap),
   Value:byHeap[?heap] = ?value.

// Arbitrary, but would it matter?
Value:DeclaringType[?value] = "java.lang.System" <-
   ClassHeap(?heap),
   Value:byHeap[?heap] = ?value.

Value:DeclaringType[?value] = "java.lang.String" <-
   StringConstant(?heap),
   Value:byHeap[?heap] = ?value.

Value:DeclaringType[?value] = "java.lang.Object" <-
   Value:Null[] = ?value ;
   Value:byHeap[MainMethodArgArray[]] = ?value ;
   Value:byHeap[MainMethodArgArrayContent[]] = ?value.

Value:DeclaringType[?value] = "java.lang.invoke.MethodHandle" <-
   MethodHandleConstant(?heap),
   Value:byHeap[?heap] = ?value.

// Mark objects that are normal, i.e., not special
NotSpecialObject(?value) <-
  Value:Heap:Cons[_] = ?value;
  Value:Num:Cons[_] = ?value;
  Value:Mock:Cons[_] = ?value.


ImmutableContext(ctx), InitContextMacro("<<immutable-context>>").
InitialContext(ctx), InitContextMacro("<<initial-context>>").
JVMStartupContext(ctx), InitContextMacro("<<jvm-startup-context>>").
ClinitContext(ctx), InitContextMacro("<<clinit-context>>").

// The main method is reachable
ReachableContext(?ctx, ?method) <-
  InitialContext(?ctx),
  MainMethodDeclaration(?method).

// Implicitly reachable methods are invoked by the JVM on startup.
ReachableContext(?ctx, ?method) <-
   ImplicitReachable(?method),
   JVMStartupContext(?ctx).

// If a class needs to be initialized, then its class initializer is invoked
// Note: InitializedClass already deals with superclasses that need initialization
ReachableContext(?ctx, ?clinit) <-
  ClinitContext(?ctx),
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit.


ImmutableHContext(hctx), InitHContextMacro("<<immutable-hcontext>>").
JVMStartupHContext(hctx), InitHContextMacro("<<jvm-startup-hcontext>>").

// Create initial objects with their heap contexts
SystemThreadGroup(?hctx, ?alloc) <-
  JVMStartupHContext(?hctx),
  Value:byId["<<system-thread-group>>"] = ?alloc.

MainThreadGroup(?hctx, ?alloc) <-
  JVMStartupHContext(?hctx),
  Value:byId["<<main-thread-group>>"] = ?alloc.

MainThread(?hctx, ?alloc) <-
  JVMStartupHContext(?hctx),
  Value:byId["<<main-thread>>"] = ?alloc.

MethodInvocation:Base[?invocation] = ?base <-
  VirtualMethodInvocation:Base[?invocation] = ?base ;
  SpecialMethodInvocation:Base[?invocation] = ?base.