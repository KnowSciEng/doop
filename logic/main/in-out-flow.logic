LocalVarFlow(?to, ?from) <-
  AssignLocal(?from, ?to, _);
  AssignCast(_, ?from, ?to, _).

InFlowTo(?index, ?inVar, ?inVar) <-
  FormalParam[?index, _] = ?inVar.
// HACK: use 10 to designate receiver
InFlowTo(?index, ?inVar, ?inVar) <-
  ParamIndex:Id(?index:10),
  ThisVar[_] = ?inVar.

InFlowTo(?index, ?inVar, ?toVar) <-
  InFlowTo(?index, ?inVar, ?someVar),
  LocalVarFlow(?toVar, ?someVar).

_OptReturnVar(?method, ?return) <-
  ReturnVar(?return, ?method).

// Method that has its in-values (from its formal params) flow to returns.
InOutFlowMethod(?index, ?method) <-
  InFlowTo(?index, _, ?outVar),
  _OptReturnVar(?method, ?outVar).

// Now more deeply recursive logic: define LocalVarFlow itself based
// on InOutFlowMethod: a local var has values flow to another through
// a method call that has its params flow to its returns.
LocalVarFlow(?to, ?from) <-
  InOutFlowMethodInvocationParam(?from, ?invo),
  AssignReturnValue[?invo] = ?to.

InOutFlowMethodInvocationParam(?param, ?invo) <-
  (SpecialMethodInvocation:Insn(?invo);
   StaticMethodInvocation:Insn(?invo)),
  MethodInvocation:Method[?invo] = ?toMeth,
  InOutFlowMethod(?index, ?toMeth),
  ActualParam[?index, ?invo] = ?param.

InOutFlowMethodInvocationParam(?param, ?invo) <-
  SpecialMethodInvocation:Base[?invo] = ?param,
  MethodInvocation:Method[?invo] = ?toMeth,
  ParamIndex:Id(?index:10),
  InOutFlowMethod(?index, ?toMeth).
