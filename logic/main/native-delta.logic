/**********************************************************************************
 * Simulation of native code by code generation.
 *
 * Note that some other natives are simulated by logic.
 **********************************************************************************/

/**
 * The ugly: macro abstractions
 *
 * This should really be generated from Jimple, but that's currently
 * somewhat complicated.
 */

#define PlusAssignLocal(strFrom, strTo, strMethod) \
  +AssignLocal(?from, ?to, ?method) <- \
    Var:Id(?from:strFrom), \
    Var:Id(?to:strTo), \
    Method:Id(?method:strMethod)

#define PlusStoreStaticField(method, local, field) \
  +StoreStaticField(?l, ?sig, ?m) <- \
    Method:Id(?m:method), \
    Var:Id(?l:local), \
    Field:Id(?sig:field)

#define SimulateNativeAllocation(strMethod, strHeap, strConstructor) \
  +AssignHeapAllocation(?heap, ?return, ?method) \
    <- \
      Method:Id(?method:strMethod), \
      ReturnVar@previous(?return, ?method), \
      HeapAllocation:byId[strHeap] = ?heap. \
  \
  +SpecialMethodInvocation:Base[?invocation] = ?return, \
  +Instruction:Method[?invocation] = ?method, \
  +MethodInvocation:Method[?invocation] = ?constructor, \
  PlusSpecialMethodInvocation(?invocation, ?strInvocation), \
  +Instruction:Index[?invocation] = ?index \
    <- \
      Method:Id(?method:strMethod), \
      ReturnVar@previous(?return, ?method), \
      ?strInvocation = strMethod + "/native " + strConstructor, \
      Method:Id(?constructor:strConstructor), \
      ?index = 1

#define SimulateNativeStringArrayAllocation(strMethod, strArray, strElement, strElementType) \
  +AssignHeapAllocation(?heap, ?return, ?method) \
    <- \
      Method:Id(?method:strMethod), \
      ReturnVar@previous(?return, ?method), \
      HeapAllocation:byId[strArray] = ?heap. \
  \
  +Var(?var), \
  +Var:Id(?var:?strVar), \
  +Var:Type[?var] = ?type, \
  +Var:DeclaringMethod(?var, ?method), \
  +AssignHeapAllocation(?heap, ?var, ?method), \
  +StoreArrayIndex(?var, ?base, ?method) \
    <- \
      Method:Id(?method:strMethod), \
      ReturnVar@previous(?base, ?method), \
      ?strVar = strMethod + "/@native-array-element", \
      Type:Id(?type:strElementType), \
      HeapAllocation:byId[strElement] = ?heap

#define SimulateNativeStaticToVirtual(strMethod, strVirtual) \
  PlusVirtualMethodInvocation(?invocation, ?strInvocation), \
  +VirtualMethodInvocation(?invocation, ?signature, ?inmethod), \
  +VirtualMethodInvocation:Base[?invocation] = ?base, \
  +Instruction:Method[?invocation] = ?inmethod, \
  +MethodInvocation:Method[?invocation] = ?signature, \
  +Instruction:Index[?invocation] = ?index \
    <- \
      Method:Id(?inmethod:strMethod), \
      FormalParam@previous[0, ?inmethod] = ?base, \
      ?strInvocation = strMethod + "/native " + strVirtual, \
      Method:Id(?signature:strVirtual), \
      ?index = 1.\
  \
  PlusMethodInvocation(?invocation, ?strInvocation), \
  +AssignReturnValue[?invocation] = ?return \
    <- \
      Method:Id(?inmethod:strMethod), \
      ReturnVar@previous(?return, ?inmethod), \
      ?strInvocation = strMethod + "/native " + strVirtual


/**********************************************************************************
 *
 * java.lang.Object
 *
 **********************************************************************************/

/**
 * <java.lang.Object: java.lang.Object clone()>
 *
 * TODO could throw CloneNotSupportedException
 *
 * TODO should check if the object is Cloneable.
 *
 * TODO should return a clone of the heap allocation (not
 *      identity). The behaviour implemented here is based on Soot.
 */
+AssignLocal(ThisVar[?method], ?ret, ?method) <-
   Method:Id(?method:"<java.lang.Object: java.lang.Object clone()>"),
   ReturnVar(?ret, ?method).


/**********************************************************************************
 *
 * java.lang.System
 *
 ***************************************************/

/**
 * <java.lang.System: void setIn0(java.io.InputStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setIn0(java.io.InputStream)>",
  "java.lang.System.setIn0/@param0",
  "<java.lang.System: java.io.InputStream in>").

/**
 * <java.lang.System: void setOut0(java.io.PrintStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setOut0(java.io.PrintStream)>",
  "java.lang.System.setOut0/@param0",
  "<java.lang.System: java.io.PrintStream out>").

/**
 * <java.lang.System: void setErr0(java.io.PrintStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setErr0(java.io.PrintStream)>",
  "java.lang.System.setErr0/@param0",
  "<java.lang.System: java.io.PrintStream err>").

/**
 * <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
 */
PlusVar(?tmp, ?inmethod, ?tmpStr, ?tmpType),
+LoadArrayIndex(?src, ?tmp, ?inmethod),
+StoreArrayIndex(?tmp, ?dest, ?inmethod)
    <-
      Method:Id(?arraycopy:"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
      StaticMethodInvocation(?invocation, ?arraycopy, ?inmethod),
      ActualParam@previous[0, ?invocation] = ?src,
      ActualParam@previous[2, ?invocation] = ?dest,
      MethodInvocationValue(?invocation, ?strInvocation),
      ?tmpStr =  ?strInvocation + "/@tmp-arraycopy",
      Type:Id(?tmpType:"java.lang.Object").

/**********************************************************************************
 *
 * sun.misc.Unsafe
 *
 **********************************************************************************/
// For now handle these as array operations, not as field operations
+StoreArrayIndex(?from, ?base, ?inmethod) <-
      Method:Id(?casObject:"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>"),
      VirtualMethodInvocation(?invocation, ?casObject, ?inmethod),
      ActualParam@previous[0, ?invocation] = ?base,
      ActualParam@previous[3, ?invocation] = ?from.

+StoreArrayIndex(?from, ?base, ?inmethod) <-
      (Method:Id(?putObj:"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>");
       Method:Id(?putObj:"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>");
       Method:Id(?putObj:"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>");
       Method:Id(?putObj:"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>")),
      VirtualMethodInvocation(?invocation, ?putObj, ?inmethod),
      ActualParam@previous[0, ?invocation] = ?base,
      ActualParam@previous[2, ?invocation] = ?from.

+LoadArrayIndex(?base, ?to, ?inmethod) <-
      (Method:Id(?getObj:"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>");
       Method:Id(?getObj:"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>");
       Method:Id(?getObj:"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>")),
      VirtualMethodInvocation(?invocation, ?getObj, ?inmethod),
      ActualParam@previous[0, ?invocation] = ?base,
      AssignReturnValue@previous[?invocation] = ?to.

/**********************************************************************************
 *
 * java.io.FileSystem
 *
 **********************************************************************************/

SimulateNativeAllocation(
  "<java.io.FileSystem: java.io.FileSystem getFileSystem()>",
  "java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem",
  "<java.io.UnixFileSystem: void <init>()>").

SimulateNativeStringArrayAllocation(
  "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>",
  "java.io.UnixFileSystem.list/new java.lang.String[]",
  "java.io.UnixFileSystem.list/new java.lang.String",
  "java.lang.String").

/**********************************************************************************
 *
 * java.lang.ref.Finalizer
 *
 **********************************************************************************/

/**
 * Indirect invocations of finalize methods from java.lang.ref.Finalizer.
 *
 * Object.finalize is a protected method, so it cannot be directly
 * invoked. Finalizer uses an indirection via native code to
 * circumvent this. This rule implements this indirection.
 */
SimulateNativeStaticToVirtual(
  "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",
  "<java.lang.Object: void finalize()>").

/**********************************************************************************
 *
 * java.security.AccessController
 *
 **********************************************************************************/

/**
 * The run methods of privileged actions are invoked through the
 * AccessController.doPrivileged method. This introduces an
 * indirection via native code that needs to be simulated in a pointer
 * analysis.
 *
 * Call from an invocation of doPrivileged to an implementation of the
 * PrivilegedAction.run method that will be indirectly invoked.
 *
 * The first parameter of a doPrivileged invocation (a
 * PrivilegedAction) is assigned to the 'this' variable of 'run()'
 * method invocation.
 *
 * The return variable of the 'run()' method of a privileged action is
 * assigned to the return result of the doPrivileged method
 * invocation.
 *
 * TODO for PrivilegedExceptionAction, catch exceptions and wrap them in a PriviligedActionException.
 */
SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",
  "<java.security.PrivilegedAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",
  "<java.security.PrivilegedAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",
  "<java.security.PrivilegedExceptionAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",
  "<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
