#include "macros.logic"
#include "entry-points.logic"

FormalParamOpt(?index, ?method, ?formal) <- FormalParam[?index, ?method] = ?formal.

AllConcreteImplementations(?class, ?staticType) <-
   SubtypeOf(?class, ?staticType),
   ClassType(?class),
   !ClassModifier("abstract", ?class).

AllConcreteImplementations(?class, ?class) <-
   ClassType(?class),
   !ClassModifier("abstract", ?class).

AllConcreteImplementations(?type, ?type) <-
   ArrayType(?type).

ConcreteImplementations[?staticType] = ?class <-
   agg << ?class = min(?allClasses) >> AllConcreteImplementations(?allClasses, ?staticType).

AnyConcreteImplementations(?class, ?staticType) <-
   ConcreteImplementations[?staticType] = ?class.

MockObjectIntroduced(?class, ?value) <- ObjToMock(?class).

ObjToMock(?class) -> ReferenceType(?class).

// invariant: this should always be a type class
MockObjFromEntryPoint(?class),
ObjToMock(?class) <-
   EntryPoint(?method),
   Method:DeclaringType[?method] = ?class,
   !ClassModifier("abstract", ?class),
   ReferenceType(?class).

MockObjFromField(?fieldType),
ObjToMock(?fieldType) <-
   FieldInformationOpt(_, _, ?fieldType),
   !ClassModifier("abstract", ?fieldType),
   ReferenceType(?fieldType).

MockObjFromArray(?class),
ObjToMock(?class) <-
   MockObject(_, ?type),
   ArrayType(?type),
   ComponentType[?type] = ?componentType,
   AnyConcreteImplementations(?class, ?componentType).

FieldInformation(?signature, ?fieldtype, ?class) ->
   Field(?signature), Type(?fieldtype), Type(?class).

FieldInformation0(?signature, ?fieldtype, ?class) <-
   Field:Type[?signature] = ?fieldtype,
   Field:DeclaringType[?signature] = ?class.

FieldInformation0(?signature, ?fieldtype, ?class) <-
   FieldInformation(?signature, ?fieldtype, ?staticType),
   AllConcreteImplementations(?class, ?staticType).

FieldInformation(?signature, ?fieldtype, ?class) <-
   FieldInformation0(?signature, ?fieldtype, ?class),
   MockObject(_, ?class).

FieldInformation(?signature, ?fieldConcreteType, ?class) <-
   FieldInformationOpt(?signature, ?class, ?fieldStaticType),
   AnyConcreteImplementations(?fieldConcreteType, ?fieldStaticType).

FieldInformationOpt(?signature, ?class, ?fieldtype) <-
   FieldInformation(?signature, ?fieldtype, ?class).
   
MockValueForField(?signature, ?basevalue, ?fieldtype) ->
   Field(?signature), Type(?fieldtype), Value(?basevalue).

MockValueForField(?signature, ?basevalue, ?fieldtype) <-
   FieldInformation(?signature, ?fieldtype, ?class),
   MockObject(?basevalue, ?class).

MockObjectOpt(?fieldtype, ?value) <- MockObject(?value, ?fieldtype).

InstanceFieldPointsTo(?hctx, ?value, ?signature, ?hctx, ?basevalue) <-
   ImmutableHContext(?hctx),
   MockValueForField(?signature, ?basevalue, ?fieldtype),
   MockObject(?value, ?fieldtype).

AnyConcreteImplementationsOpt(?staticType, ?class) <- AnyConcreteImplementations(?class, ?staticType).


MockObjectForType(?value, ?staticType) <-
   MockObject(?value, ?class),
   AnyConcreteImplementationsOpt(?staticType, ?class).

ArrayIndexPointsTo(?hctx, ?componentValue, ?hctx, ?arrayValue) <- // TODO
   MockObject(?arrayValue, ?arrayType),
   ArrayType(?arrayType),
   ComponentType[?arrayType] = ?componentType,
   MockObjectForType(?componentValue, ?componentType),
   ImmutableHContext(?hctx).

FormalsForEntryPoints(?method, ?formal) <-
   FormalParam[_, ?method] = ?formal,
   EntryPoint(?method).

MockObjFromFormal(?subtype),
ObjToMock(?subtype),
TypeForFormals(?formal, ?method, ?subtype) <-
   FormalsForEntryPoints(?method, ?formal),
   Var:Type[?formal] = ?staticType,
   AnyConcreteImplementations(?subtype, ?staticType).

MockForFormal(?value, ?formal, ?method) <-
   TypeForFormals(?formal, ?method, ?class),
   MockObject(?value, ?class).

// bind mock objects to formals
VarPointsTo(?hctx, ?value, ?ctx, ?formal)
 <-
   ContextForEntryPoint(?ctx, ?method),
   MockForFormal(?value, ?formal, ?method),
   ImmutableHContext(?hctx).

// receivers for entry points
MergeStartupMacro(?hctx, ?value, ?calleeCtx),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?receiver),
ContextForEntryPoint(?calleeCtx, ?method)
 <-
   ThisVar[?method] = ?receiver,
   Method:DeclaringType[?method] = ?class,
   MockObject(?value, ?class),
   EntryPoint(?method),
   ImmutableHContext(?hctx).

CallGraphEdgeOpt(?calleeCtx, ?method, ?callerCtx, ?invocation)
 <- CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method).

MethodCallGraphEdge(?calleeCtx, ?method, ?callerCtx, ?inmethod) <-
   CallGraphEdgeOpt(?calleeCtx, ?method, ?callerCtx, ?invocation),
   Instruction:Method[?invocation] = ?inmethod.


ReachableContext(?ctx, ?method),
MockReachableContext(?ctx, ?method) <-
   ContextForEntryPoint(?ctx, ?method).

MockReachableContext(?calleeCtx, ?method) <-
   MethodCallGraphEdge(?calleeCtx, ?method, ?callerCtx, ?inmethod),
   MockReachableContext(?callerCtx, ?inmethod).

// bind mock objects to receivers
TypeForReceiverInContext(?ctx, ?receiver, ?class) <-
   MockReachableContext(?ctx, ?method),
   ThisVar[?method] = ?receiver,
   Method:DeclaringType[?method] = ?class.

// all other receivers
VarPointsTo(?hctx, ?value, ?ctx, ?receiver)
 <-
   TypeForReceiverInContext(?ctx, ?receiver, ?class),
   MockObject(?value, ?class),
   ImmutableHContext(?hctx).