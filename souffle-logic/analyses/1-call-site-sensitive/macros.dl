// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, value, hctx) \
  GlobalHContext(hctx)


// For this analysis the context of a method call corresponds to the
// invocation site of the method.
#define MergeMacro(callerCtx, invocation, hctx, value, newCtx) \
  newCtx = [invocation]
  
#define MergeStaticMacro(callerCtx, invocation, newCtx) \
  newCtx = [invocation]

#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  newCtx = callerCtx
  
#define MergeStartupMacro(hctx, value, newCtx) \
  StartupInvocation(invocation), \
  newCtx = [invocation]

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  FakeInvocation_RegisterFinalize(value, invocation), \
  newCtx = [invocation]

#define InitContextMacro(invocation) \
  isContext(ctx) :- \
  isMethodInvocation(invocation), \
  ctx = [invocation]

#define InitHContextMacro(valueId) \
  isHContext(hctx) :- GlobalHContext(hctx)
