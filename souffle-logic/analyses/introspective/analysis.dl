#include "../context-insensitive/analysis.dl"

#define UNIQUE_VALUE  "<<unique-value>>"
#define UNIQUE_HCONTEXT "<<unique-hcontext>>"

.init preAnalysis = BasicContextSensitivity<ContextInsensitiveConfiguration>


.comp IntrospectiveConfiguration : AbstractConfiguration {
           
.type Context  = [ c1:mainAnalysis.Value, c2:mainAnalysis.Value ]
.type HContext = [ value:mainAnalysis.Value ]
                    
ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
  ContextRequest(?callerCtx, ?hctx, ?invo, ?value),
  Value_Type(?value, ?valuetype),
  basic.ResolveInvocation(?valuetype, ?invo, ?tomethod),
  Method_DeclaringType(?tomethod, ?class),
  !ClassToRefine(?class),
  !MethodToRefine(?tomethod),
  isImmutableContext(?calleeCtx).

ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
  ContextRequest(?callerCtx, ?hctx, ?invo, ?value),
  Value_Type(?value, ?valuetype),
  basic.ResolveInvocation(?valuetype, ?invo, ?tomethod),
  (Method_DeclaringType(?tomethod, ?class),
   ClassToRefine(?class);
   MethodToRefine(?tomethod)),
  ?hctx = [?hctxValue],
  ?calleeCtx = [?hctxValue, ?value].

ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
  ContextRequest(?callerCtx, ?hctx, ?invo, ?value),
  isSpecialMethodInvocation_Insn(?invo),
  MethodInvocation_Method(?invo, ?tomethod),
  Method_DeclaringType(?tomethod, ?class),
  !ClassToRefine(?class),
  !MethodToRefine(?tomethod),
  isImmutableContext(?calleeCtx).

ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
  ContextRequest(?callerCtx, ?hctx, ?invo, ?value),
  isSpecialMethodInvocation_Insn(?invo),
  MethodInvocation_Method(?invo, ?tomethod),
  (Method_DeclaringType(?tomethod, ?class),
   ClassToRefine(?class);
   MethodToRefine(?tomethod)),  
  ?hctx = [?hctxValue],
  ?calleeCtx = [?hctxValue, ?value].

StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
  StaticContextRequest(?callerCtx, ?invo),
  ?calleeCtx = ?callerCtx.

RecordContextResponse(?ctx, ?value, ?arg, ?hctx) :-
  RecordContextRequest(?ctx, ?value, ?arg),      
  ?ctx = [?ctxValue1, ?ctxValue2],
  ?hctx = [?ctxValue2],
  ?ctxValue1 = ?ctxValue1.

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
ThreadStartContextResponse(?callerCtx, ?hctx, ?value, ?newCtx) :-
  ThreadStartContextRequest(?callerCtx, ?hctx, ?value),
  ?hctx = [?hctxValue],
  ?newCtx = [?hctxValue, ?value].

StartupContextResponse(?hctx, ?value, ?newCtx) :-
  StartupContextRequest(?hctx, ?value),
  ?hctx = [?hctxValue],
  ?newCtx = [?hctxValue, ?value].

FinalizerRegisterContextResponse(?callerCtx, ?inmethod, ?value, ?newCtx) :-
  FinalizerRegisterContextRequest(?callerCtx, ?inmethod, ?value),
  ?callerCtx = [?callerCtxValue1, ?callerCtxValue2],
  ?newCtx = [?callerCtxValue2, ?value],
  ?callerCtxValue1 = ?callerCtxValue1.

InitContextResponse(?value, ?ctx) :-
  InitContextRequest(?value),
  ?ctx = [?value, ?value].

InitHContextResponse(?value, ?hctx) :-
  InitHContextRequest(?value),
  ?hctx = [?value].
         

/** Utility rule: Value points to another value directly or indirectly **/
// .decl ValuePointsTo(?baseValue:Value, ?value:Value)

// ValuePointsTo(?baseValue, ?value) :-
//   preAnalysis.InstanceFieldPointsTo(_, ?value, _, _, ?baseValue).
// ValuePointsTo(?baseValue, ?value) :-
//   ValuePointsTo(?value1, ?value),
//   preAnalysis.InstanceFieldPointsTo(_, ?value1, _, _, ?baseValue).

// .decl ArgPointsTo(?arg:Var, ?method:Method, ?value:Value)

// ArgPointsTo(?arg, ?method, ?value) :-
//   FormalParam(?index, ?method, ?arg),
//   preAnalysis.VarPointsTo(_, ?value, _, ?arg),
//   ?index != 0.

.decl ThisPointsTo(?method:Method, ?value:Value)

ThisPointsTo(?method, ?value) :-
  ThisVar(?method, ?this),
  preAnalysis.VarPointsTo(_, ?value, _, ?this).

.decl ThisPointsToTwoValues(?method:Method)
     
ThisPointsToTwoValues(?method) :-
  ThisPointsTo(?method, ?value1),
  ThisPointsTo(?method, ?value2),
  ?value1 != ?value2.

.printsize ThisPointsToTwoValues

/** Direct in out flow:
 *
 *   arg -> value
 *   ret -> value
 */

// .decl InOutFlowDirectValuePerClass(?inMethod:Method, ?outMethod:Method, ?class:Type, ?value:Value)

// InOutFlowDirectValuePerClass(?inMethod, ?outMethod, ?class, ?value) :-
//   ThisPointsToTwoValues(?inMethod),
//   ArgPointsTo(_, ?inMethod, ?value),    
//   basic.MethodsOfSameNonSDKType(?inMethod, ?outMethod, ?class),
//   ReturnVar(?return, ?outMethod),
//   preAnalysis.VarPointsTo(_, ?value, _, ?return).

// .decl InOutFlowDirectTwoValuesPerClass(?inMethod:Method, ?outMethod:Method, ?class:Type)

// InOutFlowDirectTwoValuesPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowDirectValuePerClass(?inMethod, ?outMethod, ?class, ?value1),
//   InOutFlowDirectValuePerClass(?inMethod, ?outMethod, ?class, ?value2),
//   ?value1 != ?value2. 
      
/**
 * Wrapped in out flow:
 *
 * arg -> value
 * ret -> ... -> ... -> value
 */
// .decl InOutFlowWrappedValuePerClass(?inMethod:Method, ?outMethod:Method, ?class:Type, ?value:Value) 

// InOutFlowWrappedValuePerClass(?inMethod, ?outMethod, ?class, ?value) :-
//   ThisPointsToTwoValues(?inMethod),
//   ArgPointsTo(_, ?inMethod, ?value),    
//   basic.MethodsOfSameNonSDKType(?inMethod, ?outMethod, ?class),
//   ReturnVar(?return, ?outMethod),
//   preAnalysis.VarPointsTo(_, ?baseValue, _, ?return),
//   ValuePointsTo(?baseValue, ?value),
//   ?value != ?baseValue.

// .decl InOutFlowWrappedTwoValuesPerClass(?inMethod:Method, ?outMethod:Method, ?class:Type)

// InOutFlowWrappedTwoValuesPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowWrappedValuePerClass(?inMethod, ?outMethod, ?class, ?value1),
//   InOutFlowWrappedValuePerClass(?inMethod, ?outMethod, ?class, ?value2),
//   ?value1 != ?value2.

/**
 * Unwrapped in out flow:
 *
 * arg -> ... -> ... -> ... -> value
 * ret -> value
 */
// .decl InOutFlowUnwrappedValuePerClass(?inMethod:Method, ?outMethod:Method, ?class:Type, ?value:Value) 

// InOutFlowUnwrappedValuePerClass(?inMethod, ?outMethod, ?class, ?value) :-
//   ThisPointsToTwoValues(?inMethod),
//   ArgPointsTo(_, ?inMethod, ?value),    
//   basic.MethodsOfSameNonSDKType(?inMethod, ?outMethod, ?class),
//   ReturnVar(?return, ?outMethod),
//   preAnalysis.VarPointsTo(_, ?value, _, ?return),
//   ValuePointsTo(?baseValue, ?value),
//   ?value != ?baseValue.

// .decl InOutFlowUnwrappedTwoValuesPerClass(?inMethod:Method, ?outMethod:Method, ?class:Type)

// InOutFlowUnwrappedTwoValuesPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowUnwrappedValuePerClass(?inMethod, ?outMethod, ?class, ?value1),
//   InOutFlowUnwrappedValuePerClass(?inMethod, ?outMethod, ?class, ?value2),
//   ?value1 != ?value2.

/**
 * Any in out flow:
 *
 * arg -> ... -> ... -> ... -> value
 * ret -> ... -> ... -> ... -> value
 */
// The following refinement logic is too expensive

// .decl InOutFlowAnyValuePerClass(?inMethod:Method, ?outMethod:Method, ?class:Type, ?value:Value) 

// InOutFlowAnyValuePerClass(?inMethod, ?outMethod, ?class, ?value) :-
//   FormalParam(_, ?inMethod, ?arg),
//   basic.MethodsOfSameType(?inMethod, ?outMethod, ?class),
//   ReturnVar(?returnArg, ?outMethod),
//   preAnalysis.VarPointsTo(_, ?baseValue1, _, ?arg),
//   preAnalysis.VarPointsTo(_, ?baseValue2, _, ?returnArg),
//   ValuePointsTo(?baseValue1, ?value),
//   ValuePointsTo(?baseValue2, ?value),
//   ?baseValue1 != ?baseValue2.
             
// .decl InOutFlowAnyTwoValuesPerClass(?inMethod:Method, ?outMethod:Method, ?class:Type)
      
// InOutFlowAnyTwoValuesPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowAnyValuePerClass(?inMethod, ?outMethod, ?class, ?value1),
//   InOutFlowAnyValuePerClass(?inMethod, ?outMethod, ?class, ?value2),
//   ?value1 != ?value2.
// .decl InOutFlowPerClass(?inMethod:Method, ?outMethod:Method, ?class:Type)

// InOutFlowPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowDirectTwoValuesPerClass(?inMethod, ?outMethod, ?class).

// InOutFlowPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowWrappedTwoValuesPerClass(?inMethod, ?outMethod, ?class).

// InOutFlowPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowUnwrappedTwoValuesPerClass(?inMethod, ?outMethod, ?class).

// InOutFlowPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowAnyTwoValuesPerClass(?inMethod, ?outMethod, ?class).

.decl ClassToRefine(?class:Type)
      
// ClassToRefine(?class) :-
//   InOutFlowPerClass(_, _, ?class).

ClassToRefine(?class) :-
  isType(?class),
  match("java\.util\..*", ?class).

// .input ClassToRefine(IO="file", filename="/home/anantoni/Development/doop-nexgen/ClassToRefine.facts")
       
.decl MethodToRefine(?method:Method)

// MethodToRefine(?method) :-      
//   (InOutFlowPerClass(?method, _, _);
//    InOutFlowPerClass(_, ?method, _)).

.printsize isMethod      
.printsize MethodToRefine


/** Direct in out flow:
 *
 *   arg -> value
 *   ret -> value
 */
// .decl OutFlowDirectValue(?outMethod:Method, ?value:Value)

// OutFlowDirectValue(?outMethod, ?value) :-
//   ThisPointsToTwoValues(?inMethod),
//   ArgPointsTo(_, ?inMethod, ?value),    
//   preAnalysis.Reachable(?outMethod),
//   ReturnVar(?return, ?outMethod),
//   preAnalysis.VarPointsTo(_, ?value, _, ?return).


// .decl OutFlowDirectTwoValues(?outMethod:Method)
      
// OutFlowDirectTwoValues(?outMethod) :-
//   OutFlowDirectValue(?outMethod, ?value1),
//   OutFlowDirectValue(?outMethod, ?value2),
//   ?value1 != ?value2.

MethodToRefine(?method) :-      
  ThisPointsToTwoValues(?method).

.output MethodToRefine
// MethodToRefine(?method) :-
//   OutFlowDirectTwoValues(?method).            
           
}
