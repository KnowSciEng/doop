.decl VarPointsToConstValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)

.decl VarPointsToConstNoneValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.output VarPointsToConstNoneValue


// anantoni: Had to switch all these from NumConstantValue to Value
.decl VarPointsToConstFloatValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.output VarPointsToConstFloatValue

.decl VarPointsToConstIntValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.output VarPointsToConstIntValue

//Made these context insensitive, maybe Review this.
.decl VarHasConstFloatValue(?value:Value, ?var:Var)
.output VarHasConstFloatValue

.decl VarHasConstValue(?value:Value, ?var:Var)
.output VarHasConstValue

.decl VarHasConstIntValue(?value:Value, ?var:Var)
.output VarHasConstIntValue

.decl VarHasConstNoneValue(?value:Value, ?var:Var)
.output VarHasConstNoneValue

.output Value_Num

//anantoni: Shouldn't this be a disjunction?
VarHasConstValue(?value, ?var) :-
  VarHasConstNoneValue(?value, ?var);
  VarHasConstFloatValue(?value, ?var);
  VarHasConstIntValue(?value,?var).

VarPointsToConstValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  isConstantValue(?value).

VarPointsToConstNoneValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  isNoneValue(?value).

VarPointsToConstFloatValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  Value_Num(?value,?num),
  isFloatConstant(?num).

VarPointsToConstIntValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  Value_Num(?value,?num),
  isIntConstant(?num).

VarHasConstNoneValue(?value, ?var),
configuration.RecordContextRequest(?ctx, ?value, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  isAssignNone_Insn(?instr),
  AssignInstruction_To(?instr, ?var),
  ?value = "<None>".

VarPointsTo(?hctx, ?value, ?ctx, ?var):-
  configuration.RecordContextResponse(?ctx, ?value, ?var, ?hctx),
  ?value = "<None>".

Value_Num(?value, ?num),
VarHasConstFloatValue(?value, ?var),
configuration.RecordContextRequest(?ctx, ?value, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignFloatConstant_Id(?instr, ?num),
  AssignInstruction_To(?instr, ?var),
  ?value = cat(cat("<num-constant(float):", ?num),">").

VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignFloatConstant_Id(?instr, ?num),
  AssignInstruction_To(?instr, ?var),
  configuration.RecordContextResponse(?ctx, ?value, ?var, ?hctx),
  ?value = cat(cat("<num-constant(float):", ?num),">").

Value_Num(?value,?num),
VarHasConstIntValue(?value, ?var),
configuration.RecordContextRequest(?ctx, ?value, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignIntConstant_Id(?instr, ?num),
  AssignInstruction_To(?instr, ?var),
  ?value = cat(cat("<num-constant(int):", ?num),">").

Value_Num(?value,?res),
//VarHasConstIntValue(?hctx, ?value, ?ctx, ?var),
configuration.RecordContextRequest(?ctx, ?value, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignInstruction_To(?instr, ?var),
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  BinaryIntOp(?ctx, ?instr, ?var1, ?var2, ?op, ?res),
  ?value = cat(cat("<num-constant(int):", ?res),">").

VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignIntConstant_Id(?instr, ?num),
  AssignInstruction_To(?instr, ?var),
  configuration.RecordContextResponse(?ctx, ?value, ?var, ?hctx),
  ?value = cat(cat("<num-constant(int):", ?num),">").

VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignInstruction_To(?instr, ?var),
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  BinaryIntOp(?ctx, ?instr, ?var1, ?var2, ?op, ?res),
  configuration.RecordContextResponse(?ctx, ?value, ?var, ?hctx),
  ?value = cat(cat("<num-constant(int):", ?res),">").

.decl BinaryIntOp(?ctx: configuration.Context, ?instr:Instruction, ?var1:Var, ?var2:Var, ?op:symbol, ?res:IntConstant)
.output BinaryIntOp

isIntConstant(?res),
BinaryIntOp(?ctx, ?instr, ?var1, ?var2, ?op, ?res) :-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  Value_Num(?numConstVal1, ?numConst1),
  Value_Num(?numConstVal2, ?numConst2),
  ?op = "add",
  ?res = to_string(to_number(?numConst1) + to_number(?numConst2)).

isIntConstant(?res),
BinaryIntOp(?ctx, ?instr, ?var1, ?var2, ?op, ?res):-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  Value_Num(?numConstVal1, ?numConst1),
  Value_Num(?numConstVal2, ?numConst2),
  ?op = "sub",
  ?res = to_string(to_number(?numConst1) - to_number(?numConst2)).

isIntConstant(?res),
BinaryIntOp(?ctx, ?instr, ?var1, ?var2, ?op, ?res):-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  Value_Num(?numConstVal1, ?numConst1),
  Value_Num(?numConstVal2, ?numConst2),
  ?op = "mul",
  ?res = to_string(to_number(?numConst1) * to_number(?numConst2)).

//TODO: Maybe perform some checks that the result of this is Int
isIntConstant(?res),
BinaryIntOp(?ctx, ?instr, ?var1, ?var2, ?op, ?res):-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  Value_Num(?numConstVal1,?numConst1),
  Value_Num(?numConstVal2,?numConst2),
  ?intConst1 = to_number(?numConst1),
  ?intConst2 = to_number(?numConst2),
  ?op = "div",
  ?res = to_string(?intConst1 / ?intConst2).
