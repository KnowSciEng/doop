#include "android.dl"
#include "class-initialization.dl"
#include "exceptions.dl"
#include "finalization.dl"
#include "implicit-reachable.dl"
#include "native.dl"
#include "reference.dl"
#include "string-constants.dl"
#include "threads.dl"

#include "main-delta.dl"

#if defined(REFLECTION)
#include "reflection/rules.dl" 
#endif

FakeInvocation_RegisterFinalize(?heapValue, ?invo) :-
  FakeInvocation_RegisterFinalize0(?heapValue, ?invo).


Value_isHeap(?heapValue),
isValue(?heapValue),
Value_Type(?heapValue, ?type) :-
  isHeapAllocation(?heapValue),
  HeapAllocation_Type(?heapValue, ?type).

// Only create values for numeric constants in a static initializer
// (or initial field value) inside a class whose name contains
// ".R$". We are trying to capture just the constants in Android "R"
// nested classes. REVIEW to generalize.
// Numeric constants are prepended with *num-constant-* to distinguish
// them from allocations that share the same string value.
Value_Num(cat("num-constant-", ?const), ?const),
isValue(cat("num-constant-", ?const)),
Value_Type(cat("num-constant-", ?const), ?type) :-
  isNumConstant(?const),
  AssignNumConstant_Id(?insn, ?const),
  Instruction_Method(?insn, ?meth),
  Method_SimpleName(?meth, "<clinit>"),
  Method_DeclaringType(?meth, ?className),
  isType(?className),
  contains(".R$", ?className),
  Type_int(?type).

Value_Num(cat("num-constant-", ?const), ?const),
isValue(cat("num-constant-", ?const)),
Value_Type(cat("num-constant-", ?const), ?type) :-
  isNumConstant(?const),
  FieldInitialValue(?fld, ?const),
  Field_DeclaringType(?fld, ?className),
  isType(?className),
  contains(".R$", ?className),
  Type_int(?type).

Value_isNonHeap(?value) :-
  Value_isMock(?value) ;
  Value_Num(?value, _).

Value_Null(?nullheap) :-
  HeapAllocation_Null(?nullheap).


Value_DeclaringType(?heapValue, ?type) :-
  AssignHeapAllocation(?heapValue, _, ?inmethod),
  Method_DeclaringType(?inmethod, ?type),
  !isStringConstant(?heapValue),
  !isClassHeap(?heapValue),
  !isMethodHandleConstant(?heapValue).

Value_DeclaringType(?heapValue, "java.lang.System") :-
  isClassHeap(?heapValue).

Value_DeclaringType(?heapValue, "java.lang.String") :-
  isStringConstant(?heapValue).

Value_DeclaringType(?value, "java.lang.Object") :-
  Value_Null(?value);
  MainMethodArgArray(?value);
  MainMethodArgArrayContent(?value).

Value_DeclaringType(?heapValue, "java.lang.invoke.MethodHandle") :-
  isMethodHandleConstant(?heapValue).


// Mark objects that are normal, i.e., not special
NotSpecialObject(?value) :-
  Value_isHeap(?value) ;
  Value_isMock(?value) ;
  Value_Num(?value, _).


isImmutableContext(ctx), InitContextMacro("<<immutable-context>>").
isInitialContext(ctx), InitContextMacro("<<initial-context>>").
isJVMStartupContext(ctx), InitContextMacro("<<jvm-startup-context>>").
isClinitContext(ctx), InitContextMacro("<<clinit-context>>").

// The main method is reachable
ReachableContext(?initialContext, ?method) :-
  isInitialContext(?initialContext),
  MainMethodDeclaration(?method).

// Implicitly reachable methods are invoked by the JVM on startup.
ReachableContext(?jvmStartUpContext, ?method) :-
  isJVMStartupContext(?jvmStartUpContext),
  ImplicitReachable(?method).

// If a class needs to be initialized, then its class initializer is invoked
// Note: InitializedClass already deals with superclasses that need initialization
ReachableContext(?clinitContext, ?clinit) :-
  isClinitContext(?clinitContext),
  InitializedClass(?class),
  ClassInitializer(?class, ?clinit).


isImmutableHContext(hctx), InitHContextMacro("<<immutable-hcontext>>").
isJVMStartupHContext(hctx), InitHContextMacro("<<jvm-startup-hcontext>>").

// Create initial objects with their heap contexts
SystemThreadGroup(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  ?alloc = "<<system-thread-group>>",
  isValue(?alloc).

MainThreadGroup(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  ?alloc = "<<main-thread-group>>",
  isValue(?alloc).

MainThread(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  ?alloc = "<<main-thread>>",
  isValue(?alloc).
