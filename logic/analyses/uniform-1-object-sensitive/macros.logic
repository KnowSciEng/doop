// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[] = hctx


// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the call-site.
// Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invo, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[value, invo] = calleeCtx

//#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
//  MergeBasis(hctx, callerCtx, value, invocation)

//#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
//  CachedMerge[value, invocation] = calleeCtx

// For this analysis, static calls use the invocation site and
// the receiver object of the caller as a context.
#define MergeStaticMacro(callerCtx, invo, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContext1FromContext[callerCtx], invo] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[value, RealContext2FromContext[callerCtx]] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[value, ImmutableInvValue[]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[value, RealContext2FromContext[callerCtx]] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), ContextFromRealContext[value, invo] = ctx \
  <- Value:byId[valueId] = value, MethodInvocationValue(invo, valueId)

#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromRealHContext[] = hctx
