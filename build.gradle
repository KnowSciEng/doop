buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'commons-io:commons-io:2.4'
    }
}

plugins {
    id 'antlr'
    id 'application'
    id 'groovy'
    id 'maven-publish'
    //see https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version '2.4.0'
}

apply from  : 'benchmarks.gradle'

//applicationDefaultJvmArgs = ["-Xmx2048m"]
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

group = 'org.clyze'

//For the doop app
mainClassName = 'org.clyze.doop.Main'


task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

repositories {

    mavenLocal()

    mavenCentral()

    maven {
        credentials {
            username artifactory_user
            password artifactory_password
        }

        url "${artifactory_contextUrl}/plast"
    }
}

task printClasspath {
    doLast {
        configurations.compile.each { println it }
    }
}

configurations.all {
    //This is required only for the SNAPSHOT dependencies
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.7',             // Groovy
            'commons-logging:commons-logging:1.1',              // Logging wrapper
            'log4j:log4j:1.2.14',                               // Logging implementation
            'commons-cli:commons-cli:1.2',                      // Command line processor
            'commons-io:commons-io:2.4',                        // File Utils
            'org.apache.ivy:ivy:2.3.0',                         // Apache Ivy (for downloading jars from maven repos)
            'org.ow2.asm:asm-debug-all:5.1',                    // Java Bytecode library
            'org.smali:dexlib2:2.2b4'                           // Dexlib2: library for reading/modifying/writing Android dex files

    // Soot is a compile time dependency
    compile 'ext:AXMLPrinter2:1.0-SNAPSHOT',
            "ext:sootclasses:1.+",
            "ext:soot-infoflow:1.+",
            "ext:soot-infoflow-android:1.+"

    compile 'org.clyze:clue-common:1.+'

    // JPhantom is a runtime dependency
    runtime 'org.clyze:jphantom:1.2'
    runtime 'ext:averroes-no-properties:1.0-SNAPSHOT',
            'ext:herosclasses:1.1',
            'ext:axml:2.0',
            'org.smali:util:2.2b4'                              // Dexlib2 utilities

    // DeepDoop
    antlr   'org.antlr:antlr4:4.5.1-1'
    compile 'org.antlr:antlr4-runtime:4.5.1-1'
    testCompile 'junit:junit:4.12',
            'org.spockframework:spock-core:1.0-groovy-2.4'
}

applicationDistribution.from(file("$projectDir/logic")) {
    into 'logic'
}

applicationDistribution.from(projectDir) {
    include 'docs', 'COLLABORATORS', 'LICENSE', 'README.md'
}


run {
    //We set the DOOP_HOME environment variable (see org.clyze.doop.Main)
    environment.DOOP_HOME = projectDir
    if (project.hasProperty('args')) {
        args project.property('args').split()
    }
}

task bytecode2jimple(type: JavaExec) {
    description 'Generate Jimple/Shimple file'
    group = 'Other'
    main = 'org.clyze.doop.soot.Main'
    classpath = sourceSets.main.runtimeClasspath
    if (!project.hasProperty('args') ||
            project.property('args').isEmpty() ||
            project.property('args') == '-h' ||
            project.property('args') == '--help') {
        args = ["--bytecode2jimpleHelp"]
    } else {
        def gradleInvocationDir = System.getProperty('user.dir')
        def givenArgs = project.property('args').tokenize()
        def index = givenArgs.indexOf("-d")
        if (index != -1) {
            def outDir = givenArgs[index+1]
            if (!outDir.startsWith("/"))
                givenArgs[index+1] = gradleInvocationDir + "/" + outDir
        }
        else {
            givenArgs = ["-d", gradleInvocationDir] + givenArgs
        }
        def lastIndex = givenArgs.size()-1
        def inputFile = givenArgs[lastIndex]
        if (!inputFile.startsWith("/"))
            givenArgs[lastIndex] = gradleInvocationDir + "/" + inputFile

        args = ["--bytecode2jimple", "--allow-phantom"] + givenArgs
    }
}

task jimple2json(type: JavaExec) {
    description 'Generate JSON files from Jimple'
    group = 'Other'
    main = 'org.clyze.jimple.Main'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("args")) {
        args project.property("args").split()
    }
}

task deepdoop(type: JavaExec) {
    description 'Run DeepDoop'
    group = 'Other'
    main = 'org.clyze.deepdoop.Main'
    classpath = sourceSets.main.runtimeClasspath
    enableAssertions = true
    if (project.hasProperty("args")) {
        args project.property("args").split()
    }
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

import org.apache.commons.io.FileUtils

clean.doFirst {
    def out = System.getenv('DOOP_OUT') ?: "${projectDir}/out"
    file(out      ).list().each { f -> delete "$out/$f" }
    file('logs'   ).list().each { f -> delete "logs/$f" }
    file('results').list().each { f -> delete "results/$f" }
    FileUtils.deleteQuietly(new File('last-analysis'))
}

if (project.hasProperty('artifactory_user')) {

    //Generate a jar with the logic files
    task logicJar(type:Jar) {
        from "$projectDir/logic"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact logicJar {
                    classifier "logic"
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username artifactory_user
                    password artifactory_password
                }

                url version.endsWith("-SNAPSHOT") ?
                        "${artifactory_contextUrl}/libs-snapshot-local" :
                        "${artifactory_contextUrl}/libs-release-local"
            }
        }
    }

    release {

        failOnSnapshotDependencies = false

        /* publish before releasing
           buildTasks =['build', 'publish']
         */
    }

    afterReleaseBuild.dependsOn publish

}
