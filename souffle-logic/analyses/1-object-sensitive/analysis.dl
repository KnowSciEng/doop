// Context-sensitive pointer analysis with context of 1 object.

// In this analysis, the real context is a Value.
.type Context = [ value:Value ]

// This analysis has no context for heap objects.
// This is emulated by creating a single HContext object,
// which is used everywhere.
.type HContext
.decl GlobalHContext(?hctx:HContext)

GlobalHContext("<<global-context>>").


// This analysis treats arrays specially (deeper context).
// Only used for arrays. Maps each context to a *potential* hcontext.
.decl ContextToHContext(?ctx:Context, ?hctx:HContext)

ContextToHContext(?ctx, cat("<<constructed-hctx-", cat(?value, ">>"))) :-
  isContext(?ctx),
  ?ctx = [?value].
