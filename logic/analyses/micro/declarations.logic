#include "../../main/class-initialization-declarations.logic"
#include "../../main/implicit-reachable-declarations.logic"
#include "../../main/string-constants-declarations.logic"


MainMethodDeclaration(?method) ->
   Method(?method).

/*
 * Declarations
 */

ArrayIndexPointsTo(?baseheap, ?value) ->
   HeapAllocation(?baseheap),
   HeapAllocation(?value).

VarPointsTo(?value, ?var) ->
   HeapAllocation(?value),
   Var(?var).

InstanceFieldPointsTo(?heap, ?signature, ?baseheap) ->
   HeapAllocation(?heap),
   Field(?signature),
   HeapAllocation(?baseheap).

StaticFieldPointsTo(?heap, ?signature) ->
   HeapAllocation(?heap),
   Field(?signature).

Assign(?type, ?from, ?to) ->
   Type(?type),
   Var(?from),
   Var(?to).

Reachable(?method) ->
   Method( ?method ).

CallGraphEdge(?invocation, ?tomethod) ->
   MethodInvocation(?invocation),
   Method(?tomethod).

AssignAuxiliaryHeapAllocation(?heap, ?var, ?inmethod) ->
   HeapAllocation(?heap), Var(?var), Method(?inmethod).

//-----------------------------------------------------------------------------
// [Value - artificially created]
//-----------------------------------------------------------------------------

Value(?value) -> .
lang:entity(`Value).
lang:physical:storageModel[`Value] = "ScalableSparse".
lang:physical:capacity[`Value] = 4194304.

Value:Heap:Cons[?heap] = ?value -> HeapAllocation(?heap), Value(?value).
Value:Num:Cons[?const] = ?value -> NumConstant(?const), Value(?value).
Value:Mock:Cons[?id]   = ?value -> string(?id), Value(?value).
Value:Special:Cons[?id]   = ?value -> string(?id), Value(?value).

lang:constructor(`Value:Heap:Cons).
lang:constructor(`Value:Num:Cons).
lang:constructor(`Value:Mock:Cons).
lang:constructor(`Value:Special:Cons).

Value:Heap[?value] = ?heap -> Value(?value), HeapAllocation(?heap).
Value:byHeap[?heap] = ?value -> HeapAllocation(?heap), Value(?value).

Value:Num[?value] = ?const -> Value(?value), NumConstant(?const).
Value:byNum[?const] = ?value -> NumConstant(?const), Value(?value).

Value:Id[?value] = ?id -> Value(?value), string(?id).
Value:byId[?id] = ?value -> string(?id), Value(?value).

Value:isHeap(?value) -> Value(?value).
Value:isNonHeap(?value) -> Value(?value).

// Special value objects are just artificial ones that we use to find where the
// result of a reflective call can flow to. We don't want to track them
// through the heap.
NotSpecialObject(?value) -> Value(?value).

Value:Type[?value] = ?type -> Value(?value), Type(?type).
Value:DeclaringType[?value] = ?type -> Value(?value), Type(?type).

// [Miscellaneous]
Value:Null[] = ?null -> Value(?null).

Context(?ctx) -> .
lang:entity(`Context).
lang:physical:storageModel[`Context]="ScalableSparse".
lang:physical:capacity[`Context] = 8388608.

HContext(?hctx) -> .
lang:entity(`HContext).
lang:physical:storageModel[`HContext]="ScalableSparse".
lang:physical:capacity[`HContext] = 8388608.