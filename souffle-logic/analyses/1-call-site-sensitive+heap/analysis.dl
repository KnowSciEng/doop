// Context-sensitive pointer analysis with context of 1 call site and a
// context-sensnitive heap abstraction of 1 call site.

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

.comp OneCallSiteSensitivePlusHeapConfiguration : AbstractConfiguration {
  // In this analysis, both the real context and the real heap context are
  // MethodInvocations.
  .type Context  = [ invocation:MethodInvocation ]
  .type HContext = [ invocation:MethodInvocation ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod),
    ?calleeCtx = [?invo],
    ?tomethod = ?tomethod.

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = [?invo].

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?invo],
    ?hctx = [?invo].

// For this analysis the context of a method call corresponds to the
// invocation site of the method.

  ThreadStartContextResponse(?callerCtx, ?hctx, ?value, ?newCtx) :-
    ThreadStartContextRequest(?callerCtx, ?hctx, ?value),
    ?newCtx = ?callerCtx.

  StartupContextResponse(?hctx, ?value, ?newCtx) :-
    StartupContextRequest(?hctx, ?value),
    StartupInvocation(?invocation),
    ?newCtx = [?invocation].
 
  FinalizerRegisterContextResponse(?callerCtx, ?inmethod, ?value, ?newCtx) :-
    FinalizerRegisterContextRequest(?callerCtx, ?inmethod, ?value),
    FakeInvocation_RegisterFinalize(?value, ?invocation),
    ?newCtx = [?invocation].

  InitContextResponse(?invocation, ?ctx) :-
    InitContextRequest(?invocation),
    ?ctx = [?invocation].

  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value].

  .decl StartupInvocation(?invocation:MethodInvocation)

  StartupInvocation("<<jvm-startup-context>>").


}
