#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

.comp PartitionedTwoObjectSensitivePlusHeapConfiguration : AbstractConfiguration {

  .decl TypeToPartitionName(?type: Type, ?partitionRepresentativeType: symbol)
  .input TypeToPartitionName(IO="file", filename="TypeToPartition.facts", delimiter="\t")
  .output TypeToPartitionName

  .decl TypeToPartitionId(?type: Type, ?id: number)
  .output TypeToPartitionId

  TypeToPartitionId(?type, ?partitionId) :-
    TypeToPartitionName(?type, ?partitionRepresentativeType),
    ?partitionId = ord(?partitionRepresentativeType).

  .decl PrimaryPartitionName(?partitionRepresentativeType: symbol)
  .input PrimaryPartitionName(IO="file", filename="PrimaryPartition.facts")
  .output PrimaryPartitionName

  .decl PrimaryPartitionId(?partitionId: number)
  .output PrimaryPartitionId
  
  PrimaryPartitionId(?partitionId) :-
    PrimaryPartitionName(?partitionRepresentativeType),
    ?partitionId = ord(?partitionRepresentativeType).

  .decl PartitionId(?partitionId: number)
  .output PartitionId
  
  PartitionId(?partitionId) :-
    TypeToPartitionId(_, ?partitionId).

  .decl PartitionName(?partitionName: symbol)
  .output PartitionName
  
  PartitionName(?partitionName) :-
    TypeToPartitionName(_, ?partitionName).

  .output TypeToPartitionName

  .type Context  = [ value1:mainAnalysis.Value, value2:mainAnalysis.Value ]
  .type HContext = [ value:mainAnalysis.Value ]

  .decl TypeInPrimaryPartition(type: Type)
  .decl InvocationInPrimaryPartition(invo: Instruction)
  .decl MethodInPrimaryPartition(method: Method)
  .decl VarInPrimaryPartition(var: Var)

  .decl TypeInNonPrimaryPartition(type: Type)
  .decl InvocationInNonPrimaryPartition(invo: Instruction)
  .decl MethodInNonPrimaryPartition(method: Method)
  .decl VarInNonPrimaryPartition(var: Var)

  .decl TypeInNoPartition(type: Type)
  .decl InvocationInNoPartition(invo: MethodInvocation)
  .decl MethodInNoPartition(method: Method)
  .decl VarInNoPartition(var: Var)
  
  TypeInPrimaryPartition(type) :-
    TypeToPartitionId(type, partitionId),
    PrimaryPartitionId(partitionId).

  TypeInNonPrimaryPartition(type) :-
    TypeToPartitionId(type, partitionId1),
    PrimaryPartitionId(partitionId2),
    partitionId1 != partitionId2.

  TypeInNoPartition(type) :-
    isType(type),
    !TypeToPartitionName(type, _).

  InvocationInPrimaryPartition(invo) :-
    Instruction_Method(invo, inmethod),
    Method_DeclaringType(inmethod, inClass),
    TypeInPrimaryPartition(inClass).

  InvocationInNonPrimaryPartition(invo) :-
    Instruction_Method(invo, inmethod),
    Method_DeclaringType(inmethod, inClass),
    TypeInNonPrimaryPartition(inClass).

  InvocationInNoPartition(invo) :-
    Instruction_Method(invo, inmethod),
    Method_DeclaringType(inmethod, inClass),
    TypeInNoPartition(inClass).

  MethodInPrimaryPartition(method) :-
    Method_DeclaringType(method, inClass),
    TypeInPrimaryPartition(inClass).

  MethodInNonPrimaryPartition(method) :-
    Method_DeclaringType(method, inClass),
    TypeInNonPrimaryPartition(inClass).

  MethodInNoPartition(method) :-
    Method_DeclaringType(method, inClass),
    TypeInNoPartition(inClass).

  VarInPrimaryPartition(var) :-
    Var_DeclaringMethod(var, method),
    MethodInPrimaryPartition(method).

  VarInNonPrimaryPartition(var) :-
   Var_DeclaringMethod(var, method),
   MethodInNonPrimaryPartition(method).
   
  VarInNoPartition(var) :-
    Var_DeclaringMethod(var, method),
    MethodInNoPartition(method).

  // Base the decision on the partition of the target method
  // Case 1: invocation and target method both in primary partition
  // or invocation in primary partition and method in no partition
  // or invocation in no partition and method in primary partition
  ContextResponse(callerCtx, hctx, invo, value, calleeCtx) :-
    ContextRequest(callerCtx, hctx, invo, value, tomethod),
    // ((MethodInPrimaryPartition(tomethod),
    //   InvocationInPrimaryPartition(invo));
    //  (MethodInPrimaryPartition(tomethod),
    //   InvocationInNoPartition(invo));
    //  (MethodInNoPartition(tomethod),
    //   InvocationInPrimaryPartition(invo));
    //  (MethodInNoPartition(tomethod),
    //   InvocationInNoPartition(invo))     
    // ),
    hctx = [hctxvalue],
    calleeCtx = [hctxvalue, value].

  // Case 2: target method in non primary partition and invocation in primary partition
  // or target method in non primary partition and invocation in no partition
  // or target method in non primary partition and invocation in non primary partition
  // ContextResponse(callerCtx, hctx, invo,value, calleeCtx) :-
  //   ContextRequest(callerCtx, hctx, invo, value, tomethod),
  //   MethodInNonPrimaryPartition(tomethod),
  //   (InvocationInPrimaryPartition(invo);
  //    InvocationInNonPrimaryPartition(invo);
  //    InvocationInNoPartition(invo)),
  //   isImmutableContext(calleeCtx).

  // Case 3: target method in primary partition and invocation in non primary partition
  // or target method in no partition and invocation in no partition
  // ContextResponse(callerCtx, hctx, invo, value, calleeCtx) :-
  //   ContextRequest(callerCtx, hctx, invo, value, tomethod),
  //   (MethodInPrimaryPartition(tomethod);
  //    MethodInNoPartition(tomethod)),
  //   InvocationInNonPrimaryPartition(invo),
  //   isImmutableContext(calleeCtx).

  // and for static methods
  StaticContextResponse(callerCtx, invo, calleeCtx) :-
    StaticContextRequest(callerCtx, invo),
    //MethodInvocation_Method(invo, tomethod),
    // ((MethodInPrimaryPartition(tomethod),
    //   InvocationInPrimaryPartition(invo));
    //  (MethodInPrimaryPartition(tomethod),
    //   InvocationInNoPartition(invo));
    //  (MethodInNoPartition(tomethod),
    //   InvocationInPrimaryPartition(invo));
    //  (MethodInNoPartition(tomethod),
    //   InvocationInNoPartition(invo))
    // ),
    calleeCtx = callerCtx.

  // StaticContextResponse(callerCtx, invo, calleeCtx) :-
  //   StaticContextRequest(callerCtx, invo),
  //   MethodInvocation_Method(invo, tomethod),
  //   (MethodInPrimaryPartition(tomethod);
  //    MethodInNonPrimaryPartition(tomethod);
  //    MethodInNoPartition(tomethod)),
  //   InvocationInNonPrimaryPartition(invo),
  //   isImmutableContext(calleeCtx).

  // StaticContextResponse(callerCtx, invo, calleeCtx) :-
  //   StaticContextRequest(callerCtx, invo),
  //   MethodInvocation_Method(invo, tomethod),
  //   MethodInNonPrimaryPartition(tomethod),
  //   (InvocationInPrimaryPartition(invo);
  //    InvocationInNoPartition(invo)),
  //   isImmutableContext(calleeCtx).

  ThreadStartContextResponse(callerCtx, hctx, value, newCtx) :-
    ThreadStartContextRequest(callerCtx, hctx, value),
    hctx = [hctxValue],
    newCtx = [hctxValue, value].

  StartupContextResponse(hctx, value, newCtx) :-
    StartupContextRequest(hctx, value),
    hctx = [hctxValue],
    newCtx = [hctxValue, value].

  FinalizerRegisterContextResponse(callerCtx, inmethod, value, newCtx) :-
    FinalizerRegisterContextRequest(callerCtx, inmethod, value),
    callerCtx = [callerCtxValue1, callerCtxValue2],
    newCtx = [callerCtxValue2, value],
    callerCtxValue1 = callerCtxValue1.

  InitContextResponse(value, ctx) :-
    InitContextRequest(value),
    ctx = [value, value].

  InitHContextResponse(value, hctx) :-
    InitHContextRequest(value),
    hctx = [value].

  RecordContextResponse(ctx, value, var, hctx) :-
    RecordContextRequest(ctx, value, var),
    ctx = [ctxv1, ctxv2],
    (VarInPrimaryPartition(var);
     VarInNoPartition(var)),
    hctx = [ctxv2],
    ctxv1 = ctxv1.

  RecordContextResponse(ctx, value, var, hctx) :-
    RecordContextRequest(ctx, value, var),
    VarInNonPrimaryPartition(var),
    ctx = [ctxv1, ctxv2],
    isImmutableHContext(hctx),
    ctxv1 = ctxv1,
    ctxv2 = ctxv2.

   HeapAllocation_ContextInsensitive(?heap) :-
     AssignHeapAllocation_Heap(?insn, ?heap),
     Instruction_Method(?insn, ?method),
     MethodInNonPrimaryPartition(?method).
}
