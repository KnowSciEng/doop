#include "../../main/partitioning.logic"

// Context-sensitive pointer analysis with context of 1 object and a
// context-sensitive heap abstraction.

// Some basics, for encoding-decoding
RealContext1FromContext[?ctx] = ?value1,
RealContext2FromContext[?ctx] = ?value2,
PartitionFromContext[?ctx] = ?partitionId <-
  ContextFromRealContext[?partitionId, ?value1, ?value2] = ?ctx.

RealHContextFromHContext[?hctx] = ?value,
PartitionFromHContext[?hctx] = ?partitionId <-
  HContextFromRealHContext[?partitionId, ?value] = ?hctx.

// Default contexts
Context(?ctx),
ContextFromRealContext[?partitionId, ?value, ?value] = ?ctx,
ImmutableContext(?ctx) <-
  Value:byId["<<immutable-context>>"] = ?value,
  PartitionId(?partitionId).

HContext(?hctx),
HContextFromRealHContext[?partitionId, ?value] = ?hctx,
ImmutableHContext(?hctx) <-
  Value:byId["<<immutable-hcontext>>"] = ?value,
  PartitionId(?partitionId).

// horrible indexing, but there will only be a handful of such contexts
ImmutableContextFromHContext[?hctx] = ?ctx <-
  ImmutableContext(?ctx),
  PartitionFromContext[?ctx] = PartitionFromHContext[?hctx].
ImmutableContextFromContext[?ctx1] = ?ctx2 <-
  ImmutableContext(?ctx2),
  PartitionFromContext[?ctx1] = PartitionFromContext[?ctx2].
ImmutableHContextFromContext[?ctx] = ?hctx <-
  ImmutableHContext(?hctx),
  PartitionFromContext[?ctx] = PartitionFromHContext[?hctx].

// Create initial objects with their heap contexts
HContext(?hctx),
HContextFromRealHContext[?partitionId, ?value] = ?hctx,
SystemThreadGroup(?hctx, ?alloc) <-
  Value:byId["<<jvm-startup>>"] = ?value,
  Value:byId["<<system-thread-group>>"] = ?alloc,
  PartitionId(?partitionId).

HContext(?hctx),
HContextFromRealHContext[?partitionId, ?value] = ?hctx,
MainThreadGroup(?hctx, ?alloc) <-
  Value:byId["<<jvm-startup>>"] = ?value,
  Value:byId["<<main-thread-group>>"] = ?alloc,
  PartitionId(?partitionId).

HContext(?hctx),
HContextFromRealHContext[?partitionId, ?value] = ?hctx,
MainThread(?hctx, ?alloc) <-
  Value:byId["<<jvm-startup>>"] = ?value,
  Value:byId["<<main-thread>>"] = ?alloc,
  PartitionId(?partitionId).


// Merge optimization hack

// For this analysis, we only need three of the parameters that may influence the
// new context object.
MyMergeBasis(?invo, ?hctx, ?value) <-
  MergeBasis(_, ?invo, ?hctx, ?value).

MatchingMethodForInvocationAndType[?type, ?invocation] = ?tomethod <-
  ResolveInvocation[?type, ?invocation] = ?tomethod.

MatchingMethodForInvocationAndType[?type, ?invocation] = ?tomethod <-
  SpecialMethodInvocation:Base[?invocation] = ?base,
  Var:Type[?base] = ?basetype,
  MethodInvocation:Signature[?invocation] = ?tomethod,
  SubtypeOf(?type, ?basetype).

PartitionForValue[?value] = ?partitionId <-
  Value:DeclaringType[?value] = ?valueClass,
  TypeToPartitionId[?valueClass] = ?partitionId.

ValueInAllPartitions(?value) <-
  Value:DeclaringType[?value] = ?valueClass,
  TypeInAllPartitions(?valueClass).

TypeInAllPartitions(?type) <-
  Type:Id(?type:?typeName),
  string:substring[?typeName, 0, _] = "java.util".

PartitionForInvocation[?invo] = ?partitionId <-
  Instruction:Method[?invo] = ?inmethod,
  Method:DeclaringType[?inmethod] = ?inClass,
  TypeToPartitionId[?inClass] = ?partitionId.

PartitionForResolvedInvocation[?type, ?invo] = ?partitionId <-
  MatchingMethodForInvocationAndType[?type, ?invo] = ?tomethod,
  Method:DeclaringType[?tomethod] = ?toclass,
  TypeToPartitionId[?toclass] = ?partitionId.
  
/*
MergeMacro(?notused, ?notused, ?hctx, ?value, ?calleeCtx),
OptimizeMerge[?invo, ?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?value).
*/

/// Base the decision on the partition of the target method
MergeMacro(?notused, ?notused, ?hctx, ?value, ?calleeCtx),
OptimizeMerge[?invo, ?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?value),
  Value:Type[?value] = ?valuetype,
  (PartitionForResolvedInvocation[?valuetype, ?invo] = PartitionForInvocation[?invo];
   TypeInAllPartitions(?valuetype)).

OptimizeMerge[?invo, ?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?value),
  Value:Type[?value] = ?valuetype,
  !(PartitionForResolvedInvocation[?valuetype, ?invo] = _),
  !TypeInAllPartitions(?valuetype),
  ImmutableContextFromHContext[?hctx] = ?calleeCtx.

OptimizeMerge[?invo, ?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?value),
  Value:Type[?value] = ?valuetype,
  PartitionForResolvedInvocation[?valuetype, ?invo] = ?partId,
  (?partId != PartitionForInvocation[?invo];
   !(PartitionForInvocation[?invo] = _)),
  !TypeInAllPartitions(?valuetype),
  ImmutableContextFromHContext[?hctx] = ?calleeCtx.


/*
/// Base the decision on the partition that allocated the receiver object
MergeMacro(?notused, ?notused, ?hctx, ?value, ?calleeCtx),
OptimizeMerge[?invo, ?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?value),
  (PartitionForInvocation[?invo] = PartitionForValue[?value];
   ValueInAllPartitions(?value)).

OptimizeMerge[?invo, ?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?value),
  !(PartitionForValue[?value] = _),
  !ValueInAllPartitions(?value),
  ImmutableContextFromHContext[?hctx] = ?calleeCtx.

OptimizeMerge[?invo, ?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?value),
  PartitionForValue[?value] = ?partId,
  (?partId != PartitionForInvocation[?invo];
   !(PartitionForInvocation[?invo] = _)),
  !ValueInAllPartitions(?value),
  ImmutableContextFromHContext[?hctx] = ?calleeCtx.
*/

// What are the necessary parameters for this analysis?
MyRecordBasis(?ctx, ?value) <-
  RecordBasis(_, ?ctx, ?value).

RecordMacro(?ctx, ?value, ?hctx),
OptimizeRecord[?ctx, ?value] = ?hctx <-
  MyRecordBasis(?ctx, ?value),
  (PartitionFromContext[?ctx] = PartitionForValue[?value];
   ValueInAllPartitions(?value)).

OptimizeRecord[?ctx, ?value] = ?hctx <-
  MyRecordBasis(?ctx, ?value),
  !(PartitionForValue[?value] = _),
  !ValueInAllPartitions(?value),
  ImmutableHContextFromContext[?ctx] = ?hctx.

OptimizeRecord[?ctx, ?value] = ?hctx <-
  MyRecordBasis(?ctx, ?value),
  PartitionForValue[?value] = ?partId,
  ?partId != PartitionFromContext[?ctx],
  !ValueInAllPartitions(?value),
  ImmutableHContextFromContext[?ctx] = ?hctx.

// Initially reachable methods
Context(?ctx),
ContextFromRealContext[?partitionId, ?value, ?value] = ?ctx,
ReachableContext(?ctx, ?method) <-
  MainMethodDeclaration(?method),
  Value:byId["<<initial-context>>"] = ?value,
  PartitionId(?partitionId).

Context(?ctx),
ContextFromRealContext[?partitionId, ?value, ?value] = ?ctx,
ReachableContext(?ctx, ?method) <-
  ImplicitReachable(?method),
  Value:byId["<<jvm-startup>>"] = ?value,
  PartitionId(?partitionId).

Context(?ctx),
ContextFromRealContext[?partitionId, ?value, ?value] = ?ctx,
ReachableContext(?ctx, ?clinit) <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  Value:byId["<<class-initialization>>"] = ?value,
  PartitionId(?partitionId).


// Post-processing
_ValidCtxVar(?ctx, ?var)
  <-
  ReachableContext(?ctx, ?meth),
  Method:DeclaringType[?meth] = ?intype,
  Var:DeclaringMethod(?var,?meth),
  (!(TypeToPartitionId[?intype] = _);
   TypeToPartitionId[?intype] = PartitionFromContext[?ctx]).

CollapsedVarPointsTo(?hctx, ?heap, ?ctx, ?var) <-
   VarPointsTo(?hctx, ?heap, ?ctx, ?var),
   _ValidCtxVar(?ctx, ?var).
  