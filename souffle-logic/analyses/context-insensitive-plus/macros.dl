/**
 * Some library modules are generically defined, and need the macro
 * definitions for the context-sensitive pointer analysis they are
 * used in. For a context-insensitive pointer analysis we just
 * generate constant contexts.
 */

#define GLOBAL_CONTEXT  "<<global-context>>"
#define GLOBAL_HCONTEXT "<<global-hcontext>>"

#define RecordMacro(ctx, value, hctx) \
  hctx = GLOBAL_HCONTEXT


#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  calleeCtx = GLOBAL_CONTEXT

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  calleeCtx = GLOBAL_CONTEXT

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
  MergeBasis(callerCtx, hctx, invocation, value)

#define AdvancedMergeStaticBasisMacro(callerCtx, invocation) \
  MergeStaticBasis(callerCtx, invocation)

#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  CachedMerge(invocation, value, calleeCtx)

#define CachedMergeStaticMacro(callerCtx, invocation, calleeCtx) \
  CachedMergeStatic(invocation, calleeCtx)

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  newCtx = GLOBAL_CONTEXT

#define MergeStartupMacro(hctx, value, calleeCtx) \
  calleeCtx = GLOBAL_CONTEXT

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  newCtx = GLOBAL_CONTEXT


#define InitContextMacro(valueId) \
  isContext(ctx) :- ctx = GLOBAL_CONTEXT

#define InitHContextMacro(valueId) \
  isHContext(hctx) :- hctx = GLOBAL_HCONTEXT
