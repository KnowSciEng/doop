/*************************************************************
 * Special objects
 *
 * Some objects are so common that they heavily impact performance if
 * every allocation is distinguished or a context-sensitive heap
 * abstraction is used. In many cases, this precision is not actually
 * useful for a points-to analysis, so handling them in a less precise
 * way is beneficial.
 *************************************************************/

// REVIEW: The current major decision is to only access application-level
// classes and methods reflectively. This makes sense, but it may be
// worthwhile to make it flag-controllable later. For now we have way too
// many configuration flags for reflection already.

/**
 * Objects that should not be allocated as normal.
 */
HeapAllocation:Special(?heap) -> HeapAllocation(?heap).

/**
 * Objects that should use a context-insensitive heap abstraction.
 */
HeapAllocation:ContextInsensitive(?heap) ->
  HeapAllocation(?heap).

HeapAllocation:Special(?heap) <-
  HeapAllocation:ContextInsensitive(?heap).

/**
 * Objects that should be merged to some heap abstraction 
 * (may overlap with merely context-insensitive objects)
 */
HeapAllocation:Merge[?heap] = ?mergeHeap ->
  HeapAllocation(?heap),
  HeapAllocation(?mergeHeap).

// The ones that absolutely have to be kept distinct
HeapAllocation:Keep(?heap) -> HeapAllocation(?heap).

/**
 * Join with AssignHeapAllocation for performance.
 */
AssignNormalHeapAllocation(?heap, ?var, ?inmethod) <-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  ! HeapAllocation:Special(?heap).

HeapAllocation:Special(?heap) <-
  HeapAllocation:Merge[?heap] = _.

AssignContextInsensitiveHeapAllocation(?mergeHeap, ?var, ?inmethod) <-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  HeapAllocation:Merge[?heap] = ?mergeHeap.

AssignContextInsensitiveHeapAllocation(?heap, ?var, ?inmethod) <-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  HeapAllocation:ContextInsensitive(?heap),
  !(HeapAllocation:Merge[?heap] = _). // should be mostly unnecessary, but has bitten us many times  


/*************************************************************
 * String constants
 *************************************************************/

ReflectionStringConstant(?heap) -> HeapAllocation(?heap).
ReflectionSubstringObject(?heap) -> HeapAllocation(?heap).

#ifndef DISTINGUISH_ALL_STRING_CONSTANTS
#ifndef DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS
#define DISTINGUISH_NO_STRING_CONSTANTS
HeapAllocation:Merge[?heap] = ?constant <-
  StringConstant(?heap),
  HeapAllocation:byId["<<string-constant>>"] = ?constant,
  !HeapAllocation:Keep(?heap).
#endif
#endif // DISTINGUISH_NO_STRING_CONSTANTS mode

#ifdef DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS
ReflectionStringConstant(?heap) <-
  ClassNameMatchingStringConstant(?heap);
  MethodNameMatchingStringConstant(?heap);
  FieldNameMatchingStringConstant(?heap).

ReflectionSubstringObject(?heap) <-
  ClassNameMatchingStringConstantInexact:Type(_,?heap);
  MethodNameMatchingStringConstantInexact:Signature(_,?heap);
  FieldNameMatchingStringConstantInexact:Signature(_,?heap).

HeapAllocation:Merge[?heap] = ?constant <-
  StringConstant(?heap),
  !ReflectionStringConstant(?heap), 
  HeapAllocation:byId["<<string-constant>>"] = ?constant,
  !HeapAllocation:Keep(?heap).
#endif // DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS

HeapAllocation:ContextInsensitive(?heap) <-
  StringConstant(?heap),
  !(HeapAllocation:Merge[?heap] = _).

NonTrivialStringConstant(?heap) <-
  StringConstant(?heap),
  HeapAllocation:Id[?heap] = ?string,
  string:length[?string] >= 7.

/**
 * String constants that (may) refer to class, method, and field names
 */
ClassNameMatchingStringConstant(?heap) -> HeapAllocation(?heap).
ClassNameMatchingStringConstant:Type(?type, ?heap) ->
  HeapAllocation(?heap), Type(?type).
ClassNameMatchingStringConstantExact:Type(?type, ?heap) ->
  HeapAllocation(?heap), Type(?type).
ClassNameMatchingStringConstantInexact:Type(?type, ?heap) ->
  HeapAllocation(?heap), Type(?type).

// We distinguish between an exact match and a
// substring match.

ClassNameMatchingStringConstant(?heap),
ClassNameMatchingStringConstant:Type(?type, ?heap),
ClassNameMatchingStringConstantExact:Type(?type, ?heap)
  <-
  StringConstant(?heap),
  HeapAllocation:Id[?heap] = ?string,
  ReferenceType(?type),
#ifndef REFLECTION_HIGH_SOUNDNESS_MODE  
  ApplicationClass(?type),
     // library classes are known and in known packages. Makes no sense
     // to access them via .getClass
#endif
  NonTrivialStringConstant(?heap),
  Type:Id(?type:?string).

MethodNameMatchingStringConstant(?heap) -> HeapAllocation(?heap).
MethodNameMatchingStringConstant:Signature(?sig, ?heap) ->
  HeapAllocation(?heap), Method(?sig).
MethodNameMatchingStringConstantExact:Signature(?sig, ?heap) ->
  HeapAllocation(?heap), Method(?sig).
MethodNameMatchingStringConstantInexact:Signature(?sig, ?heap) ->
  HeapAllocation(?heap), Method(?sig).

MethodNameMatchingStringConstant(?heap),
MethodNameMatchingStringConstant:Signature(?sig, ?heap),
MethodNameMatchingStringConstantExact:Signature(?sig, ?heap)
  <-
  StringConstant(?heap),
  HeapAllocation:Id[?heap] = ?string,
  //  Method:DeclaringType[?sig] = ?type, 
  //  ApplicationClass(?type),
     // there is some possibility of accessing methods and fields
     // reflectively, even in system classes. Maybe one needs to 
     // circumvent access control, or maybe one wants to treat all
     // fields uniformly and some are inherited from a system superclass.
  NonTrivialStringConstant(?heap),
  Method:SimpleName[?sig] = ?string,
  ?string != "<init>",
  ?string != "<clinit>". // common, yet not methods callable via reflection

FieldNameMatchingStringConstant(?heap) -> HeapAllocation(?heap).
FieldNameMatchingStringConstant:Signature(?sig, ?heap) ->
  HeapAllocation(?heap), Field(?sig).
FieldNameMatchingStringConstantExact:Signature(?sig, ?heap) ->
  HeapAllocation(?heap), Field(?sig).
FieldNameMatchingStringConstantInexact:Signature(?sig, ?heap) ->
  HeapAllocation(?heap), Field(?sig).

FieldNameMatchingStringConstant(?heap),
FieldNameMatchingStringConstant:Signature(?sig, ?heap),
FieldNameMatchingStringConstantExact:Signature(?sig, ?heap)
  <-
  StringConstant(?heap),
  HeapAllocation:Id[?heap] = ?string,
  // Field:DeclaringType[?sig] = ?declaringClass,
  // ApplicationClass(?declaringClass);
  NonTrivialStringConstant(?heap),
  Field:SimpleName[?sig] = ?string.

#ifdef REFLECTION_SUBSTRING_ANALYSIS
// Creating class/field/method names via string concatenation makes more
// sense for application classes/fields/methods.
ClassNameMatchingStringConstant(?heap),
ClassNameMatchingStringConstant:Type(?type, ?heap),
ClassNameMatchingStringConstantInexact:Type(?type, ?heap)
  <-
  HeapAllocation:Id[?heap] = ?string,
  ClassNameSuffix(?string, ?type),
#ifndef REFLECTION_HIGH_SOUNDNESS_MODE  
  ApplicationClass(?type),
#endif
  NonTrivialStringConstant(?heap).

MethodNameMatchingStringConstant(?heap),
MethodNameMatchingStringConstant:Signature(?sig, ?heap),
MethodNameMatchingStringConstantInexact:Signature(?sig, ?heap)
  <-
  HeapAllocation(?heap),
  HeapAllocation:Id[?heap] = ?string,
#ifndef REFLECTION_HIGH_SOUNDNESS_MODE  
  Method:DeclaringType[?sig] = ?type,
  ApplicationClass(?type),
#endif
  (MethodNameSuffix(?string, ?sig);
   MethodNamePrefix(?string, ?sig)),
  ?string != "<init>",
  ?string != "<clinit>". // common, yet not methods callable via reflection
   

FieldNameMatchingStringConstant(?heap),
FieldNameMatchingStringConstant:Signature(?sig, ?heap),
FieldNameMatchingStringConstantInexact:Signature(?sig, ?heap)
  <-
  HeapAllocation(?heap),
  HeapAllocation:Id[?heap] = ?string,
#ifndef REFLECTION_HIGH_SOUNDNESS_MODE  
  Field:DeclaringType[?sig] = ?declaringClass,
  ApplicationClass(?declaringClass),
#endif
  (FieldNameSuffix(?string, ?sig);
   FieldNamePrefix(?string, ?sig)).

ClassIterationTrick(?length) <-
  ?length = 7; ?length = 8; ?length = 9; ?length = 10; ?length = 11;
  ?length = 12; ?length = 13; ?length = 14; ?length = 15; ?length = 16;
  ?length = 17; ?length = 18; ?length = 19; ?length = 20; ?length = 21;
  ?length = 22; ?length = 23; ?length = 24; ?length = 25; ?length = 26.
MemberPrefixIterationTrick(?length) <-
#ifdef REFLECTION_HIGH_SOUNDNESS_MODE  
  ?length = 3; ?length = 4; ?length = 5; ?length = 6;
#endif
  ?length = 7; ?length = 8; ?length = 9; ?length = 10; ?length = 11;
  ?length = 12; ?length = 13; ?length = 14; ?length = 15; ?length = 16;
  ?length = 17; ?length = 18; ?length = 19; ?length = 20; ?length = 21;
  ?length = 22; ?length = 23; ?length = 24; ?length = 25; ?length = 26;
  ?length = 27; ?length = 28; ?length = 29; ?length = 30; ?length = 31.
MemberSuffixIterationTrick(?length) <-
#ifdef REFLECTION_HIGH_SOUNDNESS_MODE  
  ?length = 5; ?length = 6;
#endif
  ?length = 7; ?length = 8; ?length = 9; ?length = 10; ?length = 11;
  ?length = 12; ?length = 13; ?length = 14; ?length = 15; ?length = 16;
  ?length = 17; ?length = 18; ?length = 19; ?length = 20; ?length = 21;
  ?length = 22; ?length = 23; ?length = 24; ?length = 25; ?length = 26;
  ?length = 27; ?length = 28; ?length = 29; ?length = 30; ?length = 31.

// Exploit camel-case convention
lang:derivationType[`StringChangesCaseAfterPosition] = "Derived".
StringChangesCaseAfterPosition(?pos, ?string) -> string(?string), int[32](?pos).
StringChangesCaseAfterPosition(?pos, ?str) <-
  string:substring[?str, ?pos, 1] = ?char,
  string:substring[?str, ?pos + 1, 1] = ?nextChar,
  ((string:upper[?char] = ?char, string:upper[?nextChar] != ?nextChar);
   (string:upper[?char] != ?char, string:upper[?nextChar] = ?nextChar);
   (?nextChar = "_", ?char = ?char);
   (?nextChar = ".", ?char = ?char)).

lang:derivationType[`StringChangesCaseBeforePosition] = "Derived".
StringChangesCaseBeforePosition(?pos, ?string) -> string(?string), int[32](?pos).
StringChangesCaseBeforePosition(?pos, ?str) <-
  string:substring[?str, ?pos, 1] = ?char,
  string:substring[?str, ?pos - 1, 1] = ?prevChar,
  ((string:upper[?char] = ?char, string:upper[?prevChar] != ?prevChar);
   (string:upper[?char] != ?char, string:upper[?prevChar] = ?prevChar);
   (?prevChar = "_", ?char = ?char);
   (?prevChar = ".", ?char = ?char)).

// Precompute proper suffixes. Crucial for efficiency.
ClassNameSuffix(?suffix, ?type) <-
  ReferenceType(?type),
  Type:Id(?type:?className),
  string:length[?className] = ?classNameLength,
  ClassIterationTrick(?length),
  string:substring[?className, ?classNameLength - ?length, ?length] = ?suffix,
  StringChangesCaseBeforePosition(?classNameLength - ?length, ?className).

MethodNameSuffix(?suffix, ?sig) <-
  Method:SimpleName[?sig] = ?methodName,
  string:length[?methodName] = ?methodNameLength,
  MemberSuffixIterationTrick(?length),
  ?methodNameLength > ?length,
  string:substring[?methodName, ?methodNameLength - ?length, ?length] = ?suffix,
  StringChangesCaseBeforePosition(?methodNameLength - ?length, ?methodName).

MethodNamePrefix(?prefix, ?sig) <-
  Method:SimpleName[?sig] = ?methodName,
  string:length[?methodName] = ?methodNameLength,
  MemberPrefixIterationTrick(?length),
  ?methodNameLength > ?length,
  string:substring[?methodName, 0, ?length] = ?prefix,
  StringChangesCaseAfterPosition(?length-1, ?methodName).

FieldNameSuffix(?suffix, ?sig) <-
  Field:SimpleName[?sig] = ?fieldName,
  string:length[?fieldName] = ?fieldNameLength,
  MemberSuffixIterationTrick(?length),
  ?fieldNameLength > ?length,
  string:substring[?fieldName, ?fieldNameLength - ?length, ?length] = ?suffix,
  StringChangesCaseBeforePosition(?fieldNameLength - ?length, ?fieldName).

FieldNamePrefix(?prefix, ?sig) <-
  Field:SimpleName[?sig] = ?fieldName,
  string:length[?fieldName] = ?fieldNameLength,
  MemberPrefixIterationTrick(?length),
  ?fieldNameLength > ?length,
  string:substring[?fieldName, 0, ?length] = ?prefix,
  StringChangesCaseAfterPosition(?length-1, ?fieldName).

//// Too costly!
//ClassNameSuffix(?type, ?suffix) <-
//  ReferenceType(?type),
//  Type:Id(?type:?className),
//  string:length[?className] = ?classNameLength,
//  ?pos = ?classNameLength / 2 + 1,
//  ?suffixLength = ?classNameLength - ?pos, 
//  string:substring[?className, ?pos, ?suffixLength] = ?suffix.  
//
//ClassNameMatchingStringConstant(?heap),
//ClassNameMatchingStringConstant:Type(?type, ?heap)
//  <-
//  NonTrivialStringConstant(?heap),
//  HeapAllocation:Id[?heap] = ?string,
//  ClassNameSuffix(?type, ?suffix),
//  string:substring[?suffix, _, string:length[?string]] = ?string.
//
//MethodNameMatchingStringConstant(?heap),
//MethodNameMatchingStringConstant:Signature(?sig, ?heap)
//  <-
//  NonTrivialStringConstant(?heap),
//  HeapAllocation:Id[?heap] = ?string,
//  Method:SimpleName[?sig] = ?methodName,
//  (string:substring[?methodName, _, _] = ?string ; ?methodName = ?string).


/*************************************************************
 * Analysis of reflection strings flowing through String Factories
 *************************************************************/

StringFactoryVar(?var) <-
  Var:Type[?var] = ?type,
  StringFactoryType(?type).

StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var) <-
  VarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var),
  StringFactoryVar(?var).

VarAssignedToStringFactoryVar(?param, ?base)
 <-
  VirtualMethodInvocation:SimpleName[?invocation] = "append",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVar(?base),
  ActualParam[0, ?invocation] = ?param.

VarAssignedFromStringFactoryVar(?ret, ?base)
 <-
  VirtualMethodInvocation:SimpleName[?invocation] = "toString",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVar(?base),
  AssignReturnValue[?invocation] = ?ret.

// There can be many variations of the code below: less precision
// (merge reflection strings), less coverage (require that string
// in/out operations on Builders/Buffers are in the same method).  The
// current approach (precise) seems to work ok.
VarFlowsIntoStringFactory(?factoryHctx, ?factoryValue, ?ctx, ?var)
 <-
  VarOfReflectionInterest(?ctx, ?var),
  VarAssignedToStringFactoryVar(?var, ?factoryVar),
  StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?factoryVar).

VarFlowsFromStringFactory(?ctx, ?var, ?factoryHctx, ?factoryValue)
 <-
  VarAssignedFromStringFactoryVar(?var, ?factoryVar),
  StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?factoryVar).

VarOfReflectionInterest(?ctx, ?var),
ReflectionStringConstantVarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  Value:Heap[?value] = ?heap,
#ifdef REFLECTION_HIGH_SOUNDNESS_MODE  
  ReflectionStringConstant(?heap).
#else
  ReflectionSubstringObject(?heap).
#endif

OptVarMethod(?method, ?var) <-
  Var:DeclaringMethod(?var, ?method).

ReflectionStringConstantFlowsIntoStringFactory(?hctx, ?value, ?factoryHctx, ?factoryValue) ->
  HContext(?hctx), Value(?value), HContext(?factoryHctx), Value(?factoryValue).
ReflectionStringConstantFlowsIntoStringFactory(?hctx, ?value, ?factoryHctx, ?factoryValue)
 <-
  VarFlowsIntoStringFactory(?factoryHctx, ?factoryValue, ?ctx, ?var),
  ReflectionStringConstantVarPointsTo(?hctx, ?value, ?ctx, ?var).

VarPointsTo(?hctx, ?value, ?ctx, ?var)
 <-
  ReflectionStringConstantFlowsIntoStringFactory(?hctx, ?value, ?factoryHctx, ?factoryValue),
  VarFlowsFromStringFactory(?ctx, ?var, ?factoryHctx, ?factoryValue).

#endif // REFLECTION_SUBSTRING_ANALYSIS


/*************************************************************
 * Class constants
 *************************************************************/

HeapAllocation:ContextInsensitive(?heap) <-
  ClassHeap(?heap).


/*************************************************************
 * Special handling for all sorts of arbitrary objects. If the
 * object has a representative, it is merged into it.
 *************************************************************/

HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapRepresentative[?heap] = ?mergeHeap,
  !HeapAllocation:Keep(?heap).


/*************************************************************
 * Merging allocation sites per method or per class.
 *************************************************************
 * Sample heuristic: merge allocation sites for method that allocates
 * many objects of same type. Doesn't apply to exceptions.
 *************************************************************/

MethodAllocationMergeThreshold[] = 50.

ExceptionType(?type) <-
  Type:Id(?throw:"java.lang.Throwable"),
  SubtypeOf(?type, ?throw).

OptAssignHeapAllocation(?inmethod, ?heap) <-
  AssignHeapAllocation(?heap, _, ?inmethod).

// There are objects, like strings, null, and class objects, that
// don't have a unique allocation site.
ObjectMultipleAllocated(?heap) <-
  OptAssignHeapAllocation(?inmethod1, ?heap),
  OptAssignHeapAllocation(?inmethod2, ?heap),
  ?inmethod1 != ?inmethod2.
   
MethodAndTypeToHeap(?heap, ?heaptype, ?meth) <-
  AssignHeapAllocation(?heap, _, ?meth),
  HeapAllocation:Type[?heap] = ?heaptype,
  !ExceptionType(?heaptype),
  !StringConstant(?heap),
  !ObjectMultipleAllocated(?heap).

AllocationsPerMethodAndType[?type, ?meth] = ?n <-
  agg<<?n=count()>> MethodAndTypeToHeap(_, ?type, ?meth).

AllocationShouldBeMergedPerMethod(?heaptype, ?meth) <-
  AllocationsPerMethodAndType[?heaptype, ?meth] > MethodAllocationMergeThreshold[],
  !StringFactoryType(?heaptype).

MethodAndTypeToMergedHeap(?heap, ?heaptype, ?meth) <-
  AllocationShouldBeMergedPerMethod(?heaptype, ?meth),
  MethodAndTypeToHeap(?heap, ?heaptype, ?meth).

MethodAndTypeToRepresentative[?type, ?meth] = ?representativeHeap <-
  agg<<?representativeHeap = min(?heap)>>(MethodAndTypeToMergedHeap(?heap, ?type, ?meth)).
  
HeapRepresentative[?heap] = ?representativeHeap <-
  MethodAndTypeToRepresentative[?type, ?meth] = ?representativeHeap,
  MethodAndTypeToMergedHeap(?heap, ?type, ?meth).

// Now, per-class merging. This is more rare and should be
// requested explicitly.
ClassAndTypeToHeap(?heap, ?heaptype, ?class) <-
  AssignHeapAllocation(?heap, _, ?meth),
  Method:DeclaringType[?meth] = ?class,
  HeapAllocation:Type[?heap] = ?heaptype,
  !ExceptionType(?heaptype),
  !StringConstant(?heap),
  !ObjectMultipleAllocated(?heap).

AllocationsPerClassAndType[?type, ?class] = ?n <-
  agg<<?n=count()>> ClassAndTypeToHeap(_, ?type, ?class).

// This is explicitly set for types that want it.
AllocationShouldBeMergedPerClass(?heaptype, ?class) -> Type(?heaptype), Type(?class).

ClassAndTypeToMergedHeap(?heap, ?heaptype, ?class) <-
  AllocationShouldBeMergedPerClass(?heaptype, ?class),
  ClassAndTypeToHeap(?heap, ?heaptype, ?class).

ClassAndTypeToRepresentative[?type, ?class] = ?representativeHeap <-
  agg<<?representativeHeap = min(?heap)>>(ClassAndTypeToMergedHeap(?heap, ?type, ?class)).

HeapRepresentative[?heap] = ?representativeHeap <-
  ClassAndTypeToRepresentative[?type, ?class] = ?representativeHeap,
  ClassAndTypeToMergedHeap(?heap, ?type, ?class).


/*************************************************************
 * Library class that should be treated specially
 *************************************************************/

#ifndef CONTEXT_SENSITIVE_LIBRARY_ANALYSIS
#include "special-library.logic"
HeapAllocation:ContextInsensitive(?heap) <-
  SpecialLibraryObject(?heap),
  !(HeapAllocation:Merge[?heap] = _).

#ifdef MERGE_LIBRARY_OBJECTS_PER_METHOD
AllocationShouldBeMergedPerMethod(?heaptype, ?meth) <-
  AllocationsPerMethodAndType[?heaptype, ?meth] > 1,
  Method:DeclaringType[?meth] = ?class,
  !StringFactoryType(?heaptype),
  SpecialLibraryClass(?class).
#endif
#endif


/*************************************************************
 * String buffers and builders
 *************************************************************/

StringFactoryType(?type) <-
  Type:Id(?type:"java.lang.StringBuffer") ;
  Type:Id(?type:"java.lang.StringBuilder").

StringFactoryHeap(?heap) <-
  HeapAllocation:Type[?heap] = ?heaptype,
  StringFactoryType(?heaptype).

#ifndef DISTINGUISH_ALL_STRING_BUFFERS
#ifdef DISTINGUISH_STRING_BUFFERS_PER_PACKAGE

#include "package-heuristic.logic"
PackageAndTypeToHeap(?heap, ?heaptype, ?packageName) <-
  ClassAndTypeToHeap(?heap, ?heaptype, ?class),
  Class:PackageHack[?class] = ?packageName.

PackageAndTypeToRepresentative[?type, ?packageName] = ?representativeHeap <-
  agg<<?representativeHeap = min(?heap)>>(PackageAndTypeToHeap(?heap, ?type, ?packageName)).

// current policy: all string builders merged per-package
HeapRepresentative[?heap] = ?representativeHeap <-
  PackageAndTypeToHeap(?heap, ?type, ?packageName),
  PackageAndTypeToRepresentative[?type, ?packageName] = ?representativeHeap,
  StringFactoryHeap(?heap).

//// Used to be all are merged per-class:
// // all string buffers (and builders) in the same class are merged
// AllocationShouldBeMergedPerClass(?heaptype, ?class) <-
//   AllocationsPerClassAndType[?heaptype, ?class] > 1,
//   StringFactoryType(?heaptype).

//// Used to be per-method:
// AllocationShouldBeMergedPerMethod(?heaptype, ?meth) <-
//   AllocationsPerMethodAndType[?heaptype, ?meth] > 1,
//   StringFactoryType(?heaptype).
#else // not DISTINGUISH_STRING_BUFFERS_PER_PACKAGE, i.e., merge them all
HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapAllocation:Type[?heap] = ?type,
  Type:Id(?type:"java.lang.StringBuffer"),
  HeapAllocation:byId["<<string-buffer>>"] = ?mergeHeap,
  !HeapAllocation:Keep(?heap).

HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapAllocation:Type[?heap] = ?type,
  Type:Id(?type:"java.lang.StringBuilder"),
  HeapAllocation:byId["<<string-builder>>"] = ?mergeHeap,
  !HeapAllocation:Keep(?heap).
#endif
#endif

/*************************************************************
 * Throwable
 *************************************************************/

/*
 // (Yannis) This is the original, precise and straightforward treatment
 // of throwables. They were allocated context insensitively. This still
 // produced huge ThrowPointsTo sets and caused slowdowns.
 */
#ifdef SEPARATE_EXCEPTION_OBJECTS
HeapAllocation:ContextInsensitive(?heap) <-
  ExceptionType(HeapAllocation:Type[?heap]).
#else

// The optimized treatment represents every exception (i.e., throwable)
// object by a unique representative of the same type. All exception
// objects of the same type are therefore merged. This means that points-to
// results for throwables are not accurate! Only the type will be right.

//TypeToHeap2(?heap, ?heaptype) <-
//  HeapAllocation:Type[?heap] = ?heaptype,
//  Type:Id(?throw:"java.lang.Throwable"),
//  SubtypeOf(?heaptype, ?throw),
//  ExceptionHandler:Type[_] = ?handlertype,
//  SubtypeOf(?heaptype, ?handlertype).

TypeToHeap(?heap, ?heaptype) <-
  HeapAllocation:Type[?heap] = ?heaptype,
  ExceptionType(?heaptype).

// Quadratic but so local that it shouldn't matter, ever.
ExceptionHeapRepresentative[?heap] = ?representativeHeap <-
  agg<<?representativeHeap = min(?otherHeap)>>(TypeToHeap(?otherHeap, HeapAllocation:Type[?heap])).

HeapRepresentative[?heap] = ?representativeHeap <-
  ExceptionHeapRepresentative[?heap] = ?representativeHeap.

#endif // SEPARATE_EXCEPTION_OBJECTS
/*
// An intermediate option is to only merge exception objects of the
// same type that are thrown in the same method.
SameTypeAndMethod(?heap1, ?heap2) <-
  HeapAllocation:Type[?heap1] = ?heaptype,
  Type:Id(?throw:"java.lang.Throwable"),
  SubtypeOf(?heaptype, ?throw),
  HeapAllocation:Type[?heap2] = ?heaptype,
  AssignHeapAllocation(?heap1,_,?inmethod),
  AssignHeapAllocation(?heap2,_,?inmethod).
  
// Similarly quadratic but efficient.
HeapRepresentative[?heap] = ?representativeHeap <-
  agg<<?representativeHeap = min(?otherHeap)>>(SameTypeAndMethod(?otherHeap,?heap)).

HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapRepresentative[?heap] = ?mergeHeap.
*/

/*************************************************************
 * Primitive arrays
 *
 * char[] or int[] don't have object elements, so it's useless to
 * allocate them context-sensitively.
 *
 *************************************************************/

HeapAllocation:ContextInsensitive(?heap) <-
  HeapAllocation:Type[?heap] = ?type,
  ArrayType(?type),
  ComponentType[?type] = ?componentType,
  PrimitiveType(?componentType).

/*************************************************************
 * Class without reference fields
 *
 * Treat context-insensitively always? It doesn't matter much,
 * but doesn't hurt much either.
 *************************************************************/
/*
HeapAllocation:ContextInsensitive(?heap) <-
  HeapAllocation:Type[?heap] = ?heaptype,
  Type:HasNoReferenceField(?heaptype),
  !(HeapAllocation:Merge[?heap] = _).
  // The rules have become complex enough that they overlap.

Type:HasNoReferenceField(?type) -> Type(?type).
Type:DeclaresReferenceField(?type) -> Type(?type).

Type:HasNoReferenceField(?type) <-
  Type:Id(?type:"java.lang.Object").

Type:HasNoReferenceField(?class) <-
  ClassType(?class),
  DirectSuperclass[?class] = ?super,
  Type:HasNoReferenceField(?super),
  ! Type:DeclaresReferenceField(?class).

Type:DeclaresReferenceField(?class) <-
  ClassType(?class),
  Field:DeclaringType[?signature] = ?class,
  Field:Type[?signature] = ?type,
  ReferenceType(?type),
  !FieldIsStatic(?signature).

FieldIsStatic(?sig) <-
  Modifier:Id(?static:"static"),
  Field:Modifier(?static, ?sig).

//// Quite risky: even final fields hold interesting state.
//FieldIsStaticOrFinal?sig) <-
//  Modifier:Id(?final:"final"),
//  Field:Modifier(?final, ?sig).
*/
