#include "../../addons/statistics/macros.logic"

//Stats:SoundMay:AppMayPointTo(?heap, ?var) <-
//   MayPointTo(_, ?heap, _, ?var),
//   Var:DeclaringMethod(?var, ?method),
//   ApplicationClass(MethodSignature:DeclaringType[?method]).
//
//Stats:SoundMay:AppAllCtxMayPointTo(?heap, ?var) <-
//   MayPointTo(_, ?heap, InitialMayContext[], ?var),
//   Var:DeclaringMethod(?var, ?method),
//   ApplicationClass(MethodSignature:DeclaringType[?method]).
//
//Stats:SoundMay:AppVarWithMayPointTo(?var) <-
//   Stats:SoundMay:AppMayPointTo(_, ?var).
//
//Stats:SoundMay:AppVarWithAllCtxMayPointTo(?var) <-
//   Stats:SoundMay:AppAllCtxMayPointTo(_, ?var).
//
//Stats:InstanceFieldMayPointTo(?hctx, ?heap, ?ap, ?ctx, ?insn) <-
//   AccessPathMayPointTo(?hctx, ?heap, ?ap, ?ctx, ?insn),
//   $analysis:_AccessPath:IsVariable($analysis:_AccessPath:Base[?ap]).
//
//Stats:StaticFieldMayPointTo(?hctx, ?heap, ?ap, ?ctx, ?insn) <-
//   AccessPathMayPointTo(?hctx, ?heap, ?ap, ?ctx, ?insn),
//   $analysis:_AccessPath:ByStaticFieldInv[?ap] = _.
//
//Stats:CollectionMayPointTo(?hctx, ?heap, ?ap, ?ctx, ?insn) <-
//   AccessPathMayPointTo(?hctx, ?heap, ?ap, ?ctx, ?insn),
//   $analysis:_AccessPath:ByCollectionVarInv[?ap] = _.
//
//Stats:SoundMay:AppMustPointTo(?heap, ?var) <-
//   IntraproceduralMustPointTo:Object[_, ?var] = ?heap,
//   Var:DeclaringMethod(?var, ?method),
//   ApplicationClass(MethodSignature:DeclaringType[?method]).
//
//// Meaningless? It's by definition intra-procedural, hence context-insensitive.
//Stats:SoundMay:AppAllCtxMustPointTo[?var] = ?heap <-
//   IntraproceduralMustPointTo:Object[InitialMayContext[], ?var] = ?heap,
//   Var:DeclaringMethod(?var, ?method),
//   ApplicationClass(MethodSignature:DeclaringType[?method]).
//
//Stats:SoundMay:AppVarWithMustPointTo(?var) <-
//   Stats:SoundMay:AppMustPointTo(_, ?var).
//
//Stats:SoundMay:AppVarWithAllCtxMustPointTo(?var) <-
//   Stats:SoundMay:AppAllCtxMustPointTo[?var] = _.
//
//
//// These are really VarPointsTo stats, but we don't want to rely on
//// what was computed earlier.
//Stats:SoundMay:AppVarPointsTo(?heap, ?var) <-
//   VarPointsTo(_, ?heap, _, ?var),
//   Var:DeclaringMethod(?var, ?method),
//   ApplicationClass(MethodSignature:DeclaringType[?method]).
//
//Stats:SoundMay:AppVarWithVarPointsTo(?var) <-
//   Stats:SoundMay:AppVarPointsTo(_, ?var).
//
//
//Stats:SoundMay:AppVarsWithBothMayAndVPT(?var) <-
//   Stats:SoundMay:AppVarWithMayPointTo(?var),
//   Stats:SoundMay:AppVarWithVarPointsTo(?var).
//
//Stats:SoundMay:AppVarsWithBothAllCtxMayAndVPT(?var) <-
//   Stats:SoundMay:AppVarWithAllCtxMayPointTo(?var),
//   Stats:SoundMay:AppVarWithVarPointsTo(?var).
//
//Stats:SoundMay:AppVarsWithBothMustAndVPT(?var) <-
//   Stats:SoundMay:AppVarWithMustPointTo(?var),
//   Stats:SoundMay:AppVarWithVarPointsTo(?var).
//
//Stats:SoundMay:AppVarsWithBothAllCtxMustAndVPT(?var) <-
//   Stats:SoundMay:AppVarWithAllCtxMustPointTo(?var),
//   Stats:SoundMay:AppVarWithVarPointsTo(?var).
//
//
//// Restrict to non-null vars
//Stats:SoundMay:AppMayPointToNonNull(?heap, ?var) <-
//   Stats:SoundMay:AppMayPointTo(?heap, ?var),
//   HeapAllocation:Null[] != ?heap.
//
//Stats:SoundMay:AppAllCtxMayPointToNonNull(?heap, ?var) <-
//   Stats:SoundMay:AppAllCtxMayPointTo(?heap, ?var),
//   HeapAllocation:Null[] != ?heap.
//
//Stats:SoundMay:AppVarWithMayPointToNonNull(?var) <-
//   Stats:SoundMay:AppMayPointToNonNull(_, ?var).
//
//Stats:SoundMay:AppVarWithAllCtxMayPointToNonNull(?var) <-
//   Stats:SoundMay:AppAllCtxMayPointToNonNull(_, ?var).
//
//Stats:SoundMay:AppVarPointsToNonNull(?heap, ?var) <-
//   Stats:SoundMay:AppVarPointsTo(?heap, ?var),
//   HeapAllocation:Null[] != ?heap.
//
//Stats:SoundMay:AppVarWithVarPointsToNonNull(?var) <-
//   Stats:SoundMay:AppVarPointsToNonNull(_, ?var).
//
//Stats:SoundMay:AppVarsWithBothNonNullMayAndVPT(?var) <-
//   Stats:SoundMay:AppVarWithMayPointToNonNull(?var),
//   Stats:SoundMay:AppVarWithVarPointsToNonNull(?var).
//
//Stats:SoundMay:AppVarsWithBothNonNullAllCtxMayAndVPT(?var) <-
//   Stats:SoundMay:AppVarWithAllCtxMayPointToNonNull(?var),
//   Stats:SoundMay:AppVarWithVarPointsToNonNull(?var).
//
//// sizes of points-to sets for common vars
//Stats:SoundMay:AppMayPointToNonNullOnCommonVars(?heap, ?var) <-
//   Stats:SoundMay:AppMayPointToNonNull(?heap, ?var),
//   Stats:SoundMay:AppVarWithVarPointsToNonNull(?var).
//
//Stats:SoundMay:AppAllCtxMayPointToNonNullOnCommonVars(?heap, ?var) <-
//   Stats:SoundMay:AppAllCtxMayPointToNonNull(?heap, ?var),
//   Stats:SoundMay:AppVarWithVarPointsToNonNull(?var).
//
//Stats:SoundMay:AppVarPointsToNonNullOnCommonVars(?heap, ?var) <-
//   Stats:SoundMay:AppVarPointsToNonNull(?heap, ?var),
//   Stats:SoundMay:AppVarWithMayPointToNonNull(?var).
//
//Stats:SoundMay:AppAllCtxVarPointsToNonNullOnCommonVars(?heap, ?var) <-
//   Stats:SoundMay:AppVarPointsToNonNull(?heap, ?var),
//   Stats:SoundMay:AppVarWithAllCtxMayPointToNonNull(?var).
//
//
//// Polymorphic casts. Note that identical casts are not distinguished.
//
//Stats:SoundMay:AppReachableCast(?inmethod, ?type, ?to, ?from) <-
//   Reachable(?inmethod),
//   AssignCast(?type, ?from, ?to, ?inmethod),
//   ApplicationClass(MethodSignature:DeclaringType[?inmethod]).
//
//Stats:SoundMay:PotentiallyFailingAppCastPerVPT(?from, ?to) <-
//   Stats:SoundMay:AppReachableCast(_, ?type, ?to, ?from),
//   Stats:SoundMay:AppVarPointsTo(?heap, ?from),
//   HeapAllocation:Type[?heap] = ?heaptype,
//   !SupertypeOf(?type, ?heaptype).
//
//Stats:SoundMay:PotentiallyFailingAppCastPerMPT(?from, ?to) <-
//   Stats:SoundMay:AppReachableCast(_, ?type, ?to, ?from),
//   Stats:SoundMay:AppMayPointTo(?heap, ?from),
//   HeapAllocation:Type[?heap] = ?heaptype,
//   !SupertypeOf(?type, ?heaptype).
//
//Stats:SoundMay:PotentiallyFailingAppCastPerMPT(?from, ?to) <-
//   Stats:SoundMay:AppReachableCast(_, _, ?to, ?from),
//   !Stats:SoundMay:AppVarWithMayPointTo(?from).
////   !Stats:SoundMay:AppVarWithAllCtxMayPointTo(?from).
//
//
//// Virtual method resolution
//Stats:SoundMay:AppReachableVirtualCall(?invocation) <-
//   Reachable(?method),
//   VirtualMethodInvocation:Insn(?invocation),
//   Instruction:Method[?invocation] = ?method,
//   ApplicationClass(MethodSignature:DeclaringType[?method]).
//
//Stats:SoundMay:AppVirtualCallPerVPT(?to, ?invocation) <-
//   Stats:SoundMay:AppReachableVirtualCall(?invocation),
//   Stats:Simple:InsensCallGraphEdge(?invocation, ?to).
//
//Stats:SoundMay:AppVirtualCallPerMPT(?to, ?invocation) <-
//   Stats:SoundMay:AppReachableVirtualCall(?invocation),
//   MayCallGraphEdge:ToMethod(?to, _, ?invocation).
//
//Stats:SoundMay:AppVirtualCallPerAllCtxMPT(?to, ?invocation) <-
//   Stats:SoundMay:AppReachableVirtualCall(?invocation),
//   MayCallGraphEdge:ToMethod(?to, InitialMayContext[], ?invocation).
//
//Stats:SoundMay:AppVirtualTargetsPerVPT[?invo] = ?c <-
//   agg<<?c = count()>>(Stats:SoundMay:AppVirtualCallPerVPT(_, ?invo)).
//
//Stats:SoundMay:AppVirtualTargetsPerMPT[?invo] = ?c <-
//   agg<<?c = count()>>(Stats:SoundMay:AppVirtualCallPerMPT(_, ?invo)).
//
//Stats:SoundMay:AppVirtualTargetsPerAllCtxMPT[?invo] = ?c <-
//   agg<<?c = count()>>(Stats:SoundMay:AppVirtualCallPerAllCtxMPT(_, ?invo)).
//
//Stats:SoundMay:MonomorphicCallSitePerVPT(?invo) <-
//   Stats:SoundMay:AppVirtualTargetsPerVPT[?invo] = 1.
//
//Stats:SoundMay:MonomorphicCallSitePerMPT(?invo) <-
//   Stats:SoundMay:AppVirtualTargetsPerMPT[?invo] = 1.
//// If it's equal to zero, that may indicate unsoundness in VPT. I
//// don't think we should count it. Needs thought.
//
//Stats:SoundMay:MonomorphicCallSitePerMust(?invo) <-
//   Stats:SoundMay:AppReachableVirtualCall(?invo),
//   IntraproceduralCertainMethodBase(_, _, _, ?invo).
//
//Stats:SoundMay:MonomorphicCallSitePerAllCtxMPT(?invo) <-
//   Stats:SoundMay:AppVirtualTargetsPerAllCtxMPT[?invo] = 1.
//
//Stats:SoundMay:MonomorphicCallSitePerAllCtxMust(?invo) <-
//   Stats:SoundMay:AppReachableVirtualCall(?invo),
//   IntraproceduralCertainMethodBase(_, _, InitialMayContext[], ?invo).
//


//_t1[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppMayPointTo(_, _).
//Stats:SoundMay:Metrics("1@ Total app may-point-to", _t1[]).
//
//_t2[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppAllCtxMayPointTo(_, _).
//Stats:SoundMay:Metrics("2@ All-context app may-point-to", _t2[]).
//
//_t3[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarPointsTo(_, _).
//Stats:SoundMay:Metrics("3@ Total app var-points-to (insens)", _t3[]).
//
//_t4a[] = ?c <- agg<<?c = count()>> Stats:InstanceFieldMayPointTo(_,_,_,_,_).
//_t4b[] = ?c <- agg<<?c = count()>> Stats:StaticFieldMayPointTo(_,_,_,_,_).
//_t4c[] = ?c <- agg<<?c = count()>> Stats:CollectionMayPointTo(_,_,_,_,_).
//Stats:SoundMay:Metrics("4a@ InstanceFieldMayPointTo", _t4a[]).
//Stats:SoundMay:Metrics("4b@ StaticFieldMayPointTo", _t4b[]).
//Stats:SoundMay:Metrics("4c@ CollectionMayPointTo", _t4c[]).
//
//_t5[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarWithMayPointTo(_).
//Stats:SoundMay:Metrics("5@ #Vars with may-point-to under some context", _t5[]).
//
//_t6[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarWithAllCtxMayPointTo(_).
//Stats:SoundMay:Metrics("6@ #Vars with all-context may-point-to", _t6[]).
//
//_t7[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarWithVarPointsTo(_).
//Stats:SoundMay:Metrics("7@ #Vars with var-points-to", _t7[]).
//
//_t8[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarsWithBothMayAndVPT(_).
//Stats:SoundMay:Metrics("8@ #Vars with both may-point-to (some context) and var-points-to", _t8[]).
//
//_t8b[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarsWithBothMustAndVPT(_).
//Stats:SoundMay:Metrics("8b@ #Vars with both intra-procedural must-point-to (some context) and var-points-to", _t8b[]).
//
//_t9[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarsWithBothAllCtxMayAndVPT(_).
//Stats:SoundMay:Metrics("9@ #Vars with both may-point-to (all-context) and var-points-to", _t9[]).
//
//_t9b[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarsWithBothAllCtxMustAndVPT(_).
//Stats:SoundMay:Metrics("9b@ #Vars with both intra-procedural must-point-to (all-context) and var-points-to", _t9b[]).
//
//_t10[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppMayPointToNonNull(_, _).
//Stats:SoundMay:Metrics("A@ Total app may-point-to ignoring null objects", _t10[]).
//
//_t11[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppAllCtxMayPointToNonNull(_, _).
//Stats:SoundMay:Metrics("B@ All-context app may-point-to ignoring null objects", _t11[]).
//
//_t12[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarPointsToNonNull(_, _).
//Stats:SoundMay:Metrics("C@ Total app var-points-to (insens) ignoring null objects", _t12[]).
//
//_t13[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarWithMayPointToNonNull(_).
//Stats:SoundMay:Metrics("D@ #Vars with non-null may-point-to under some context", _t13[]).
//
//_t14[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarWithAllCtxMayPointToNonNull(_).
//Stats:SoundMay:Metrics("E@ #Vars with non-null all-context may-point-to", _t14[]).
//
//_t15[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarWithVarPointsToNonNull(_).
//Stats:SoundMay:Metrics("F@ #Vars with non-null var-points-to", _t15[]).
//
//_t16[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarsWithBothNonNullMayAndVPT(_).
//Stats:SoundMay:Metrics("G@ #Vars with both non-null may-point-to (some context) and non-null var-points-to", _t16[]).
//
//_t17[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarsWithBothNonNullAllCtxMayAndVPT(_).
//Stats:SoundMay:Metrics("H@ #Vars with both non-null may-point-to (all-context) and non-null var-points-to", _t17[]).
//
//_t18[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppMayPointToNonNullOnCommonVars(_, _).
//Stats:SoundMay:Metrics("I@ Total non-null MPT over common VPT/MPT non-null vars", _t18[]).
//Stats:SoundMay:Metrics("J@  Average non-null MPT over common VPT/MPT non-null vars", float64:divide[_t18[], _t16[]]).
//
//_t19[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppVarPointsToNonNullOnCommonVars(_, _).
//Stats:SoundMay:Metrics("K@ Total non-null VPT over common VPT/MPT non-null vars", _t19[]).
//Stats:SoundMay:Metrics("L@  Average non-null VPT over common VPT/MPT non-null vars", float64:divide[_t19[], _t16[]]).
//
//_t20[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppAllCtxMayPointToNonNullOnCommonVars(_, _).
//Stats:SoundMay:Metrics("M@ Total all-context non-null MPT over common VPT/MPT non-null vars", _t20[]).
//Stats:SoundMay:Metrics("N@  Average all-context non-null MPT over common VPT/MPT non-null vars", float64:divide[_t20[], _t17[]]).
//
//_t21[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppAllCtxVarPointsToNonNullOnCommonVars(_, _).
//Stats:SoundMay:Metrics("O@ Total non-null VPT over common VPT/all-context-MPT non-null vars", _t21[]).
//Stats:SoundMay:Metrics("P@  Average non-null VPT over common VPT/all-context-MPT non-null vars", float64:divide[_t21[], _t17[]]).
//
//
//_t22[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppReachableCast(_, _, _, _).
//Stats:SoundMay:Metrics("Q@ (VPT) app reachable casts", _t22[]).
//
//_t23[] = ?c <- agg<<?c = count()>> Stats:SoundMay:PotentiallyFailingAppCastPerVPT(_, _).
//lang:defaultValue[`_t23] = 0. // should be there for all quantities, but these are more likely to be zero
//Stats:SoundMay:Metrics("R@ app reachable casts statically resolved by VPT (empty VPT sets included)", _t22[] - _t23[]).
//
//_t24[] = ?c <- agg<<?c = count()>> Stats:SoundMay:PotentiallyFailingAppCastPerMPT(_, _).
//lang:defaultValue[`_t24] = 0.
//Stats:SoundMay:Metrics("S@ app reachable casts statically resolved by MPT", _t22[] - _t24[]).
//
//
//_t25[] = ?c <- agg<<?c = count()>> Stats:SoundMay:AppReachableVirtualCall(_).
//Stats:SoundMay:Metrics("T@ (VPT) app reachable virtual calls", _t25[]).
//
//_t26[] = ?c <- agg<<?c = count()>> Stats:SoundMay:MonomorphicCallSitePerVPT(_).
//Stats:SoundMay:Metrics("U@ app reachable virtual calls statically resolved to 1 target by VPT", _t26[]).
//
//_t27[] = ?c <- agg<<?c = count()>> Stats:SoundMay:MonomorphicCallSitePerMPT(_).
//Stats:SoundMay:Metrics("V@ app reachable virtual calls statically resolved to 1 target by MPT", _t27[]).
//
//_t27b[] = ?c <- agg<<?c = count()>> Stats:SoundMay:MonomorphicCallSitePerMust(_).
//Stats:SoundMay:Metrics("Vb@ app reachable virtual calls statically resolved to 1 target by intra-procedural Must-Point-To", _t27b[]).
//
//_t28[] = ?c <- agg<<?c = count()>> Stats:SoundMay:MonomorphicCallSitePerAllCtxMPT(_).
//Stats:SoundMay:Metrics("W@ app reachable virtual calls statically resolved to 1 target by all-context MPT", _t28[]).
//
//_t28b[] = ?c <- agg<<?c = count()>> Stats:SoundMay:MonomorphicCallSitePerAllCtxMust(_).
//Stats:SoundMay:Metrics("Wb@ app reachable virtual calls statically resolved to 1 target by all-context intra-procedural Must-Point-To", _t28b[]).
