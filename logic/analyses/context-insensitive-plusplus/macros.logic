#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  EmptyHContext[] = hctx
//// For a context-sensitive heap, whenever context exists:
//  HContextFromContext[ctx] = hctx


#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  EmptyContext[] = calleeCtx

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  EmptyContext[] = calleeCtx

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
  MergeBasis(callerCtx, hctx, invocation, value)

#define AdvancedMergeStaticBasisMacro(callerCtx, invocation) \
  MergeStaticBasis(callerCtx, invocation)

#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  CachedMerge[invocation, value] = calleeCtx

#define CachedMergeStaticMacro(callerCtx, invocation, calleeCtx) \
  CachedMergeStatic[invocation] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  EmptyContext[] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  EmptyContext[] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  EmptyContext[] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), EmptyContext[] = ctx

#define InitHContextMacro(valueId) \
  HContext(hctx), EmptyHContext[] = hctx
