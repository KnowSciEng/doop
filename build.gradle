buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'commons-io:commons-io:2.4'
    }
}

plugins {
    id 'antlr'
    id 'application'
    id 'groovy'
    id 'maven-publish'
    //see https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version '2.4.0'
}

apply from  : "benchmarks.gradle"

applicationDefaultJvmArgs = ["-Xmx12000m", "-Xss2000m"]
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

group = "org.clyze"

//For the doop app
mainClassName = "org.clyze.doop.Main"

//def heapDLVersion = "master-SNAPSHOT"
def heapDLVersion = "1.0.0"
if (project.hasProperty('heapDLVersion'))
    heapDLVersion = project.property('heapDLVersion')

task wrapper(type: Wrapper) {
    gradleVersion = "3.1"
}

repositories {
    mavenLocal()

    mavenCentral()

    maven {
        url "http://centauri.di.uoa.gr:8081/artifactory/plast-public"
    }

    if (heapDLVersion == "master-SNAPSHOT")
        maven { url 'https://jitpack.io' }
}

task printClasspath {
    doLast {
        configurations.compile.each { println it }
    }
}

configurations.all {
    //This is required for SNAPSHOT dependencies
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    //This is required for dependencies using the "+" notation
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {

    compile "org.clyze:clue-common:2.1.+",
            "org.clyze:deepdoop:0.9.+",
            "org.codehaus.groovy:groovy-all:2.4.7",             // Groovy
            "commons-logging:commons-logging:1.1",              // Logging wrapper
            "log4j:log4j:1.2.14",                               // Logging implementation
            "commons-cli:commons-cli:1.2",                      // Command line processor
            "commons-io:commons-io:2.4",                        // File Utils
            "org.apache.ivy:ivy:2.3.0",                         // Apache Ivy (for downloading jars from maven repos)
            "org.ow2.asm:asm-debug-all:5.1",                    // Java Bytecode library
            "org.smali:dexlib2:2.2b4",                          // Dexlib2: library for reading/modifying/writing Android dex files
            "com.google.code.gson:gson:2.4",                    // GSON library
            // Soot is a compile time dependency
            "ext:AXMLPrinter:2.0",
            "com.github.plast-lab:HeapDL:$heapDLVersion"


    // Soot is a compile time dependency
    compile 'ext:AXMLPrinter:2.0',
            "ext:sootclasses:3.2.+",
            "ext:soot-infoflow:1.2.+",
            "ext:soot-infoflow-android:1.2.+"


    // JPhantom is a runtime dependency
    runtime "org.clyze:jphantom:1.2",
            "ext:averroes-no-properties:1.0-SNAPSHOT",
            "ext:herosclasses:1.1",
            "ext:axml:2.0",
            "org.smali:util:2.2b4"                              // Dexlib2 utilities

    // JimpleParser
    antlr   "org.antlr:antlr4:4.5.1-1"
    compile "org.antlr:antlr4-runtime:4.5.1-1"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}

applicationDistribution.from(file("$projectDir/logic")) {
    into 'logic'
}

applicationDistribution.from(file("$projectDir/souffle-logic")) {
    into 'souffle-logic'
}

applicationDistribution.from(projectDir) {
    include 'docs', 'COLLABORATORS', 'LICENSE', 'README.md'
}

run {
    //debug true
    //We set the DOOP_HOME environment variable (see org.clyze.doop.Main)
    environment.DOOP_HOME = projectDir
    if (project.hasProperty('args')) {
        args project.property('args').split()
    }
}

task generateJimple(type: JavaExec) {
    description 'Generate Jimple/Shimple file'
    group = 'Other'
    main = 'org.clyze.doop.soot.Main'
    classpath = sourceSets.main.runtimeClasspath
    if (!project.hasProperty('args') ||
        project.property('args').isEmpty() ||
        project.property('args') == '-h' ||
        project.property('args') == '--help') {
        args = ["--generate-jimple-help"]
    } else {
        def gradleInvocationDir = System.getProperty('user.dir')
        def givenArgs = project.property('args').tokenize()
        def index = givenArgs.indexOf("-d")
        if (index != -1) {
            def outDir = givenArgs[index+1]
            if (!outDir.startsWith("/"))
                givenArgs[index+1] = gradleInvocationDir + "/" + outDir
        }
        else {
            givenArgs = ["-d", gradleInvocationDir] + givenArgs
        }
        def lastIndex = givenArgs.size()-1
        def inputFile = givenArgs[lastIndex]
        if (!inputFile.startsWith("/"))
            givenArgs[lastIndex] = gradleInvocationDir + "/" + inputFile

        args = ["--generate-jimple", "--allow-phantom"] + givenArgs
    }
}

task jimple2json(type: JavaExec) {
    description 'Generate JSON files from Jimple'
    group = 'Other'
    main = 'org.clyze.jimple.Main'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("args")) {
        args project.property("args").split()
    }
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task veryClean << {
    def out   = System.getenv('DOOP_OUT')   ?: "$projectDir/out"
    def cache = System.getenv('DOOP_CACHE') ?: "$projectDir/cache"
    file(out      ).list().each { f -> delete "$out/$f" }
    file(cache    ).list().each { f -> delete "$cache/$f" }
    file('results').list().each { f -> delete "results/$f" }
    org.apache.commons.io.FileUtils.deleteQuietly(new File('last-analysis'))
}
veryClean.dependsOn clean


if (project.hasProperty('artifactory_user')) {

    //Generate a jar with the logic files
    task logicJar(type:Jar) {
        from "$projectDir/logic"
    }

    task souffleLogicJar(type:Jar) {
        from "$projectDir/souffle-logic"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact logicJar {
                    classifier "logic"
                }

                artifact souffleLogicJar {
                    classifier "souffle-logic"
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username artifactory_user
                    password artifactory_password
                }

                url version.endsWith("-SNAPSHOT") ?
                        "$artifactory_contextUrl/libs-snapshot-local" :
                        "$artifactory_contextUrl/libs-release-local"

            }
        }
    }

    release {
        failOnSnapshotDependencies = false
        failOnUnversionedFiles = false
        failOnCommitNeeded = false

        git {
           commitVersionFileOnly = true
        }
        /* publish before releasing
           buildTasks =['build', 'publish']
         */
    }

    afterReleaseBuild.dependsOn publish
}
