isModule("<tensorflow>").

//------------------------------------------------------
//                    TENSOR DATA TYPES
//------------------------------------------------------

.type TensorDataType

.decl isTensorDataType(?type: TensorDataType)
Name_Module("<tensorflow.float16>", "<tensorflow>").
isTensorDataType("<tensorflow.float16>").
Name_Module("<tensorflow.float32>", "<tensorflow>").
isTensorDataType("<tensorflow.float32>").
Name_Module("<tensorflow.float64>", "<tensorflow>").
isTensorDataType("<tensorflow.float64>").
Name_Module("<tensorflow.bfloat16>", "<tensorflow>").
isTensorDataType("<tensorflow.bfloat16>").
Name_Module("<tensorflow.complex64>", "<tensorflow>").
isTensorDataType("<tensorflow.complex64>").
Name_Module("<tensorflow.complex128>", "<tensorflow>").
isTensorDataType("<tensorflow.complex128>").
Name_Module("<tensorflow.int8>", "<tensorflow>").
isTensorDataType("<tensorflow.int8>").
Name_Module("<tensorflow.uint8>", "<tensorflow>").
isTensorDataType("<tensorflow.uint8>").
Name_Module("<tensorflow.uint16>", "<tensorflow>").
isTensorDataType("<tensorflow.uint16>").
Name_Module("<tensorflow.uint32>", "<tensorflow>").
isTensorDataType("<tensorflow.uint32>").
Name_Module("<tensorflow.uint64>", "<tensorflow>").
isTensorDataType("<tensorflow.uint64>").
Name_Module("<tensorflow.int16>", "<tensorflow>").
isTensorDataType("<tensorflow.int16>").
Name_Module("<tensorflow.int32>", "<tensorflow>").
isTensorDataType("<tensorflow.int32>").
Name_Module("<tensorflow.int64>", "<tensorflow>").
isTensorDataType("<tensorflow.int64>").
Name_Module("<tensorflow.bool>", "<tensorflow>").
isTensorDataType("<tensorflow.bool>").
Name_Module("<tensorflow.string>", "<tensorflow>").
isTensorDataType("<tensorflow.string>").
Name_Module("<tensorflow.qint8>", "<tensorflow>").
isTensorDataType("<tensorflow.qint8>").
Name_Module("<tensorflow.quint8>", "<tensorflow>").
isTensorDataType("<tensorflow.quint8>").
Name_Module("<tensorflow.qint16>", "<tensorflow>").
isTensorDataType("<tensorflow.qint16>").
Name_Module("<tensorflow.quint16>", "<tensorflow>").
isTensorDataType("<tensorflow.quint16>").
Name_Module("<tensorflow.qint32>", "<tensorflow>").
isTensorDataType("<tensorflow.qint32>").
Name_Module("<tensorflow.resource>", "<tensorflow>").
isTensorDataType("<tensorflow.resource>").
Name_Module("<tensorflow.variant>", "<tensorflow>").
isTensorDataType("<tensorflow.variant>").

.decl TensorShapeListSize(?val:Value, ?size:number)
.decl TensorShapeListContent(?val:Value, ?index:number, ?indexValue:Value)
.output TensorShapeListSize
.output TensorShapeListContent

isClassType("<tensorflow.Tensor>").
isType("<tensorflow.Tensor>").

ModuleSubmodule("<tensorflow>", "<tensorflow.layers>").
isModule("<tensorflow.layers>").

ModuleSubmodule("<tensorflow>", "<tensorflow.nn>").
isModule("<tensorflow.nn>").

Function_Module("<tensorflow.reshape>", "<tensorflow>").
isFunction("<tensorflow.reshape>").

Function_Module("<tensorflow.constant>", "<tensorflow>").
isFunction("<tensorflow.constant>").

Function_Module("<tensorflow.placeholder>", "<tensorflow>").
isFunction("<tensorflow.placeholder>").

.decl FunctionInv_ResolvesTo(?insn:FunctionInvocation_Insn, ?fun:Function)
.output FunctionInv_ResolvesTo

FunctionInv_ResolvesTo(?insn, ?fun):-
  FunctionInvocation_Base(?insn, ?callBase),
  VarPointsTo(?callBase, ?fun),
  isFunction(?fun).

FunctionInv_ResolvesTo(?insn, ?fun):-
  FunctionInvocation_Base(?insn, ?callBase),
  VarPointsTo(?callBase, ?heap),
  HeapAllocation_Type(?heap, ?fun),
  isFunction(?fun).

//------------------------------------------------------
//                    PLACEHOLDER INVOC
//------------------------------------------------------

#define TensorValueMacro(op,fun,val1, val2) cat("<tensor ", cat(fun, cat("/", cat(op, cat(val1, cat("+", cat(val2,">")))))))

.decl isValidTensorPlaceHolderInvocation(?insn:FunctionInvocation_Insn, ?typeArgVal:Value, ?dimListVal:Value)
.output isValidTensorPlaceHolderInvocation

isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal):-
  FunctionInv_ResolvesTo(?insn, "<tensorflow.placeholder>"),
  ActualPositionalParam(0, ?insn, ?typeVar),
  VarPointsTo(?typeVar, ?typeVal),
  isTensorDataType(?typeVal),
  (
    ActualPositionalParam(1, ?insn, ?dimListVar);
    ActualKeywordParam(_, ?insn, "shape", ?dimListVar)
  ),
  VarPointsToList(?dimListVar, ?dimListVal),
  isListOfConsts(?dimListVal).

TensorShapeListSize(?tensorVal, ?size),
TensorShapeListContent(?tensorVal, ?index, ?indexValue):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  AssignInstruction_To(?insn, ?tensorAssignVar),
  VarPointsTo(?tensorAssignVar, ?tensorVal),
  VarPointsToList(?dimListVar, ?dimListVal),
  ConstListDimensions(?dimListVal, ?size),
  ConstListContents(?dimListVal, ?index, ?indexValue).


ConstListDimensions(?tensorVal, ?size),
ConstListContents(?tensorVal, ?index, ?indexValue):-
  TensorShapeListSize(?tensorVal, ?size),
  TensorShapeListContent(?tensorVal, ?index, ?indexValue).

VarPointsTo(?var, ?value),
Value_Type(?value, "<tensorflow.Tensor>"):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  AssignInstruction_To(?insn, ?var),
  Instruction_Function(?insn, ?function),
  ?value = TensorValueMacro("placeholder",?function, ?typeVal, ?dimListVal).

//------------------------------------------------------
//              RESHAPE OP
//------------------------------------------------------

.decl isValidTensorReshapeInvocationClass1(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationClass1

.decl isValidTensorReshapeInvocationLevel1(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationLevel1

isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal):-
  FunctionInv_ResolvesTo(?insn, "<tensorflow.reshape>"),
  ActualPositionalParam(0, ?insn, ?tensorArgVar),
  VarPointsTo(?tensorArgVar, ?tensorArgVal),
  Value_Type(?tensorArgVal, "<tensorflow.Tensor>"),
  (
    ActualPositionalParam(1, ?insn, ?dimListArgVar);
    ActualKeywordParam(_, ?insn, "shape", ?dimListArgVar)
  ),
  VarPointsToList(?dimListArgVar, ?dimListArgVal),
  isListOfConsts(?dimListArgVal).

isValidTensorReshapeInvocationClass1(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListContents(?tensorArgVal, ?pos, "<None>"),
  ConstListContents(?dimListArgVal, ?pos, "<num-constant(int):-1>"),
  ConstListMultAll(?tensorArgVal,?tensorRes),
  ConstListMultAll(?dimListArgVal,?dimListRes),
  ?tensorRes = ?dimListRes.


VarPointsTo(?var, ?value),
Value_Type(?value, "<tensorflow.Tensor>"):-
  isValidTensorReshapeInvocationClass1(?insn, ?tensorArgVal, ?dimListArgVal),
  AssignInstruction_To(?insn, ?var),
  Instruction_Function(?insn, ?function),
  ?value = TensorValueMacro("reshape",?function, ?tensorArgVal, ?dimListArgVal).