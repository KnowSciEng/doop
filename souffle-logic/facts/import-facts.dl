// NormalHeap

.decl _NormalHeap(?id:symbol, ?type:symbol) input output

isType(?type),
isHeapAllocation(?id),
isNormalHeap(?id),
HeapAllocation_Type(?id, ?type) :-
    _NormalHeap(?id, ?type).


// TODO: Why is this here?
isClassType("java.lang.String").


// StringConstant

.decl _StringConstant(?id:symbol) input output

isHeapAllocation(?id),
isStringConstant(?id),
HeapAllocation_Type(?id, "java.lang.String") :-
    _StringConstant(?id).


// StringRaw

.decl _StringRaw(?id:symbol, ?rawId:symbol) input output
.decl String_toRaw(?id:symbol, ?rawId:symbol)

isStringRaw(?id),
String_toRaw(?id, ?rawId) :-
    _StringRaw(?id, ?rawId).


// ClassHeap

.decl _ClassHeap(?id:symbol, ?instanceType:symbol) input output

isType(?instanceType),
isHeapAllocation(?id),
isClassHeap(?id),
HeapAllocation_Type(?id, "java.lang.Class") :-
    _ClassHeap(?id, ?instanceType).


// EmptyArray

.decl _EmptyArray(?id:symbol) input

HeapAllocation_EmptyArray(?id) :-
    _EmptyArray(?id).


// AssignHeapAllocation

.decl _AssignHeapAllocation(?instruction:symbol, ?index:number, ?heap:symbol, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignHeapAllocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
    _AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?method).


// AndroidEntryPoint

.decl _AndroidEntryPoint(?method:symbol) input

AndroidEntryPoint(?method) :-
    _AndroidEntryPoint(?method).


// AssignLocal

.decl _AssignLocal(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignLocal_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
    _AssignLocal(?instruction, ?index, ?from, ?to, ?method).


// AssignBinop

.decl _AssignBinop(?instruction:symbol, ?index:number, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignBinop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    _AssignBinop(?instruction, ?index, ?to, ?method).


// AssignUnop

.decl _AssignUnop(?instruction:symbol, ?index:number, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignUnop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    _AssignUnop(?instruction, ?index, ?to, ?method).


// AssignOperFrom

.decl _AssignOperFrom(?instruction:symbol, ?from:symbol) input

// TODO: Recheck this rule
isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignOper_Insn(?instruction),
AssignOper_From(?instruction, ?from) :-
    _AssignOperFrom(?instruction, ?from).


// AssignOperType

.decl _AssignOperType(?instruction:symbol, ?type:symbol) input

// TODO: Recheck this rule
isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignOper_Insn(?instruction),
AssignOper_Type(?instruction, ?type) :-
    _AssignOperType(?instruction, ?type).


// IfVar

.decl _IfVar(?instruction:symbol, ?var:symbol) input

isInstruction(?instruction),
isIf_Insn(?instruction),
If_Var(?instruction, ?var) :-
    _IfVar(?instruction, ?var).


// AssignCast

.decl _AssignCast(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignCast_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
    _AssignCast(?instruction, ?index, ?from, ?to, ?type, ?method).


// AssignCastNumConstant

.decl _AssignCastNumConstant(?instruction:symbol, ?index:number, ?const:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignCastNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCastNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
    _AssignCastNumConstant(?instruction, ?index, ?const, ?to, ?type, ?method).


// AssignCastNull

.decl _AssignCastNull(?instruction:symbol, ?index:number, ?to:symbol, ?type:symbol, ?method:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
    _AssignCastNull(?instruction, ?index, ?to, ?type, ?method).


// AssignNumConstant

.decl _AssignNumConstant(?instruction:symbol, ?index:number, ?const:symbol, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
    _AssignNumConstant(?instruction, ?index, ?const, ?to, ?method).


// AssignNull

.decl _AssignNull(?instruction:symbol, ?index:number, ?to:symbol, ?method:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    _AssignNull(?instruction, ?index, ?to, ?method).


// AssignInstanceOf

.decl _AssignInstanceOf(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignInstanceOf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstanceOf_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
    _AssignInstanceOf(?instruction, ?index, ?from, ?to, ?type, ?method).


// Field

.decl _Field(?signature:symbol, ?declaringClass:symbol, ?simplename:symbol, ?type:symbol) input

isField(?signature),
Field_DeclaringType(?signature, ?declaringType),
Field_SimpleName(?signature, ?simplename),
Field_Type(?signature, ?type) :-
    _Field(?signature, ?declaringType, ?simplename, ?type).






















































































































































































































































































































































































































































































































// UnsupportedInstruction
.decl _UnsupportedInstruction(?ref:symbol, ?index:number, ?method:symbol) input

isUnsupportedInstruction(?ref),
isInstruction(?ref),
Instruction_Index(?ref, ?index),
Instruction_Method(?ref, ?method) :-
    _UnsupportedInstruction(?ref, ?index, ?method).


// Activity
.decl _Activity(?id:symbol) input

Activity(?id) :-
    _Activity(?id).


// Service
.decl _Service(?id:symbol) input

Service(?id) :-
    _Service(?id).


// ContentProvider
.decl _ContentProvider(?id:symbol) input

ContentProvider(?id) :-
    _ContentProvider(?id).


// BroadcastReceiver
.decl _BroadcastReceiver(?id:symbol) input

BroadcastReceiver(?id) :-
    _BroadcastReceiver(?id).


// CallbackMethod
.decl _CallbackMethod(?id:symbol) input

CallbackMethod(?id) :-
    _CallbackMethod(?id).


// LayoutControl
.decl _LayoutControl(?id:number, ?typename:symbol, ?parent:symbol) input

LayoutControl(?id, ?typename, ?parent) :-
    _LayoutControl(?id, ?typename, ?parent).


// FieldInitialValue
.decl _FieldInitialValue(?fld:symbol, ?valueString:symbol) input

FieldInitialValue(?fld, ?valueString) :-
    _FieldInitialValue(?fld, ?valueString).


// Access Modifiers

isModifier(?x), Modifier_abstract(?x) :- ?x = "abstract".
isModifier(?x), Modifier_public(?x)   :- ?x = "public".
isModifier(?x), Modifier_private(?x)  :- ?x = "private".
isModifier(?x), Modifier_final(?x)    :- ?x = "final".
isModifier(?x), Modifier_static(?x)   :- ?x = "static".


// Basic Types as nullary functional-predicates

isType(?t), isPrimitiveType(?t), Type_boolean(?t) :- ?t = "boolean".
isType(?t), isPrimitiveType(?t), Type_byte(?t)    :- ?t = "byte".
isType(?t), isPrimitiveType(?t), Type_char(?t)    :- ?t = "char".
isType(?t), isPrimitiveType(?t), Type_short(?t)   :- ?t = "short".
isType(?t), isPrimitiveType(?t), Type_int(?t)     :- ?t = "int".
isType(?t), isPrimitiveType(?t), Type_long(?t)    :- ?t = "long".
isType(?t), isPrimitiveType(?t), Type_float(?t)   :- ?t = "float".
isType(?t), isPrimitiveType(?t), Type_double(?t)  :- ?t = "double".
isType(?t), isPrimitiveType(?t), Type_void(?t)    :- ?t = "void".

isType(?t), isReferenceType(?t), isNullType(?t), Type_null(?t) :- ?t = "null_type".

isType(?t), isReferenceType(?t), isClassType(?t), Type_object(?t) :- ?t = "java.lang.Object".
