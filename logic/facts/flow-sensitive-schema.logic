//-----------------------------------------------------------------------------
//                 Auxiliary Entities
//
// !! These two entities exist only to facilitate indexing. When a primitive
// appears in a key position of a predicate, the engine will switch to
// left-to-right ordering. !!
//-----------------------------------------------------------------------------
ParamIndex(?x), ParamIndex:Id(?x:?id) -> int[32](?id).
SimpleName(?x), SimpleName:Id(?x:?id) -> string(?id).

//-----------------------------------------------------------------------------

NumConstant(?x), NumConstant:Id(?x:?id) -> string(?id).


Modifier(?x), Modifier:Id(?x:?id) -> string(?id).

Modifier:abstract[] = ?mod -> Modifier(?mod).
Modifier:final[]    = ?mod -> Modifier(?mod).
Modifier:public[]   = ?mod -> Modifier(?mod).
Modifier:private[]  = ?mod -> Modifier(?mod).
Modifier:static[]   = ?mod -> Modifier(?mod).
Modifier:transient[]   = ?mod -> Modifier(?mod).


// Java Type Hierarchy

Type(?x), Type:Id(?x:?id) -> string(?id).

PrimitiveType(?t) -> Type(?t).
ReferenceType(?t) -> Type(?t).
NullType(?t)      -> ReferenceType(?t).
ArrayType(?t)     -> ReferenceType(?t).
ClassType(?t)     -> ReferenceType(?t).
InterfaceType(?t) -> ReferenceType(?t).

lang:entity(`PrimitiveType).
lang:entity(`ReferenceType).
lang:entity(`NullType).
lang:entity(`ArrayType).
lang:entity(`ClassType).
lang:entity(`InterfaceType).

// Inheritance and Subtyping

DirectSuperclass[?class] = ?superclass ->
   ClassType(?class), ClassType(?superclass).

DirectSuperinterface(?ref, ?interface) ->
   ReferenceType(?ref), InterfaceType(?interface).


// Important class subsets

ApplicationClass(?ref) -> ReferenceType(?ref).
ConcreteClass(?ref)    -> ReferenceType(?ref).

MainClass(?class) -> ClassType(?class).


// Common type selectors

Type:boolean[] = ?t -> PrimitiveType(?t).
Type:byte[] = ?t    -> PrimitiveType(?t).
Type:char[] = ?t    -> PrimitiveType(?t).
Type:short[] = ?t   -> PrimitiveType(?t).
Type:int[] = ?t     -> PrimitiveType(?t).
Type:long[] = ?t    -> PrimitiveType(?t).
Type:float[] = ?t   -> PrimitiveType(?t).
Type:double[] = ?t  -> PrimitiveType(?t).
Type:void[] = ?t    -> PrimitiveType(?t).
Type:null[] = ?t    -> NullType(?t).
Type:object[] = ?t  -> ClassType(?t).


ClassModifier(?mod, ?class) ->
   Modifier(?mod), ReferenceType(?class).


//-----------------------------------------------------------------------------

Field(?x), Field:Id(?x:?id) -> string(?id).

Field:DeclaringType[?field] = ?declaringClass ->
   Field(?field), ReferenceType(?declaringClass).

Field:SimpleName[?field] = ?simpleName ->
   Field(?field), SimpleName(?simpleName).

Field:Type[?field] = ?type ->
   Field(?field), Type(?type).

Field:Modifier(?mod, ?field) ->
   Modifier(?mod), Field(?field).


//-----------------------------------------------------------------------------

// Represents the return type and the argument types of a method
MethodDescriptor(?x), MethodDescriptor:Id(?x:?id) -> string(?id).

Method(?x), Method:Id(?x:?id) -> string(?id).

Method:DeclaringType[?method] = ?declaringType ->
   Method(?method), ReferenceType(?declaringType).

Method:Arity[?method] = ?arity ->
   Method(?method), int[32](?arity).

Method:ReturnType[?method] = ?returnType ->
   Method(?method), Type(?returnType).

Method:Params[?method] = ?params ->
   Method(?method), string(?params).

Method:SimpleName[?method] = ?simplename ->
   Method(?method), SimpleName(?simplename).

Method:Descriptor[?method] = ?descriptor ->
   Method(?method), MethodDescriptor(?descriptor).

JVMDescriptor(?descriptor), JVMDescriptor:Id(?descriptor:?s) -> string(?s).

// JVM method descriptor
Method:JVMDescriptor[?method] = ?descriptor ->
   Method(?method), JVMDescriptor(?descriptor).

Method:Modifier(?mod, ?method) ->
   Method(?method), Modifier(?mod).

// Method ?method declares to throw exception ?exceptionType.
// This predicate corresponds to Java's throws clause, or the
// Exceptions clause in Java bytecode.
Method:DeclaresException(?exceptionType, ?method) ->
   ReferenceType(?exceptionType), Method(?method).

FormalParam[?index, ?method] = ?var ->
   ParamIndex(?index), Method(?method), Var(?var).

ThisVar[?method] = ?var ->
   Method(?method), Var(?var).


//-----------------------------------------------------------------------------

Var(?x), Var:Id(?x:?id) -> string(?id).

Var:Type[?var] = ?type ->
   Var(?var), Type(?type).

Var:DeclaringMethod(?var, ?method) ->
   Var(?var), Method(?method).

ApplicationVar(?var) -> Var(?var).


//-----------------------------------------------------------------------------
// [Bytecode Instructions]
//-----------------------------------------------------------------------------

Instruction(?x), Instruction:Id(?x:?id) -> string(?id).

Instruction:Index[?insn] = ?index ->
   Instruction(?insn), int[32](?index).

Instruction:Method[?insn] = ?inMethod ->
   Instruction(?insn), Method(?inMethod).

Instruction:Line[?insn] = ?line ->
   Instruction(?insn), string(?line).


lang:entity(`Throw:Insn).
lang:entity(`ThrowNull:Insn).
lang:entity(`Goto:Insn).
lang:entity(`If:Insn).
lang:entity(`Switch:Insn).
lang:entity(`TableSwitch:Insn).
lang:entity(`LookupSwitch:Insn).
lang:entity(`MonitorInstruction).
lang:entity(`EnterMonitor:Insn).
lang:entity(`ExitMonitor:Insn).
lang:entity(`FieldInstruction).
lang:entity(`LoadInstanceField:Insn).
lang:entity(`StoreInstanceField:Insn).
lang:entity(`LoadStaticField:Insn).
lang:entity(`StoreStaticField:Insn).
lang:entity(`ArrayInstruction).
lang:entity(`LoadArrayIndex:Insn).
lang:entity(`StoreArrayIndex:Insn).
lang:entity(`AssignInstruction).
lang:entity(`AssignOper:Insn).
lang:entity(`AssignBinop:Insn).
lang:entity(`AssignUnop:Insn).
lang:entity(`AssignLocal:Insn).
lang:entity(`AssignInstanceOf:Insn).
lang:entity(`AssignNull:Insn).
lang:entity(`AssignNumConstant:Insn).
lang:entity(`AssignCast:Insn).
lang:entity(`AssignCastNull:Insn).
lang:entity(`AssignCastNumConstant:Insn).
lang:entity(`AssignHeapAllocation:Insn).
lang:entity(`ReturnInstruction).
lang:entity(`ReturnNonvoid:Insn).
lang:entity(`ReturnVoid:Insn).

lang:entity(`MethodInvocation).
lang:entity(`SpecialMethodInvocation:Insn).
lang:entity(`SuperMethodInvocation:Insn).
lang:entity(`StaticMethodInvocation:Insn).
lang:entity(`VirtualMethodInvocation:Insn).
lang:entity(`DynamicMethodInvocation:Insn).

lang:entity(`UnsupportedInstruction).
lang:entity(`AssignPhantomInvoke).
lang:entity(`BreakpointStmt).

Throw:Insn(?insn)                      -> Instruction(?insn).
ThrowNull:Insn(?insn)                  -> Throw:Insn(?insn).
Goto:Insn(?insn)                       -> Instruction(?insn).
If:Insn(?insn)                         -> Instruction(?insn).
Switch:Insn(?insn)                     -> Instruction(?insn).
TableSwitch:Insn(?insn)                -> Switch:Insn(?insn).
LookupSwitch:Insn(?insn)               -> Switch:Insn(?insn).
MonitorInstruction(?insn)              -> Instruction(?insn).
EnterMonitor:Insn(?insn)               -> MonitorInstruction(?insn).
ExitMonitor:Insn(?insn)                -> MonitorInstruction(?insn).
FieldInstruction(?insn)                -> Instruction(?insn).
LoadInstanceField:Insn(?insn)          -> FieldInstruction(?insn).
StoreInstanceField:Insn(?insn)         -> FieldInstruction(?insn).
LoadStaticField:Insn(?insn)            -> FieldInstruction(?insn).
StoreStaticField:Insn(?insn)           -> FieldInstruction(?insn).
ArrayInstruction(?insn)                -> Instruction(?insn).
LoadArrayIndex:Insn(?insn)             -> ArrayInstruction(?insn).
StoreArrayIndex:Insn(?insn)            -> ArrayInstruction(?insn).

AssignInstruction(?insn)               -> Instruction(?insn).
AssignOper:Insn(?insn)                 -> AssignInstruction(?insn).
AssignBinop:Insn(?insn)                -> AssignOper:Insn(?insn).
AssignUnop:Insn(?insn)                 -> AssignOper:Insn(?insn).
AssignLocal:Insn(?insn)                -> AssignOper:Insn(?insn).
AssignInstanceOf:Insn(?insn)           -> AssignInstruction(?insn).
AssignNull:Insn(?insn)                 -> AssignInstruction(?insn).
AssignNumConstant:Insn(?insn)          -> AssignInstruction(?insn).
AssignCast:Insn(?insn)                 -> AssignInstruction(?insn).
AssignCastNull:Insn(?insn)             -> AssignCast:Insn(?insn).
AssignCastNumConstant:Insn(?insn)      -> AssignCast:Insn(?insn).
AssignHeapAllocation:Insn(?insn)       -> AssignInstruction(?insn).
ReturnInstruction(?insn)               -> Instruction(?insn).
ReturnVoid:Insn(?insn)                 -> ReturnInstruction(?insn).
ReturnNonvoid:Insn(?insn)              -> ReturnInstruction(?insn).

MethodInvocation(?insn)                -> Instruction(?insn).
VirtualMethodInvocation:Insn(?insn)    -> MethodInvocation(?insn).
SpecialMethodInvocation:Insn(?insn)    -> MethodInvocation(?insn).
SuperMethodInvocation:Insn(?insn)      -> MethodInvocation(?insn).
StaticMethodInvocation:Insn(?insn)     -> MethodInvocation(?insn).
DynamicMethodInvocation:Insn(?insn)    -> MethodInvocation(?insn).

UnsupportedInstruction(?insn)          -> Instruction(?insn).
AssignPhantomInvoke(?insn)             -> UnsupportedInstruction(?insn).
BreakpointStmt(?insn)                  -> UnsupportedInstruction(?insn).

//-----------------------------------------------------------------------------


If:Var(?insn, ?pos, ?var) ->
   If:Insn(?insn), int[32](?pos), Var(?var).

Throw:Var[?insn] = ?var ->
   Throw:Insn(?insn), Var(?var).

Goto:Target[?insn] = ?index ->
   Goto:Insn(?insn), int[32](?index).

If:Target[?insn] = ?index ->
   If:Insn(?insn), int[32](?index).

Switch:Key[?insn] = ?key ->
   Switch:Insn(?insn), Var(?key).

Switch:Target[?insn, ?value] = ?index ->
   Switch:Insn(?insn), int[32](?value), int[32](?index).

Switch:DefaultTarget[?insn] = ?index ->
   Switch:Insn(?insn), int[32](?index).

EnterMonitor:Var[?insn] = ?var ->
   EnterMonitor:Insn(?insn), Var(?var).

ExitMonitor:Var[?insn] = ?var ->
   ExitMonitor:Insn(?insn), Var(?var).


//-----------------------------------------------------------------------------
// [Field Instructions]
//-----------------------------------------------------------------------------

// The associated *field* of this instruction. It applies to
// all types of field instuctions.

FieldInstruction:Signature[?insn] = ?sign ->
   FieldInstruction(?insn), Field(?sign).

//------------------------------------------------
// A LoadInstanceField instruction has the form:
// x = y.f
//
// Its three components are:
//   1. Base (y)
//   2. Field (f)
//   3. To (x)
//------------------------------------------------

LoadInstanceField:Base[?insn] = ?var ->
   LoadInstanceField:Insn(?insn), Var(?var).

LoadInstanceField:To[?insn] = ?var ->
   LoadInstanceField:Insn(?insn), Var(?var).

//------------------------------------------------
// A StoreInstanceField instruction has the form:
// x.f = y
//
// Its three components are:
//   1. Base (x)
//   2. Field (f)
//   3. From (y)
//------------------------------------------------

StoreInstanceField:From[?insn] = ?var ->
   StoreInstanceField:Insn(?insn), Var(?var).

StoreInstanceField:Base[?insn] = ?var ->
   StoreInstanceField:Insn(?insn), Var(?var).

//------------------------------------------------
// A LoadStaticField instruction has the form:
// x = Y.f
//
// Its two components are:
//   1. Field (Y.f)
//   2. To (x)
//------------------------------------------------

LoadStaticField:To[?insn] = ?var ->
   LoadStaticField:Insn(?insn), Var(?var).

//------------------------------------------------
// A StoreStaticField instruction has the form:
// X.f = y
//
// Its two components are:
//   1. Field (X.f)
//   2. From (y)
//------------------------------------------------

StoreStaticField:From[?insn] = ?var ->
   StoreStaticField:Insn(?insn), Var(?var).


//-----------------------------------------------------------------------------
// [Array Instructions]
//-----------------------------------------------------------------------------

ArrayInsnIndex[?insn] = ?index ->
   Instruction(?insn), Var(?index).

ComponentType[?arrayType] = ?componentType ->
   ArrayType(?arrayType), Type(?componentType).

LoadArrayIndex:Base[?insn] = ?var ->
   LoadArrayIndex:Insn(?insn), Var(?var).

LoadArrayIndex:To[?insn] = ?var ->
   LoadArrayIndex:Insn(?insn), Var(?var).

StoreArrayIndex:From[?insn] = ?var ->
   StoreArrayIndex:Insn(?insn), Var(?var).

StoreArrayIndex:Base[?insn] = ?var ->
   StoreArrayIndex:Insn(?insn), Var(?var).


//-----------------------------------------------------------------------------
// [Assign Instructions]
//-----------------------------------------------------------------------------

// The target of all assignment instructions
AssignInstruction:To[?insn] = ?to ->
   AssignInstruction(?insn), Var(?to).

// Assign numeric constant instruction
AssignNumConstant:Id[?insn] = ?const ->
   AssignNumConstant:Insn(?insn), NumConstant(?const).

// Assign cast instruction
AssignCast:From[?insn] = ?from ->
   AssignCast:Insn(?insn), Var(?from).

AssignCast:Type[?insn] = ?type ->
   AssignCast:Insn(?insn), Type(?type).

// Assign numeric constant casting instruction
AssignCastNumConstant:Id[?insn] = ?const ->
   AssignCastNumConstant:Insn(?insn), NumConstant(?const).

// Assign local instruction
AssignLocal:From[?insn] = ?from ->
   AssignLocal:Insn(?insn), Var(?from).

// Assign instanceof expression
AssignInstanceOf:From[?insn] = ?from ->
   AssignInstanceOf:Insn(?insn), Var(?from).

AssignInstanceOf:Type[?insn] = ?type ->
   AssignInstanceOf:Insn(?insn), Type(?type).

// Assign expression vars
AssignOper:From(?insn, ?pos, ?from) ->
   AssignOper:Insn(?insn), int[32](?pos), Var(?from).

AssignOper:Type(?insn, ?type) ->
   AssignOper:Insn(?insn), string(?type).

// Assign Heap Allocation
AssignHeapAllocation:Heap[?insn] = ?heap ->
   AssignHeapAllocation:Insn(?insn), HeapAllocation(?heap).


//-----------------------------------------------------------------------------
// [Return Instructions]
//-----------------------------------------------------------------------------

ReturnNonvoid:Var[?return] = ?var ->
  ReturnNonvoid:Insn(?return), Var(?var).


//-----------------------------------------------------------------------------
// [Invocation Instructions]
//-----------------------------------------------------------------------------

// The line number of a method invocation
MethodInvocation:Line[?invocation] = ?line ->
   MethodInvocation(?invocation), int[64](?line).

// The signature of the method being called
MethodInvocation:Method[?invocation] = ?signature ->
   MethodInvocation(?invocation), Method(?signature).

MethodInvocation:Method:Opt(?invocation, ?signature) ->
   MethodInvocation(?invocation), Method(?signature).

ApplicationMethod(?method) -> Method(?method).

// The (call-site) variable that holds the result of the invocation
AssignReturnValue[?invocation] = ?to ->
   MethodInvocation(?invocation), Var(?to).

// The actual parameters of the invocation. Note: this does not
// contain the receiver object (see MethodInvocation:Base predicates).
ActualParam[?index, ?invocation] = ?var ->
   MethodInvocation(?invocation), ParamIndex(?index), Var(?var).

// Virtual Method Invocation
VirtualMethodInvocation:Base[?invocation] = ?base ->
   VirtualMethodInvocation:Insn(?invocation), Var(?base).

VirtualMethodInvocation:SimpleName[?invocation] = ?simplename ->
   MethodInvocation(?invocation), SimpleName(?simplename).

VirtualMethodInvocation:Descriptor[?invocation] = ?descriptor ->
   MethodInvocation(?invocation), MethodDescriptor(?descriptor).

// Dynamic Method Invocation
DynamicMethodInvocation:Bootstrap[?invocation] = ?bootSignature ->
   DynamicMethodInvocation:Insn(?invocation), Method(?bootSignature).

// The following triplet is the dynamic method and can be anything
// (these are parts of a single UTF-8 string in the bytecode).
DynamicMethodInvocation:DynName[?invocation] = ?dynName ->
   DynamicMethodInvocation:Insn(?invocation), string(?dynName).
DynamicMethodInvocation:DynReturnType[?invocation] = ?dynRetType ->
   DynamicMethodInvocation:Insn(?invocation), string(?dynRetType).
DynamicMethodInvocation:DynParamTypes[?invocation] = ?dynParamTypes ->
   DynamicMethodInvocation:Insn(?invocation), string(?dynParamTypes).
// Arity of the dynamic method (calculated by the front-end).
DynamicMethodInvocation:DynArity[?invocation] = ?dynArity ->
   DynamicMethodInvocation:Insn(?invocation), int[32](?dynArity).

// The bootstrap parameters of a dynamic invocation.
BootstrapParam[?index, ?invocation] = ?var ->
   DynamicMethodInvocation:Insn(?invocation), ParamIndex(?index), Var(?var).

// Static Method Invocation
StaticMethodInvocation:SimpleName[?invocation] = ?simplename ->
   MethodInvocation(?invocation), SimpleName(?simplename).

StaticMethodInvocation:Descriptor[?invocation] = ?descriptor ->
   MethodInvocation(?invocation), MethodDescriptor(?descriptor).

// Special Method Invocation
SpecialMethodInvocation:Base[?invocation] = ?base ->
   SpecialMethodInvocation:Insn(?invocation), Var(?base).

SpecialMethodInvocation:SimpleName[?invocation] = ?simplename ->
   MethodInvocation(?invocation), SimpleName(?simplename).

SpecialMethodInvocation:Descriptor[?invocation] = ?descriptor ->
   MethodInvocation(?invocation), MethodDescriptor(?descriptor).

// Super Method Invocation
SuperMethodInvocation:Base[?invocation] = ?base ->
   SuperMethodInvocation:Insn(?invocation), Var(?base).

SuperMethodInvocation:SimpleName[?invocation] = ?simplename ->
   MethodInvocation(?invocation), SimpleName(?simplename).

SuperMethodInvocation:Descriptor[?invocation] = ?descriptor ->
   MethodInvocation(?invocation), MethodDescriptor(?descriptor).


//-----------------------------------------------------------------------------
// [Exception Handlers]
//-----------------------------------------------------------------------------

ExceptionHandler(?x), ExceptionHandler:Id(?x:?id) -> string(?id).

ExceptionHandler:Method[?handler] = ?inmethod ->
   ExceptionHandler(?handler), Method(?inmethod).

// Instruction index of handling code
ExceptionHandler:Index[?handler] = ?index ->
   ExceptionHandler(?handler), int[32](?index).

ExceptionHandler:Type[?handler] = ?type ->
   ExceptionHandler(?handler), Type(?type).

// Variable to which caught exceptions are assigned
ExceptionHandler:FormalParam[?handler] = ?var ->
   ExceptionHandler(?handler), Var(?var).

// First index of the bytecodes covered by this handler
ExceptionHandler:Begin[?handler] = ?index ->
   ExceptionHandler(?handler), int[32](?index).

// Last index (excluding this index) of the bytecodes covered by this
// handler
ExceptionHandler:End[?handler] = ?index ->
   ExceptionHandler(?handler), int[32](?index).

// Previous exception handler (handlers are ordered inside a method)
ExceptionHandler:Previous[?handler] = ?previous ->
   ExceptionHandler(?handler), ExceptionHandler(?previous).


//-----------------------------------------------------------------------------
// [Miscellaneous]
//-----------------------------------------------------------------------------

// Contents of properties files
Properties[?path, ?key] = ?value ->
   StringConstant(?path), StringConstant(?key), StringConstant(?value).

// Return variables of native methods (no instructions exist)
NativeReturnVar(?var, ?method) ->
   Var(?var), Method(?method).

// Predicates to store runtime metrics and statistics
Stats:Runtime(?attr, ?value) -> string(?attr), uint[64](?value).
Stats:Metrics(?index, ?attr, ?value) -> decimal[64](?index), string(?attr), uint[64](?value).


//-----------------------------------------------------------------------------
// [Android-related]
//-----------------------------------------------------------------------------

Activity(?x) -> Type(?x).
Service(?x) -> Type(?x).
ContentProvider(?x) -> Type(?x).
BroadcastReceiver(?x) -> Type(?x).
CallbackMethod(?x) -> Method(?x).
LayoutControl(?id, ?type, ?parent) -> int[32](?id), Type(?type), string(?parent).
LayoutControl0(?id, ?typename, ?parent) -> int[32](?id), string(?typename), string(?parent).
SensitiveLayoutControl(?id, ?type, ?parent) -> int[32](?id), Type(?type), string(?parent).
SensitiveLayoutControl0(?id, ?typename, ?parent) -> int[32](?id), string(?typename), string(?parent).
FieldInitialValue[?fld] = ?valueString -> Field(?fld), string(?valueString).

//-----------------------------------------------------------------------------
// [Dynamic analysis related]
//-----------------------------------------------------------------------------
lang:entity(`DynamicContext).
DynamicContext(?ctx), DynamicContext:Id(?ctx:?id) -> string(?id).
DynamicStaticFieldPointsTo(?fld, ?ctx, ?heap) ->
   DynamicContext(?ctx), HeapAllocation(?heap), Field(?fld).
DynamicInstanceFieldPointsTo(?fieldname, ?ctx, ?heap, ?baseCtx, ?baseHeap) ->
   DynamicContext(?ctx), DynamicContext(?baseCtx), HeapAllocation(?baseHeap), Field(?fieldname), HeapAllocation(?heap).
DynamicArrayIndexPointsTo(?ctx, ?heap, ?baseCtx, ?baseHeap) ->
   DynamicContext(?ctx), DynamicContext(?baseCtx), HeapAllocation(?heap), HeapAllocation(?baseHeap).
DynamicHeapAllocation(?representation, ?heap) -> HeapAllocation(?heap), string(?representation).

DynamicHeapObject(?dynamicContext, ?heap) ->  HeapAllocation(?heap), DynamicContext(?dynamicContext).

UnmatchedDynamicNormalHeapAllocation(?param1, ?param2, ?param3, ?param4) ->
  string(?param1),
  string(?param2),
  string(?param3),
  string(?param4).

UnmatchedStaticNormalHeapAllocation(?param1, ?param2, ?param3) ->
  string(?param1),
  string(?param2),
  string(?param3).

DynamicReachableMethod(?x) -> Method(?x).

UnmatchedDynamicReachableMethod(?methodId) -> string(?methodId).

DynamicCallGraphEdge(?ctxTo, ?toMethod, ?invocation, ?ctxFrom, ?fromMethod) ->
   Method(?fromMethod),
   Method(?toMethod),
   MethodInvocation(?invocation),
   DynamicContext(?ctxTo),
   DynamicContext(?ctxFrom).

UnmatchedDynamicCallGraphEdgeNode(?method) -> Method(?method).

DynamicContextInvo1(?invo, ?ctx) -> MethodInvocation(?invo), DynamicContext(?ctx).
DynamicContextInvo2(?invo, ?ctx) -> MethodInvocation(?invo), DynamicContext(?ctx).
DynamicContextHeap1(?heap, ?ctx) -> HeapAllocation(?heap), DynamicContext(?ctx).
DynamicContextHeap2(?heap, ?ctx) -> HeapAllocation(?heap), DynamicContext(?ctx).

//-----------------------------------------------------------------------------
// [Heap Allocation]
//-----------------------------------------------------------------------------

HeapAllocation0:Normal(?repr, ?type) -> string(?repr), Type(?type).
HeapAllocation0:String(?repr) -> string(?repr).
HeapAllocation0:Class(?repr, ?instanceType) -> string(?repr), Type(?instanceType).
HeapAllocation0:MethodHandleConstant(?repr, ?method) -> string(?repr), Method(?method).
HeapAllocation0:EmptyArray(?repr) -> string(?repr).
AssignHeapAllocation0(?instr, ?heapId) ->
   AssignHeapAllocation:Insn(?instr), string(?heapId).


HeapAllocation(?heap)   -> .
NormalHeap(?heap)       -> HeapAllocation(?heap).
StringConstant(?heap)   -> HeapAllocation(?heap).
ClassHeap(?heap)        -> HeapAllocation(?heap).
MethodHandleConstant(?heap) -> HeapAllocation(?heap).

lang:physical:storageModel[`HeapAllocation] = "ScalableSparse".
lang:entity(`HeapAllocation).
lang:entity(`NormalHeap).
lang:entity(`StringConstant).
lang:entity(`ClassHeap).
lang:entity(`MethodHandleConstant).

HeapAllocation:Normal:Cons[?id] = ?heap -> string(?id), NormalHeap(?heap).
HeapAllocation:String:Cons[?id] = ?heap -> string(?id), StringConstant(?heap).
HeapAllocation:Class:Cons[?id]  = ?heap -> string(?id), ClassHeap(?heap).
HeapAllocation:MethodHandle:Cons[?id] = ?heap -> string(?id), MethodHandleConstant(?heap).
HeapAllocation:Mock:Cons[?id]   = ?heap -> string(?id), HeapAllocation(?heap).

lang:constructor(`HeapAllocation:Normal:Cons).
lang:constructor(`HeapAllocation:String:Cons).
lang:constructor(`HeapAllocation:Class:Cons).
lang:constructor(`HeapAllocation:MethodHandle:Cons).
lang:constructor(`HeapAllocation:Mock:Cons).

HeapAllocation:Id[?heap] = ?id -> HeapAllocation(?heap), string(?id).
HeapAllocation:byId[?id] = ?heap -> string(?id), HeapAllocation(?heap).

HeapAllocation:Type[?heap] = ?type   -> HeapAllocation(?heap), Type(?type).

// [Miscellaneous]
HeapAllocation:EmptyArray(?heap) -> HeapAllocation(?heap).
HeapAllocation:Null[] = ?null -> HeapAllocation(?null).
MainMethodArgArray[] = ?heap -> HeapAllocation(?heap).
MainMethodArgArrayContent[] = ?heap -> HeapAllocation(?heap).

ClassHeap:InstanceType[?classHeap] = ?instanceType ->
   ClassHeap(?classHeap), Type(?instanceType).

MethodHandleConstant:Method[?heap] = ?method ->
   MethodHandleConstant(?heap), Method(?method).

// Use an entity to represent raw strings since the engine is having problems
// with huge strings as keys.
StringRaw(?x), StringRaw:Id(?x:?id) -> string(?id).
String:toRaw[?id] = ?raw -> string(?id), StringRaw(?raw).


//-----------------------------------------------------------------------------
// [Capacities]
//-----------------------------------------------------------------------------

lang:physical:capacity[`Field]               = 524288.
lang:physical:capacity[`Method]              = 1048576. /* 2 ^ 20 */
lang:physical:capacity[`MethodDescriptor]    = 1048576.
lang:physical:capacity[`Instruction]         = 134217728. /* 2^27 */
lang:physical:capacity[`Throw:Insn]          = 134217728. /* = instruction */
lang:physical:capacity[`MethodInvocation]    = 134217728. /* = instruction */
lang:physical:capacity[`JVMDescriptor]       = 524288.
lang:physical:capacity[`SimpleName]          = 131072.
lang:physical:capacity[`ExceptionHandler]    = 524288.
lang:physical:capacity[`Var]                 = 8388608. /* 2^23 */
lang:physical:capacity[`Modifier]            = 32.
lang:physical:capacity[`Type]                = 131072.
lang:physical:capacity[`PrimitiveType]       = 131072.
lang:physical:capacity[`ReferenceType]       = 131072.
lang:physical:capacity[`NullType]            = 131072.
lang:physical:capacity[`ArrayType]           = 131072.
lang:physical:capacity[`ClassType]           = 131072.
lang:physical:capacity[`InterfaceType]       = 131072.

lang:physical:capacity[`HeapAllocation]      = 4194304.
lang:physical:capacity[`NormalHeap]          = 4194304.
lang:physical:capacity[`NumConstant]         = 4194304.
lang:physical:capacity[`StringConstant]      = 4194304.
lang:physical:capacity[`MethodHandleConstant]= 4194304.
lang:physical:capacity[`ClassHeap]           = 4194304.
lang:physical:capacity[`StringRaw]           = 4194304.

//-----------------------------------------------------------------------------
// [Android]
//-----------------------------------------------------------------------------

AndroidEntryPoint(?m) -> Method(?m).
AndroidApplication(?t) -> ClassType(?t).

Dacapo0(?id, ?method) -> string(?id), Method(?method).
