/**
 * Generic declarations for context-sensitive pointer analysis.
 */

.decl isContext(?ctx:configuration.Context)
.decl isHContext(?hctx:configuration.HContext)

// These are normally unique, but for partitioned analyses there may be
// one per partition.
.decl isImmutableContext(?ctx:configuration.Context)
.decl isInitialContext(?ctx:configuration.Context)
.decl isJVMStartupContext(?ctx:configuration.Context)
.decl isClinitContext(?ctx:configuration.Context)
.decl isImmutableHContext(?hctx:configuration.HContext)
.decl isJVMStartupHContext(?hctx:configuration.HContext)


.decl VarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)

.decl InstanceFieldPointsTo(?hctx:configuration.HContext, ?value:Value, ?sig:Field, ?basehctx:configuration.HContext, ?basevalue:Value)

.decl StaticFieldPointsTo(?hctx:configuration.HContext, ?value:Value, ?sig:Field)

// array-element insensitive
.decl ArrayIndexPointsTo(?hctx:configuration.HContext, ?value:Value, ?basehctx:configuration.HContext, ?basevalue:Value)

/**
 * Call graph
 */
.decl CallGraphEdge(?callerCtx:configuration.Context, ?invocation:MethodInvocation, ?calleeCtx:configuration.Context, ?method:Method) overridable

/**
 * Reachable
 */
.decl Reachable(?method:Method)

.decl ReachableContext(?ctx:configuration.Context, ?method:Method)

// .decl OptLoadInstanceField(?to:Var, ?signature:Field, ?base:Var)

// .decl OptLoadStaticField(?ctx:configuration.Context, ?to:Var, ?signature:Field)

// .decl OptStoreStaticField(?signature:Field, ?from:Var)

// .decl OptStoreInstanceField(?from:Var, ?signature:Field, ?base:Var)


/**
 * Optimizations
 */
.decl OptInterproceduralAssign(?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var)

.decl OptLoadArrayIndex(?to:Var, ?base:Var)

.decl OptStoreArrayIndex(?from:Var, ?base:Var)

.decl OptArgAssign(?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var)

.decl OptReturnAssign(?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var)

.decl OptArgVarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)

.decl OptRetVarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)

.decl HeapInterproceduralAssign(?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var)

.decl LoadHeapInstanceField(?ctx:configuration.Context, ?to:Var, ?sig:Field, ?basehctx:configuration.HContext, ?basevalue:Value)

.decl StoreHeapInstanceField(?sig:Field, ?basehctx:configuration.HContext, ?basevalue:Value, ?ctx:configuration.Context, ?from:Var)

.decl LoadHeapArrayIndex(?ctx:configuration.Context, ?to:Var, ?basehctx:configuration.HContext, ?basevalue:Value)

.decl StoreHeapArrayIndex(?basehctx:configuration.HContext, ?basevalue:Value, ?ctx:configuration.Context, ?from:Var)

/**
 * Special heap abstractions.
 */
.decl SystemThreadGroup(?hctx:configuration.HContext, ?value:Value)

.decl MainThreadGroup(?hctx:configuration.HContext, ?value:Value)

.decl MainThread(?hctx:configuration.HContext, ?value:Value)


/**
 * Filter predicate for refinement-based/adaptive analyses
 */
//.decl SiteToRefine(?invocation:MethodInvocation)

//.decl ValueToRefine(?value:Value)

// Is the SiteToRefine the real list of objects needing
// refinement or its negation?
// .decl NegativeSiteFilter(?v:symbol)

// Is the ValueToRefine the real list of objects needing
// refinement or its negation?
// .decl NegativeObjectFilter(?v:symbol)
