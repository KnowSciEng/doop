#include "class-initialization.dl"
//#include "exceptions.dl"
//#include "finalization.dl"
//#include "android.dl"
#include "implicit-reachable.dl"
//#include "native.dl"
//#include "reference.dl"
//#include "string-constants.dl"
//#include "threads.dl"

#if defined(REFLECTION)
#include "reflection/rules.dl" 
#endif

FakeInvocation_RegisterFinalize(?value, ?invo) :-
   FakeInvocation_RegisterFinalize0(?heap, ?invo),
   Value_byHeap(?heap, ?value).

// NOTE_ should be separate rules so the engine can treat them as alternative
// indexes
Value_byHeap(?heap, ?value) :-
   Value_Heap_Cons(?heap, ?value).
Value_Heap(?value, ?heap) :-
   Value_byHeap(?heap, ?value).

Value_byNum(?const, ?value) :-
   Value_Num_Cons(?const, ?value).
Value_Num(?value, ?const) :-
   Value_byNum(?const, ?value).

Value_byId(?id, ?value) :-
   Value_Mock_Cons(?id, ?value).

Value_Heap_Cons(?heap, ?value),
isValue(?value),
Value_Type(?value, ?type) :-
   isHeapAllocation(?heap),
   HeapAllocation_Type(?heap, ?type).

// Only create values for numeric constants in a static initializer
// (or initial field value) inside a class whose name contains
// ".R$". We are trying to capture just the constants in Android "R"
// nested classes. REVIEW to generalize.
/*Value_Num_Cons(?const, ?value),
isValue(?value),
Value_Type(?value, ?type) :-
//   NumConstant(?const),
   AssignNumConstant_Id(?insn, ?const),
   Instruction_Method(?insn, ?meth),
   Method_SimpleName(?meth] = "<clinit>",
   Method_DeclaringType[?meth] = ?class,
   Type_Id(?class_?className),
   string_substring[?className, _, 3] = ".R$",
   ?type = Type_int[].

Value_Num_Cons[?const] = ?value,
isValue(?value),
Value_Type[?value] = ?type <-
//   NumConstant(?const),
   FieldInitialValue[?fld] = ?const,
   Field_DeclaringType[?fld] = ?class,
   Type_Id(?class_?className),
   string_substring[?className, _, 3] = ".R$",
   ?type = Type_int[].
*/
Value_isHeap(?value) :-
   Value_Heap_Cons(_, ?value).
Value_isNonHeap(?value) :-
   Value_Mock_Cons(_, ?value).

Value_isNonHeap(?value) :-
   Value_Num_Cons(_, ?value).

Value_Null(?nullValue) :-
   HeapAllocation_Null(?nullHeap),
   Value_byHeap(?nullHeap, ?nullValue).


Value_DeclaringType(?value, ?type) :-
   AssignHeapAllocation(?heap, _, ?inmethod),
   Method_DeclaringType(?inmethod, ?type),
   !isStringConstant(?heap),
   !isClassHeap(?heap),
   Value_byHeap(?heap, ?value).

Value_DeclaringType(?value, "java.lang.System") :-
   isClassHeap(?heap),
   Value_byHeap(?heap, ?value).

Value_DeclaringType(?value, "java.lang.String") :-
   isStringConstant(?heap),
   Value_byHeap(?heap, ?value).

Value_DeclaringType(?value, "java.lang.Object") :-
   Value_Null(?value).

Value_DeclaringType(?value, "java.lang.Object") :-
   MainMethodArgArray(?heap),
   Value_byHeap(?heap, ?value) ;
   MainMethodArgArrayContent(?heap),
   Value_byHeap(?heap, ?value).


isImmutableContext("<<immutable-context>>").
isInitialContext("<<initial-context>>").
isJVMStartupContext("<<jvm-startup-context>>").
isClinitContext("<<clinit-context>>").


// The main method is reachable
ReachableContext(?initialContext, ?method) :-
  isInitialContext(?initialContext),
  MainMethodDeclaration(?method).

// Implicitly reachable methods are invoked by the JVM on startup.
ReachableContext(?jvmStartUpContext, ?method) :-
  isJVMStartupContext(?jvmStartUpContext),
  ImplicitReachable(?method).

// If a class needs to be initialized, then its class initializer is invoked
// Note: InitializedClass already deals with superclasses that need initialization
ReachableContext(?clinitContext, ?clinit) :-
  isClinitContext(?clinitContext),
  InitializedClass(?class),
  ClassInitializer(?class, ?clinit).

isImmutableHContext("<<immutable-hcontext>>").
isJVMStartupHContext("<<jvm-startup-hcontext>>").

// Create initial objects with their heap contexts
SystemThreadGroup(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  Value_byId("<<system-thread-group>>", ?alloc).

MainThreadGroup(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  Value_byId("<<main-thread-group>>", ?alloc).

MainThread(?hctx, ?alloc) :-
  isJVMStartupHContext(?hctx),
  Value_byId("<<main-thread>>", ?alloc).