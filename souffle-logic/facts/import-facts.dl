// NormalHeap

.decl _NormalHeap(?id:symbol, ?type:symbol) input output

isType(?type),
isHeapAllocation(?id),
isNormalHeap(?id),
HeapAllocation_Type(?id, ?type) :-
    _NormalHeap(?id, ?type).


// TODO: Why is this here?
isClassType("java.lang.String").


// StringConstant

.decl _StringConstant(?id:symbol) input output

isHeapAllocation(?id),
isStringConstant(?id),
HeapAllocation_Type(?id, "java.lang.String") :-
    _StringConstant(?id).


// StringRaw

.decl _StringRaw(?id:symbol, ?rawId:symbol) input output
.decl String_toRaw(?id:symbol, ?rawId:symbol)

isStringRaw(?id),
String_toRaw(?id, ?rawId) :-
    _StringRaw(?id, ?rawId).


// ClassHeap

.decl _ClassHeap(?id:symbol, ?instanceType:symbol) input output

isType(?instanceType),
isHeapAllocation(?id),
isClassHeap(?id),
ClassHeap_InstanceType(?id, ?instanceType),
HeapAllocation_Type(?id, "java.lang.Class") :-
    _ClassHeap(?id, ?instanceType).


// EmptyArray

.decl _EmptyArray(?id:symbol) input

HeapAllocation_EmptyArray(?id) :-
    _EmptyArray(?id).


// AssignHeapAllocation

.decl _AssignHeapAllocation(?instruction:symbol, ?index:number, ?heap:symbol, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignHeapAllocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
    _AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?method).


// AndroidEntryPoint

.decl _AndroidEntryPoint(?method:symbol) input

AndroidEntryPoint(?method) :-
    _AndroidEntryPoint(?method).


// AssignLocal

.decl _AssignLocal(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignLocal_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
    _AssignLocal(?instruction, ?index, ?from, ?to, ?method).


// AssignBinop

.decl _AssignBinop(?instruction:symbol, ?index:number, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignBinop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    _AssignBinop(?instruction, ?index, ?to, ?method).


// AssignUnop

.decl _AssignUnop(?instruction:symbol, ?index:number, ?to:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignUnop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    _AssignUnop(?instruction, ?index, ?to, ?method).


// AssignOperFrom

.decl _AssignOperFrom(?instruction:symbol, ?from:symbol) input

// TODO: Recheck this rule
isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignOper_Insn(?instruction),
AssignOper_From(?instruction, ?from) :-
    _AssignOperFrom(?instruction, ?from).


// AssignOperType

.decl _AssignOperType(?instruction:symbol, ?type:symbol) input

// TODO: Recheck this rule
isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignOper_Insn(?instruction),
AssignOper_Type(?instruction, ?type) :-
    _AssignOperType(?instruction, ?type).


// IfVar

.decl _IfVar(?instruction:symbol, ?var:symbol) input

isInstruction(?instruction),
isIf_Insn(?instruction),
If_Var(?instruction, ?var) :-
    _IfVar(?instruction, ?var).


// AssignCast

.decl _AssignCast(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignCast_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
    _AssignCast(?instruction, ?index, ?from, ?to, ?type, ?method).


// AssignCastNumConstant

.decl _AssignCastNumConstant(?instruction:symbol, ?index:number, ?const:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignCastNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCastNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
    _AssignCastNumConstant(?instruction, ?index, ?const, ?to, ?type, ?method).


// AssignCastNull

.decl _AssignCastNull(?instruction:symbol, ?index:number, ?to:symbol, ?type:symbol, ?method:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignCastNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
    _AssignCastNull(?instruction, ?index, ?to, ?type, ?method).


// AssignNumConstant

.decl _AssignNumConstant(?instruction:symbol, ?index:number, ?const:symbol, ?to:symbol, ?inmethod:symbol) input

isNumConstant(?const),
isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
    _AssignNumConstant(?instruction, ?index, ?const, ?to, ?method).


// AssignNull

.decl _AssignNull(?instruction:symbol, ?index:number, ?to:symbol, ?method:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    _AssignNull(?instruction, ?index, ?to, ?method).


// AssignInstanceOf

.decl _AssignInstanceOf(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol) input

isInstruction(?instruction),
isAssignInstruction(?instruction),
isAssignInstanceOf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstanceOf_From(?instruction, ?from),
AssignInstanceOf_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
    _AssignInstanceOf(?instruction, ?index, ?from, ?to, ?type, ?method).


// Field

.decl _Field(?signature:symbol, ?declaringClass:symbol, ?simplename:symbol, ?type:symbol) input

isField(?signature),
Field_DeclaringType(?signature, ?declaringType),
Field_SimpleName(?signature, ?simplename),
Field_Type(?signature, ?type) :-
    _Field(?signature, ?declaringType, ?simplename, ?type).

// EnterMonitor

.decl _EnterMonitor(?instruction:symbol, ?index:number, ?var:symbol, ?method:symbol) input

isInstruction(?instruction),
isMonitorInstruction(?instruction),
isEnterMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
EnterMonitor_Var(?instruction, ?var) :-
    _EnterMonitor(?instruction, ?index, ?var, ?method).


// ExitMonitor

.decl _ExitMonitor(?instruction:symbol, ?index:number, ?var:symbol, ?method:symbol) input

isInstruction(?instruction),
isMonitorInstruction(?instruction),
isExitMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
ExitMonitor_Var(?instruction, ?var) :-
    _ExitMonitor(?instruction, ?index, ?var, ?method).


// Method Invocation line numbers

.decl _MethodInvocation_Line(?instruction:symbol, line:number) input

isMethodInvocation(?instruction),
MethodInvocation_Line(?instruction, ?line) :-
    _MethodInvocation_Line(?instruction, ?line).


// Static method invocation

.decl _StaticMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?method:symbol) input

isInstruction(?instruction),
isStaticMethodInvocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
    _StaticMethodInvocation(?instruction, ?index, ?signature, ?method).


// Special method invocation

.decl _SpecialMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?method:symbol) input

isInstruction(?instruction),
isSpecialMethodInvocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
SpecialMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
    _SpecialMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).

// Virtual method invocation

.decl _VirtualMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?method:symbol) input

isInstruction(?instruction),
isVirtualMethodInvocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
VirtualMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
    _VirtualMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).


// Throw

.decl _Throw(?instruction:symbol, ?index:number, ?var:symbol, ?method:symbol) input

isInstruction(?instruction),
isThrow_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Throw_Var(?instruction, ?var) :-
    _Throw(?instruction, ?index, ?var, ?method).


// ThrowNull

.decl _ThrowNull(?instruction:symbol, ?index:number, ?method:symbol) input

isInstruction(?instruction),
isThrow_Insn(?instruction),
isThrowNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
    _ThrowNull(?instruction, ?index, ?method).


// Exception handler

.decl _ExceptionHandler(?ref:symbol, ?method:symbol, ?index:number, ?type:symbol, ?var:symbol, ?begin:number, ?end:number) input

isExceptionHandler(?ref),
ExceptionHandler_Method(?ref, ?method),
ExceptionHandler_Index(?ref, ?index),
ExceptionHandler_Type(?ref, ?type),
ExceptionHandler_FormalParam(?ref, ?var),
ExceptionHandler_Begin(?ref, ?begin),
ExceptionHandler_End(?ref, ?end) :-
    _ExceptionHandler(?ref, ?method, ?index, ?type, ?var, ?begin, ?end).


// Method

.decl _Method(?ref:symbol, ?simplename:symbol, ?descriptor:symbol, ?declaringType:symbol, ?returnType:symbol, ?jvmDescriptor:symbol) input

isMethod(?ref),
isMethodDescriptor(?descriptor),
isJVMDescriptor(?jvmDescriptor),
Method_SimpleName(?ref, ?simplename),
Method_Descriptor(?ref, ?descriptor),
Method_DeclaringType(?ref, ?declaringType),
Method_JVMDescriptor(?ref, ?jvmDescriptor),
Method_ReturnType(?ref, ?returnType) :-
    _Method(?ref, ?simplename, ?descriptor, ?declaringType, ?returnType, ?jvmDescriptor).


// StoreInstanceField

.decl _StoreInstanceField(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?signature:symbol, ?method:symbol) input

isInstruction(?instruction),
isFieldInstruction(?instruction),
isStoreInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
    _StoreInstanceField(?instruction, ?index, ?from, ?base, ?signature, ?method).


// LoadInstanceField

.decl _LoadInstanceField(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?signature:symbol, ?method:symbol) input

isInstruction(?instruction),
isFieldInstruction(?instruction),
isLoadInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
    _LoadInstanceField(?instruction, ?index, ?to, ?base, ?signature, ?method).


// StoreStaticField

.decl _StoreStaticField(?instruction:symbol, ?index:number, ?from:symbol, ?signature:symbol, ?method:symbol) input

isInstruction(?instruction),
isFieldInstruction(?instruction),
isStoreStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from) :-
    _StoreStaticField(?instruction, ?index, ?from, ?signature, ?method).


// LoadStaticField

.decl _LoadStaticField(?instruction:symbol, ?index:number, ?to:symbol, ?signature:symbol, ?method:symbol) input

isInstruction(?instruction),
isFieldInstruction(?instruction),
isLoadStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to) :-
    _StoreStaticField(?instruction, ?index, ?to, ?signature, ?method).


// StoreArrayIndex

.decl _StoreArrayIndex(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?method:symbol) input

isInstruction(?instruction),
isArrayInstruction(?instruction),
isStoreArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from) :-
    _StoreArrayIndex(?instruction, ?index, ?from, ?base, ?method).


// LoadArrayIndex

.decl _LoadArrayIndex(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?method:symbol) input

isInstruction(?instruction),
isArrayInstruction(?instruction),
isLoadArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to) :-
    _LoadArrayIndex(?instruction, ?index, ?to, ?base, ?method).


// ArrayInsnIndex

.decl _ArrayInsnIndex(?instruction:symbol, ?index:symbol) input

ArrayInsnIndex(?instruction, ?index) :-
    _ArrayInsnIndex(?instruction, ?index).


// Goto

.decl _Goto(?instruction:symbol, ?index:number, ?to:number, ?method:symbol) input

isInstruction(?instruction),
isGoto_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Goto_Target(?instruction, ?to) :-
    _Goto(?instruction, ?index, ?to, ?method).


// If

.decl _If(?instruction:symbol, ?index:number, ?to:number, ?method:symbol) input

isInstruction(?instruction),
isIf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
If_Target(?instruction, ?to) :-
    _If(?instruction, ?index, ?to, ?method).


// Switch Statements

.decl _TableSwitch(?instruction:symbol, ?index:number, ?key:symbol, ?method:symbol) input

isInstruction(?instruction),
isSwitch_Insn(?instruction),
isTableSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
    _TableSwitch(?instruction, ?index, ?key, ?method).


.decl _LookupSwitch(?instruction:symbol, ?index:number, ?key:symbol, ?method:symbol) input

isInstruction(?instruction),
isSwitch_Insn(?instruction),
isLookupSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
    _LookupSwitch(?instruction, ?index, ?key, ?method).


// Targets

.decl _TableSwitch_Target(?ref:symbol, ?value:number, ?target:number) input

isInstruction(?ref),
isSwitch_Insn(?ref),
isTableSwitch_Insn(?ref),
Switch_Target(?ref, ?value, ?target) :-
    _TableSwitch_Target(?ref, ?value, ?target).


.decl _LookupSwitch_Target(?ref:symbol, ?value:number, ?target:number) input

isInstruction(?ref),
isSwitch_Insn(?ref),
isLookupSwitch_Insn(?ref),
Switch_Target(?ref, ?value, ?target) :-
    _LookupSwitch_Target(?ref, ?value, ?target).


// Default target

.decl _TableSwitch_DefaultTarget(?ref:symbol, ?target:number) input

isInstruction(?ref),
isSwitch_Insn(?ref),
isTableSwitch_Insn(?ref),
Switch_DefaultTarget(?ref, ?target) :-
    _TableSwitch_DefaultTarget(?ref, ?target).


.decl _LookupSwitch_DefaultTarget(?ref:symbol, ?target:number) input

isInstruction(?ref),
isSwitch_Insn(?ref),
isLookupSwitch_Insn(?ref),
Switch_DefaultTarget(?ref, ?target) :-
    _LookupSwitch_DefaultTarget(?ref, ?target).


// ReturnNonvoid

.decl _Return(?ref:symbol, ?index:number, ?var:symbol, ?method:symbol) input

isInstruction(?ref),
isReturnInstruction(?ref),
isReturnNonvoid_Insn(?ref),
Instruction_Index(?ref, ?index),
Instruction_Method(?ref, ?method),
ReturnNonvoid_Var(?ref, ?var) :-
    _Return(?ref, ?index, ?var, ?method).


// ReturnVoid

.decl _ReturnVoid(?ref:symbol, ?index:number, ?method:symbol) input

isInstruction(?ref),
isReturnInstruction(?ref),
isReturnVoid_Insn(?ref),
Instruction_Index(?ref, ?index),
Instruction_Method(?ref, ?method) :-
    _ReturnVoid(?ref, ?index, ?method).


// AssignPhantomInvoke

.decl _AssignPhantomInvoke(?ref:symbol, ?index:number, ?method:symbol) input

isInstruction(?ref),
isUnsupportedInstruction(?ref),
isAssignPhantomInvoke(?ref),
Instruction_Index(?ref, ?index),
Instruction_Method(?ref, ?method) :-
    _AssignPhantomInvoke(?ref, ?index, ?method).


// PhantomInvoke

.decl _PhantomInvoke(?ref:symbol, ?index:number, ?method:symbol) input

isInstruction(?ref),
isUnsupportedInstruction(?ref),
isPhantomInvoke(?ref),
Instruction_Index(?ref, ?index),
Instruction_Method(?ref, ?method) :-
    _PhantomInvoke(?ref, ?index, ?method).


// BreakPointStmt

.decl _BreakpointStmt(?ref:symbol, ?index:number, ?method:symbol) input

isInstruction(?ref),
isUnsupportedInstruction(?ref),
isBreakpointStmt(?ref),
Instruction_Index(?ref, ?index),
Instruction_Method(?ref, ?method) :-
    _BreakpointStmt(?ref, ?index, ?method).


// UnsupportedInstruction

.decl _UnsupportedInstruction(?ref:symbol, ?index:number, ?method:symbol) input

isInstruction(?ref),
isUnsupportedInstruction(?ref),
Instruction_Index(?ref, ?index),
Instruction_Method(?ref, ?method) :-
    _UnsupportedInstruction(?ref, ?index, ?method).


// Activity

.decl _Activity(?id:symbol) input

Activity(?id) :-
    _Activity(?id).


// Service

.decl _Service(?id:symbol) input

Service(?id) :-
    _Service(?id).


// ContentProvider

.decl _ContentProvider(?id:symbol) input

ContentProvider(?id) :-
    _ContentProvider(?id).


// BroadcastReceiver

.decl _BroadcastReceiver(?id:symbol) input

BroadcastReceiver(?id) :-
    _BroadcastReceiver(?id).


// CallbackMethod

.decl _CallbackMethod(?id:symbol) input

CallbackMethod(?id) :-
    _CallbackMethod(?id).


// LayoutControl

.decl _LayoutControl(?id:number, ?typename:symbol, ?parent:symbol) input

LayoutControl0(?id, ?typename, ?parent) :-
    _LayoutControl(?id, ?typename, ?parent).


// FieldInitialValue

.decl _FieldInitialValue(?fld:symbol, ?valueString:symbol) input

FieldInitialValue(?fld, ?valueString) :-
    _FieldInitialValue(?fld, ?valueString).


// Access Modifiers

isModifier(?x), Modifier_abstract(?x) :- ?x = "abstract".
isModifier(?x), Modifier_public(?x)   :- ?x = "public".
isModifier(?x), Modifier_private(?x)  :- ?x = "private".
isModifier(?x), Modifier_final(?x)    :- ?x = "final".
isModifier(?x), Modifier_static(?x)   :- ?x = "static".


// Basic Types as nullary functional-predicates

isType(?t), isPrimitiveType(?t), Type_boolean(?t) :- ?t = "boolean".
isType(?t), isPrimitiveType(?t), Type_byte(?t)    :- ?t = "byte".
isType(?t), isPrimitiveType(?t), Type_char(?t)    :- ?t = "char".
isType(?t), isPrimitiveType(?t), Type_short(?t)   :- ?t = "short".
isType(?t), isPrimitiveType(?t), Type_int(?t)     :- ?t = "int".
isType(?t), isPrimitiveType(?t), Type_long(?t)    :- ?t = "long".
isType(?t), isPrimitiveType(?t), Type_float(?t)   :- ?t = "float".
isType(?t), isPrimitiveType(?t), Type_double(?t)  :- ?t = "double".
isType(?t), isPrimitiveType(?t), Type_void(?t)    :- ?t = "void".

isType(?t), isReferenceType(?t), isNullType(?t), Type_null(?t) :- ?t = "null_type".

isType(?t), isReferenceType(?t), isClassType(?t), Type_object(?t) :- ?t = "java.lang.Object".
