isModule("<tensorflow>").

//------------------------------------------------------
//                    TENSOR DATA TYPES
//------------------------------------------------------

.type TensorDataType = ClassType

.decl isTensorDataType(?type: TensorDataType)
ModeledClass("<tensorflow.float16>", "float16", "<tensorflow>").
isTensorDataType("<tensorflow.float16>").
ModeledClass("<tensorflow.float32>", "float32", "<tensorflow>").
isTensorDataType("<tensorflow.float32>").
ModeledClass("<tensorflow.float64>", "float64", "<tensorflow>").
isTensorDataType("<tensorflow.float64>").
ModeledClass("<tensorflow.bfloat16>", "bfloat16", "<tensorflow>").
isTensorDataType("<tensorflow.bfloat16>").
ModeledClass("<tensorflow.complex64>", "complex64", "<tensorflow>").
isTensorDataType("<tensorflow.complex64>").
ModeledClass("<tensorflow.complex128>", "complex128", "<tensorflow>").
isTensorDataType("<tensorflow.complex128>").
ModeledClass("<tensorflow.int8>", "int8", "<tensorflow>").
isTensorDataType("<tensorflow.int8>").
ModeledClass("<tensorflow.uint8>", "uint8", "<tensorflow>").
isTensorDataType("<tensorflow.uint8>").
ModeledClass("<tensorflow.uint16>", "uint16", "<tensorflow>").
isTensorDataType("<tensorflow.uint16>").
ModeledClass("<tensorflow.uint32>", "uint32", "<tensorflow>").
isTensorDataType("<tensorflow.uint32>").
ModeledClass("<tensorflow.uint64>", "uint64", "<tensorflow>").
isTensorDataType("<tensorflow.uint64>").
ModeledClass("<tensorflow.int16>", "int16", "<tensorflow>").
isTensorDataType("<tensorflow.int16>").
ModeledClass("<tensorflow.int32>", "int32", "<tensorflow>").
isTensorDataType("<tensorflow.int32>").
ModeledClass("<tensorflow.int64>", "int64", "<tensorflow>").
isTensorDataType("<tensorflow.int64>").
ModeledClass("<tensorflow.bool>", "bool", "<tensorflow>").
isTensorDataType("<tensorflow.bool>").
ModeledClass("<tensorflow.string>", "string", "<tensorflow>").
isTensorDataType("<tensorflow.string>").
ModeledClass("<tensorflow.qint8>", "qint8", "<tensorflow>").
isTensorDataType("<tensorflow.qint8>").
ModeledClass("<tensorflow.quint8>", "quint8", "<tensorflow>").
isTensorDataType("<tensorflow.quint8>").
ModeledClass("<tensorflow.qint16>", "qint16", "<tensorflow>").
isTensorDataType("<tensorflow.qint16>").
ModeledClass("<tensorflow.quint16>", "quint16", "<tensorflow>").
isTensorDataType("<tensorflow.quint16>").
ModeledClass("<tensorflow.qint32>", "qint32", "<tensorflow>").
isTensorDataType("<tensorflow.qint32>").
ModeledClass("<tensorflow.resource>", "resource", "<tensorflow>").
isTensorDataType("<tensorflow.resource>").
ModeledClass("<tensorflow.variant>", "variant", "<tensorflow>").
isTensorDataType("<tensorflow.variant>").

.decl TensorShapeListSize(?val:Value, ?size:number)
.decl TensorShapeListContent(?val:Value, ?index:number, ?indexValue:Value)
.output TensorShapeListSize
.output TensorShapeListContent

ModeledClass("<tensorflow.Tensor>", "Tensor", "<tensorflow>").

ModeledModule("<tensorflow.layers>", "layers", "<tensorflow>").
ModeledModule("<tensorflow.nn>", "nn", "<tensorflow>").

ModeledFunction("<tensorflow.reshape>", "reshape", "<tensorflow>").
FormalParam( 0, "tensor", "<tensorflow.reshape>", "<tensorflow.reshape>/mockParam1").
FormalParam( 1, "shape", "<tensorflow.reshape>",  "<tensorflow.reshape>/mockParam2").
FormalParam( 2, "name", "<tensorflow.reshape>",   "<tensorflow.reshape>/mockParam3").

ModeledFunction("<tensorflow.constant>", "constant", "<tensorflow>").


ModeledFunction("<tensorflow.placeholder>", "placeholder", "<tensorflow>").
FormalParam( 0, "dtype", "<tensorflow.placeholder>", "<tensorflow.placeholder>/mockParam1").
FormalParam( 1, "shape", "<tensorflow.placeholder>", "<tensorflow.placeholder>/mockParam2").
FormalParam( 2, "name", "<tensorflow.placeholder>",  "<tensorflow.placeholder>/mockParam3").


.decl TensorHasConcreteDimensions(?tensorVal:Value)
.output TensorHasConcreteDimensions

//------------------------------------------------------
//                    PLACEHOLDER INVOC
//------------------------------------------------------

#define TensorValueMacro(op,fun,val1, val2) cat("<tensor ", cat(fun, cat("/", cat(op, cat(val1, cat("+", cat(val2,">")))))))

.decl isValidTensorPlaceHolderInvocation(?insn:FunctionInvocation_Insn, ?typeArgVal:Value, ?dimListVal:Value)
.output isValidTensorPlaceHolderInvocation

isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal):-
  FunctionInvResolvesTo(?insn, ?baseVal, "<tensorflow.placeholder>"),
  ResolvedActualParams(?insn, ?baseVal, 0, "dtype", ?typeVal),
  HeapAllocation_Type(?typeVal, ?typeValType),
  isTensorDataType(?typeValType),
  ResolvedActualParams(?insn, ?baseVal, 1, "shape", ?dimListVal),
  isListOfConsts(?dimListVal).

TensorShapeListSize(?tensorVal, ?size),
TensorShapeListContent(?tensorVal, ?index, ?indexValue):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  Instruction_Function(?insn, ?function),
  AssignInstruction_To(?insn, ?tensorAssignVar),
  ?tensorVal = TensorValueMacro("placeholder",?function, ?typeVal, ?dimListVal),
  VarPointsTo(?tensorAssignVar, ?tensorVal),
  VarPointsToList(?dimListVar, ?dimListVal),
  ConstListDimensions(?dimListVal, ?size),
  ConstListContents(?dimListVal, ?index, ?indexValue).


ConstListDimensions(?tensorVal, ?size),
ConstListContents(?tensorVal, ?index, ?indexValue):-
  TensorShapeListSize(?tensorVal, ?size),
  TensorShapeListContent(?tensorVal, ?index, ?indexValue).

VarPointsTo(?var, ?value),
Value_Type(?value, "<tensorflow.Tensor>"):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  AssignInstruction_To(?insn, ?var),
  Instruction_Function(?insn, ?function),
  ?value = TensorValueMacro("placeholder",?function, ?typeVal, ?dimListVal).

TensorHasConcreteDimensions(?tensorVal):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  Instruction_Function(?insn, ?function),
  AssignInstruction_To(?insn, ?tensorAssignVar),
  ?tensorVal = TensorValueMacro("placeholder",?function, ?typeVal, ?dimListVal),
  VarPointsTo(?tensorAssignVar, ?tensorVal),
  isListOfIntConsts(?dimListVal).

//------------------------------------------------------
//              RESHAPE OP
//------------------------------------------------------

.decl TensorReshapeInvocationProducesOutput(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output TensorReshapeInvocationProducesOutput

.decl isValidTensorReshapeInvocationClass1(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationClass1

.decl isValidTensorReshapeInvocationClass2(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationClass2

.decl isPossibleMisalignedTensorReshapeInvocation(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isPossibleMisalignedTensorReshapeInvocation

.decl isValidTensorReshapeInvocationLevel1(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationLevel1

.decl isValidTensorReshapeInvocationLevel2(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationLevel2

.decl isNotValidTensorReshapeInvocationLevel2(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isNotValidTensorReshapeInvocationLevel2

.decl ValidTensorReshape_ReplaceMinus1WithVal(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value, ?replaceVal:Value)
.output ValidTensorReshape_ReplaceMinus1WithVal


isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal):-
  FunctionInvResolvesTo(?insn, ?baseVal, "<tensorflow.reshape>"),
  ResolvedActualParams(?insn, ?baseVal, 0, "tensor", ?tensorArgVal),
  Value_Type(?tensorArgVal, "<tensorflow.Tensor>"),
  ResolvedActualParams(?insn, ?baseVal, 1, "shape", ?dimListArgVal),
  isListOfConsts(?dimListArgVal).

isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListMultAll(?tensorArgVal,?tensorRes),
  ConstListMultAll(?dimListArgVal,?dimListRes),
  ?tensorRes = ?dimListRes.

isNotValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListMultAll(?tensorArgVal,?tensorRes),
  ConstListMultAll(?dimListArgVal,?dimListRes),
  ?tensorRes != ?dimListRes.


TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isValidTensorReshapeInvocationClass2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  TensorHasConcreteDimensions(?tensorArgVal).


ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, "<None>"),
TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isValidTensorReshapeInvocationClass1(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListContents(?tensorArgVal, ?pos, "<None>"),
  ConstListContents(?dimListArgVal, ?pos, "<num-constant(int):-1>").

ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, "<None>"),
TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isPossibleMisalignedTensorReshapeInvocation(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListContents(?tensorArgVal, ?pos1, "<None>"),
  ConstListContents(?dimListArgVal, ?pos2, "<num-constant(int):-1>"),
  ?pos1 != ?pos2.

TensorShapeListSize(?tensorVal, ?size),
TensorShapeListContent(?tensorVal, ?index, ?indexValue):-
  TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
  AssignInstruction_To(?insn, ?tensorAssignVar),
  VarPointsTo(?tensorAssignVar, ?tensorVal),
  VarPointsToList(?dimListArgVar, ?dimListArgVal),
  ConstListDimensions(?dimListArgVal, ?size),
  ConstListContents(?dimListArgVal, ?index, ?indexValue),
  ?indexValue != "<num-constant(int):-1>".

TensorShapeListSize(?tensorVal, ?size),
TensorShapeListContent(?tensorVal, ?index, ?newValue):-
  TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
  AssignInstruction_To(?insn, ?tensorAssignVar),
  VarPointsTo(?tensorAssignVar, ?tensorVal),
  VarPointsToList(?dimListArgVar, ?dimListArgVal),
  ConstListDimensions(?dimListArgVal, ?size),
  ConstListContents(?dimListArgVal, ?index, "<num-constant(int):-1>"),
  ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, ?newValue).


VarPointsTo(?var, ?value),
Value_Type(?value, "<tensorflow.Tensor>"):-
  TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
  AssignInstruction_To(?insn, ?var),
  Instruction_Function(?insn, ?function),
  ?value = TensorValueMacro("reshape",?function, ?tensorArgVal, ?dimListArgVal).

TensorHasConcreteDimensions(?value),
VarPointsTo(?var, ?value),
Value_Type(?value, "<tensorflow.Tensor>"):-
  isValidTensorReshapeInvocationClass2(?insn, ?tensorArgVal, ?dimListArgVal),
  AssignInstruction_To(?insn, ?var),
  Instruction_Function(?insn, ?function),
  TensorHasConcreteDimensions(?tensorArgVal),
  ?value = TensorValueMacro("reshape",?function, ?tensorArgVal, ?dimListArgVal).