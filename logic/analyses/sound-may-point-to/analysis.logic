#include "declarations.logic"

// Ignore verification of calculation in head (for toString)
lang:compiler:warning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = false.


cons:MayContext:Initial[] = ctx, MayContext(ctx).
cons:MayHeapContext:Empty[] = hctx, MayHeapContext(hctx).

// The rules below create access paths from all variables
// and all access fields in the program.
cons:AccessPath:byVar[var] = ap, AccessPath(ap),
InitialComputedAccessPath(ap) <-
  Var:Type[var] = type,
  ReferenceType(type).

// Invariant: all computed access paths are type safe: the fields
// exist in the static type of the prefix. REVIEW: This may (rarely)
// prevent detection of valid aliasing.
cons:AccessPath:byField[fld, ap1] = ap2, AccessPath(ap2),
InitialComputedAccessPath(ap2) <-
  (LoadInstanceField:Base[insn] = base ;
   StoreInstanceField:Base[insn] = base),
  cons:AccessPath:byVar[base] = ap1,
  FieldInstruction:Signature[insn] = fld,
  Field:Type[fld] = type,
  ReferenceType(type).

cons:AccessPath:byStaticField[fld] = ap, AccessPath(ap),
InitialComputedAccessPath(ap) <-
  (LoadStaticField:To[insn] = _ ;
   StoreStaticField:From[insn] = _),
  FieldInstruction:Signature[insn] = fld,
  Field:Type[fld] =type,
  ReferenceType(type).

AccessPath:toString[ap] = str <-
  cons:AccessPath:byVar[var] = ap,
  Var:Id(var:str).

AccessPath:toString[ap] = str <-
  cons:AccessPath:byStaticField[fld] = ap,
  Field:Id(fld:str).

AccessPath:toString[ap2] = str2 <-
  cons:AccessPath:byField[fld, ap1] = ap2,
  Field:Id(fld:fldStr),
  AccessPath:toString[ap1] = str1,
  str2 = str1 + "." + fldStr.


#include "intraprocedural-must.logic"
#include "must-point-to.logic"

//// ====================================
//// BEGIN configuration
//// Different ways to kick-start the analysis.

MayContext:MaxDepth[] = 4.
AccessPath:MaxLength[] = 3.

//.init SoundMayPhase1 = SoundMay<DummyMustPointTo>
//.init SoundMayPhase2 = SoundMay<DummyMustPointTo>
//SoundMayPhase2.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
//  SoundMayPhase1.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
//SoundMayPhase2.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
//  SoundMayPhase1.MayReachableMethodUnderMayContext(?ctx, ?meth).
//
//.init SoundMayPhase3 = SoundMay<SoundMustPointTo>
//SoundMayPhase3.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
//  SoundMayPhase2.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
//SoundMayPhase3.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
//  SoundMayPhase2.MayReachableMethodUnderMayContext(?ctx, ?meth).

/*
.init SoundMayPhase4 = SoundMay<SoundMustPointTo>
SoundMayPhase4.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
  SoundMayPhase3.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
SoundMayPhase4.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
  SoundMayPhase3.MayReachableMethodUnderMayContext(?ctx, ?meth).

.init SoundMayPhase5 = SoundMay<SoundMustPointTo>
SoundMayPhase5.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
  SoundMayPhase4.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
SoundMayPhase5.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
  SoundMayPhase4.MayReachableMethodUnderMayContext(?ctx, ?meth).

.init SoundMayPhase6 = SoundMay<SoundMustPointTo>
SoundMayPhase6.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
  SoundMayPhase5.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
SoundMayPhase6.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
  SoundMayPhase5.MayReachableMethodUnderMayContext(?ctx, ?meth).

.init SoundMayPhase7 = SoundMay<SoundMustPointTo>
SoundMayPhase7.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
  SoundMayPhase6.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
SoundMayPhase7.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
  SoundMayPhase6.MayReachableMethodUnderMayContext(?ctx, ?meth).

.init SoundMayPhase8 = SoundMay<SoundMustPointTo>
SoundMayPhase8.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
  SoundMayPhase7.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
SoundMayPhase8.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
  SoundMayPhase7.MayReachableMethodUnderMayContext(?ctx, ?meth).

.init SoundMayPhase9 = SoundMay<SoundMustPointTo>
SoundMayPhase9.MayCallGraphEdge_Prev(?ctx, ?meth, ?callerCtx, ?invo) :-
  SoundMayPhase8.MayCallGraphEdge(?ctx, ?meth, ?callerCtx, ?invo).
SoundMayPhase9.MayReachableMethodUnderMayContext_Prev(?ctx, ?meth) :-
  SoundMayPhase8.MayReachableMethodUnderMayContext(?ctx, ?meth).
*/

IntraproceduralMustForStats = new IntraproceduralMust

//IntraproceduralMustForStats:MayReachableMethodUnderMayContext(ctx, method) <-
//  SoundMayPhase1:MayReachableMethodUnderMayContext(?ctx, ?meth).

InitialRootMethodForMayAnalysis(method) <-
  //Reachable(method), // just for benchmarking against unsound VPT analysis
  ApplicationMethod(method),
  Method:DeclaringType[method] = class,
  ApplicationClass(class).

//// END configuration



LibraryCollectionType(type) <-
  (root = "java.util.AbstractCollection" ;
   root = "java.util.AbstractMap"),
  SubtypeOf(type, root).

// TODO: Should these use LibraryCollectionType?
LibraryCollectionStoreOperation(invo) <-
  VirtualMethodInvocation:SimpleName[invo] = "add";
  VirtualMethodInvocation:SimpleName[invo] = "push";
  VirtualMethodInvocation:SimpleName[invo] = "set";
  VirtualMethodInvocation:SimpleName[invo] = "put".
LibraryCollectionLoadOperation(invo) <-
  VirtualMethodInvocation:SimpleName[invo] = "peek";
  VirtualMethodInvocation:SimpleName[invo] = "pop";
  VirtualMethodInvocation:SimpleName[invo] = "elementAt";
  VirtualMethodInvocation:SimpleName[invo] = "firstElement";
  VirtualMethodInvocation:SimpleName[invo] = "lastElement";
  VirtualMethodInvocation:SimpleName[invo] = "remove";
  VirtualMethodInvocation:SimpleName[invo] = "get". // TODO: better match in future

StoreCollection:From(insn, from) <-
  StoreArrayIndex:From[insn] = from.
StoreCollection:From(invo, from) <-
  LibraryCollectionStoreOperation(invo),
  (ActualParam[1, invo] = from;
   ActualParam[2, invo] = from).

StoreCollection:Base[insn] = base <-
  StoreArrayIndex:Base[insn] = base.
StoreCollection:Base[invo] = base <-
  LibraryCollectionStoreOperation(invo),
  VirtualMethodInvocation:Base[invo] = base.

LoadCollection:To[insn] = to <-
  LoadArrayIndex:To[insn] = to.
LoadCollection_To[invo] = to <-
  LibraryCollectionLoadOperation(invo),
  AssignReturnValue[invo] = to.

LoadCollection:Base[insn] = base <-
  LoadArrayIndex:Base[insn] = base.
LoadCollection:Base[invo] = base <-
  LibraryCollectionLoadOperation(invo),
  VirtualMethodInvocation:Base[invo] = base.

ThisVarOfConstructor[method] = this <-
   Method:SimpleName(method, "<init>"),
   ThisVar[method] = this.

// TODO what about the way it is computed in the must analysis (java)
// TODO what happens when it is a jump target
Method:FirstInstruction[method2] = insn <-
  Instruction:Index[insn] = 1,
  !IsJumpTarget(insn),
  Instruction:Method[insn] = method2.

StoreInstruction(insn) <-
  StoreStaticField:From[insn] = _ ;
  StoreInstanceField:From[insn] = _.

// TODO fix indexing
BBHeadIsFirstInstruction(firstInsn) <-
  BasicBlockBegin(firstInsn),
  Method:FirstInstruction[_] = firstInsn.

BasicBlockContainsCall(headInsn) <-
  BasicBlockHead[insn] = headInsn,
  MethodInvocation(insn),
  !IgnorableMethodInvocation(insn).

SomePathBetweenBasicBlocksContainsCall(prev, next) <-
  BasicBlockContainsCall(prev),
  MaySuccessorBBModuloThrow(next, prev).

SomePathFromFirstInstructionContainsCall(blockHead) <-
  BBHeadIsFirstInstruction(firstInsn),
  SomePathBetweenBasicBlocksContainsCall(firstInsn, blockHead).


//// Enter at POINT2---IgnorableMethodInvocation
//// ====================================
//// BEGIN configuration of ignorable method calls

// Some calls to native or otherwise complex methods need to be
// modeled, i.e., ignored. E.g., fillInStackTrace is a native method
// called in the constructor of a (ubiquitous) java.lang.Throwable. If
// not ignored, no image of the heap propagates anywhere.
// TODO: do a better match (on full sig) than just on SimpleName.

IgnorableMethodInvocation(invo) <-
   VirtualMethodInvocation:SimpleName[invo] = "fillInStackTrace"; // Throwable
   VirtualMethodInvocation:SimpleName[invo] = "equals";  // Object
   VirtualMethodInvocation:SimpleName[invo] = "hashCode";
   VirtualMethodInvocation:SimpleName[invo] = "toString";
   VirtualMethodInvocation:SimpleName[invo] = "println"; // PrintStream
   StaticMethodInvocation:SimpleName[invo] = "parseInt"; // Integer
   VirtualMethodInvocation:SimpleName[invo] = "endsWith"; // String
   StaticMethodInvocation:SimpleName[invo] = "floatToRawIntBits"; // Float
   // Used in the HashMap "put" method!
   StaticMethodInvocation:SimpleName[invo] = "intBitsToFloat";
   // From this point on, it's just a test to see if these natives matter.
   StaticMethodInvocation:SimpleName[invo] = "encoding"; // Console
   StaticMethodInvocation:SimpleName[invo] = "echo";
   StaticMethodInvocation:SimpleName[invo] = "istty";
   VirtualMethodInvocation:SimpleName[invo] = "sync"; // FileDescriptor
   StaticMethodInvocation:SimpleName[invo] = "initIDs";
   VirtualMethodInvocation:SimpleName[invo] = "open"; // FileInputStream
   VirtualMethodInvocation:SimpleName[invo] = "read0";
   VirtualMethodInvocation:SimpleName[invo] = "readBytes";
   VirtualMethodInvocation:SimpleName[invo] = "skip";
   VirtualMethodInvocation:SimpleName[invo] = "available";
   VirtualMethodInvocation:SimpleName[invo] = "close0";
   VirtualMethodInvocation:SimpleName[invo] = "write"; // FileOutputStream
   VirtualMethodInvocation:SimpleName[invo] = "writeBytes";
   VirtualMethodInvocation:SimpleName[invo] = "availableProcessors"; // Runtime
   VirtualMethodInvocation:SimpleName[invo] = "freeMemory";
   VirtualMethodInvocation:SimpleName[invo] = "totalMemory";
   VirtualMethodInvocation:SimpleName[invo] = "maxMemory";
   VirtualMethodInvocation:SimpleName[invo] = "gc";
   StaticMethodInvocation:SimpleName[invo] = "runFinalization0";
   StaticMethodInvocation:SimpleName[invo] = "sin"; // StrictMath
   StaticMethodInvocation:SimpleName[invo] = "cos";
   StaticMethodInvocation:SimpleName[invo] = "tan";
   StaticMethodInvocation:SimpleName[invo] = "log";
   StaticMethodInvocation:SimpleName[invo] = "pow";
   StaticMethodInvocation:SimpleName[invo] = "currentThread"; // Thread
   StaticMethodInvocation:SimpleName[invo] = "yield";
   StaticMethodInvocation:SimpleName[invo] = "sleep";
   VirtualMethodInvocation:SimpleName[invo] = "start0";
   VirtualMethodInvocation:SimpleName[invo] = "isInterrupted";
   VirtualMethodInvocation:SimpleName[invo] = "isAlive";
   StaticMethodInvocation:SimpleName[invo] = "holdsLock";
   StaticMethodInvocation:SimpleName[invo] = "getThreads";
   StaticMethodInvocation:SimpleName[invo] = "dumpThreads";
   VirtualMethodInvocation:SimpleName[invo] = "setPriority";
   VirtualMethodInvocation:SimpleName[invo] = "stop0";
   VirtualMethodInvocation:SimpleName[invo] = "suspend0";
   VirtualMethodInvocation:SimpleName[invo] = "resume0";
   VirtualMethodInvocation:SimpleName[invo] = "interrupt0";
   VirtualMethodInvocation:SimpleName[invo] = "isAlive";
   VirtualMethodInvocation:SimpleName[invo] = "getStackTraceDepth"; // Throwable
   VirtualMethodInvocation:SimpleName[invo] = "getStackTraceElement";
   VirtualMethodInvocation:SimpleName[invo] = "forkAndExec";  // UnixProcess
   VirtualMethodInvocation:SimpleName[invo] = "wait"; // Object
   VirtualMethodInvocation:SimpleName[invo] = "notify";
   VirtualMethodInvocation:SimpleName[invo] = "notifyAll".

IgnorableForStaticsMethodInvocation(invo) <-
   VirtualMethodInvocation:SimpleName[invo] = "intern"; // String
   VirtualMethodInvocation:SimpleName[invo] = "clone"; // Object
   VirtualMethodInvocation:SimpleName[invo] = "append". // StringBuilder

// Collections
IgnorableForNonCollectionsMethodInvocation(invo) <-
  LibraryCollectionStoreOperation(invo);
  LibraryCollectionLoadOperation(invo).

//// END configuration of ignorable method calls


/*
  // TODO not updated for LB
  ///// POINT1--unchanged access paths code

  //// Dealing with unchanged access paths (below) hasn't proven
  //// worthwhile. It's not surprising. The callee has no name for
  //// this access path. The only hope is that it will survive through
  //// virtual calls and will come back to the caller (whereas the
  //// conservative must-pre-analysis won't consider virtual calls it
  //// cannot resolve in its naive way).

  // This is quite expensive if not restricted. Currently used only for
  // non-resolved virtual calls. For resolved ones, we have a frame rule
  // to propagate the information right over the method call in many
  // cases (and we ignore the rest for now).
  // ChangedBaseAtInvocation(var, invo) <-
  //   ActualParam[_, invo] = var;
  //   VirtualMethodInvocation:Base[invo] = var;
  //   SpecialMethodInvocation:Base[invo] = var.

  // OptPotentialAccessPathMayPointToPropagation(hctx, heap, invo, calleeCtx, toMethod, ap) <-
  //   MayCallGraphEdge_ToMethod(toMethod, callerCtx, invo),
  //   !May_MustCallGraphEdge_ToMethod(callerCtx, invo, toMethod),
  //   MayCallGraphEdge_Context(callerCtx, invo, calleeCtx),
  //   Before_AccessPathMayPointTo(hctx, heap, ap, callerCtx, invo).

  // Before_AccessPathMayPointTo(hctx, heap, ap, calleeCtx, firstInsn) <_
  //    OptPotentialAccessPathMayPointToPropagation(hctx, heap, invo, calleeCtx, toMethod, ap),
  //    AccessPath_BaseVar(ap, baseVar),
  //    !ChangedBaseAtInvocation(baseVar, invo),
  //    SingleFieldAccessPath(fld, ap),
  //    (MethodMayAssignField(fld, toMethod);
  //     MethodHasUnresolvedInvocation(toMethod)),
  //    FirstInstructionOfMethod(toMethod, firstInsn).

  // Before_AccessPathMayPointTo(hctx, heap, ap, calleeCtx, firstInsn) <-
  //    OptPotentialAccessPathMayPointToPropagation(hctx, heap, invo, calleeCtx, toMethod, ap),
  //    AccessPath_BaseVar(ap, baseVar),
  //    !ChangedBaseAtInvocation(baseVar, invo),
  //    _DoubleFieldAccessPath(fld1, fld2, ap),
  //    (MethodMayAssignField(fld1, toMethod);
  //     MethodMayAssignField(fld2, toMethod);
  //     MethodHasUnresolvedInvocation(toMethod)),
  //    FirstInstructionOfMethod(toMethod, firstInsn).
*/


/*
// TODO not updated for LB
//// POINT4 code
// //// Commented out for now. Does not make that much difference.
// //// InstanceFieldMayPointTo inferences rarely get stopped because of
// //// library calls.
// //// ------------------------------
// // Logic for assuming the library does not affect application fields,
// // except via reflection.
// ApplicationField(fld) <-
//    FieldSignature_DeclaringClass(fld, class),
//    ApplicationClass(class).

// MethodCallsReflection(meth) <-
//    Instruction_Method(invo, meth),
//    MethodInvocation_Signature(invo, sig),
//    string_substring(sig, 0, _, "<java.lang.reflect").

// _Opt2MethodInvocation_Signature(invo, inMeth, toMeth) <-
//    (StaticMethodInvocation_Insn(invo);
//     SpecialMethodInvocation_Insn(invo)),
//    MethodInvocation_Signature(invo, toMeth),
//    Instruction_Method(invo, inMeth).

// // exact resolution for static/special
// MethodCallsReflection(inMeth) <-
//    _Opt2MethodInvocation_Signature(_, inMeth, toMeth),
//    MethodCallsReflection(toMeth).

// // underapproximation of virtual method resolution, as if static
// _Opt2MethodInvocation_Signature(invo, inMeth, toMeth) <-
//    VirtualMethodInvocation_Insn(invo),
//    MethodInvocation_Signature(invo, toMeth),
//    Instruction_Method(invo, inMeth).

// // Naive virtual method resolution, based on name. REVIEW: too conservative
// _OptVirtualMethodInvocation_Simplename(inMeth, simpleName) <-
//    VirtualMethodInvocation_SimpleName(invo, simpleName),
//    Instruction_Method(invo, inMeth).

// MethodCallsReflection(inMeth) <-
//    MethodCallsReflection(toMeth),
//    MethodSignature_SimpleName(toMeth, toMethSimpleName),
//    _OptVirtualMethodInvocation_Simplename(inMeth, toMethSimpleName).

// InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn) <-
//    AllPredecessors_InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn),
//    MethodInvocation_Signature(insn, calledMethod), // underapproximate
// //   string_substring[calledMethod, 0, string_length[str]] != str, str = "<java.lang.reflect",
//    !MethodCallsReflection(calledMethod),
//    ApplicationField(fld),
//    !ApplicationMethod(calledMethod).

// StaticFieldMayPointTo(hctx, heap, fld, ctx, insn) <-
//    AllPredecessors_StaticFieldMayPointTo(hctx, heap, fld, ctx, insn),
//    MethodInvocation_Signature(insn, calledMethod),
// //   string_substring[calledMethod, 0, string_length[str]] != str, str = "<java.lang.reflect",
//    !MethodCallsReflection(calledMethod),
//    ApplicationField(fld),
//    !ApplicationMethod(calledMethod).

// // TODO: also extend to collections
*/

/*
// TODO not updated for LB
//// POINT5: DominatedPathMayInvalidateFieldPointsTo
// // TODO: currently has no impact. Comment out and re-check when non-invalidating
// //       method calls are added

// // Interesting addition to frame rules:
// // propagate in case of non-invalidating dominated predecessors.

// // The path (dominated by dominator) that ends at insn
// // may invalidate some field.
// DominatedPathMayInvalidateFieldPointsTo(fld, insn, dominator) <-
//    Dominates(dominator, insn),
//    BasicBlockMayInvalidateFieldPointsTo(fld, insn).

// DominatedPathMayInvalidateFieldPointsTo(fld, insn, dominator) <-
//    DominatedPathMayInvalidateFieldPointsTo(fld, otherInsn, dominator),
//    MaySuccessorBBModuloThrow(insn, otherInsn),
//    Dominates(dominator, insn).

// ExistsFieldInvalidatingPathToPredecessor(fld, prevHead, dominator) <-
//    DominatesItsPredecessorInstruction(prevInsn, dominator),
//    BasicBlockHead(prevInsn, prevHead),
//    DominatedPathMayInvalidateFieldPointsTo(fld, prevHead, dominator).

// ExistsFieldInvalidatingPathToSomePredecessor(fld, dominator) <-
//    ExistsFieldInvalidatingPathToPredecessor(fld, _, dominator).

// BasicBlockMayInvalidateAllFieldsPointsTo(headInsn) <-
//    BasicBlockHead(insn, headInsn),
//    !IndifferentInstruction(insn),
//    !FieldInstruction(insn).

// // The path (dominated by dominator) that ends at insn
// // may invalidate any field.
// DominatedPathMayInvalidateAllFieldsPointsTo(insn, dominator) <-
//    Dominates(dominator, insn),
//    BasicBlockMayInvalidateAllFieldsPointsTo(insn).

// DominatedPathMayInvalidateAllFieldsPointsTo(insn, dominator) <-
//    DominatedPathMayInvalidateAllFieldsPointsTo(otherInsn, dominator),
//    MaySuccessorBBModuloThrow(insn, otherInsn),
//    Dominates(dominator, insn).

// ExistsAllFieldsInvalidatingPathToPredecessor(prevHead, dominator) <-
//    DominatesItsPredecessorInstruction(prevInsn, dominator),
//    BasicBlockHead(prevInsn, prevHead),
//    DominatedPathMayInvalidateAllFieldsPointsTo(prevHead, dominator).

// ExistsAllFieldsInvalidatingPathToSomePredecessor(dominator) <-
//    ExistsAllFieldsInvalidatingPathToPredecessor(_, dominator).

// InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn) <-
//    AllNonDomPredecessors_InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn),
//    !ExistsFieldInvalidatingPathToSomePredecessor(fld, insn),
//    !ExistsAllFieldsInvalidatingPathToSomePredecessor(insn),
//    DominatesItsPredecessorInstruction(_, insn).

// StaticFieldMayPointTo(hctx, heap, fld, ctx, insn) <-
//    AllNonDomPredecessors_StaticFieldMayPointTo(hctx, heap, fld, ctx, insn),
//    !ExistsFieldInvalidatingPathToSomePredecessor(fld, insn),
//    !ExistsAllFieldsInvalidatingPathToSomePredecessor(insn),
//    DominatesItsPredecessorInstruction(_, insn).

// // TODO: update with collections
*/
