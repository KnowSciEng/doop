// Each rule that uses merge and/or record macros should add
// the created contexts into the respective relations, since
// the product of the macro goes to the body of a rule.

#define UNIQUE_HCONTEXT "<<unique-hcontext>>"

#define RecordMacro(ctx, value, hctx) \
  hctx = UNIQUE_HCONTEXT


// For this analysis the context of a method call corresponds to the
// declaring class of the receiver object. Again, this may trigger creation of
// a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Value_DeclaringType(value, type), \
  calleeCtx = [type]

// For this analysis, static calls just keep the same context as the
// caller.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  calleeCtx = callerCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Value_DeclaringType(value, type), \
  newCtx = [type]

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Value_DeclaringType(value, type), \
  calleeCtx = [type]

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Value_DeclaringType(value, type), \
  newCtx = [type]


#define InitContextMacro(type) \
  isContext(ctx) :- ctx = [type]

#define InitHContextMacro(type) \
  isHContext(hctx) :- hctx = UNIQUE_HCONTEXT
