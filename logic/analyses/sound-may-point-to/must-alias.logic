// A sound must-alias analysis, for use in sound-may-point-to. Imports a sound
// call-graph, computed by the sound-may-point-to analysis.
// NOTE invariant: all access paths involved are "computed", i.e., have been
// created.

// For use when we don't want to incur the cost (typical case)
component IMustAlias {
	MustAlias(ap1, ap2, ctx, insn) ->
		AccessPath(ap1), AccessPath(ap2), MayContext(ctx), Instruction(insn).
	MustAlias:Before(ap1, ap2, ctx, insn) ->
		AccessPath(ap1), AccessPath(ap2), MayContext(ctx), Instruction(insn).
}

component SoundMustAlias : IMustAlias {
	// TODO should constructors be in the head? Invariant?
	// Local assignments, non-phi
	MustAlias(fromAp, toAp, ctx, insn) <-
		AssignLocal:From[insn] = from,
		!PhiNodeHead(insn, _),
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		AssignInstruction:To[insn] = to,
		cons:AccessPath:byVar[from] = fromAp,
		cons:AccessPath:byVar[to] = toAp.

	MustAlias(fromAp, toAp, ctx, insn) <-
		AssignLocal:From[insn] = from,
		!PhiNodeHead(insn, _),
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		AccessPath:BaseVar[fromAp] = from,
		AssignInstruction:To[insn] = to,
		RebaseCompositeAccessPath(fromAp, from, to, toAp).

	MustAlias(fromAp, toAp, ctx, insn) <-
		AssignCast:From[insn] = from,
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		AssignInstruction:To[insn] = to,
		cons:AccessPath:byVar[from] = fromAp,
		cons:AccessPath:byVar[to] = toAp.

	MustAlias(fromAp, toAp, ctx, insn) <-
		AssignCast:Insn(insn),
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		AssignInstruction:To[insn] = to,
		AssignCast:From[insn] = from,
		AccessPath:BaseVar[fromAp] = from,
		RebaseCompositeAccessPath(fromAp, from, to, toAp).

	// Load and store instructions
	MustAlias(toAp, fromAp, ctx, insn) <-
		LoadInstanceField:Base[insn] = base,
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		LoadInstanceField:To[insn] = to,
		FieldInstruction:Signature[insn] = fld,
		base != to,
		cons:AccessPath:byVar[base] = baseAp,
		cons:AccessPath:byField[baseAp, fld] = fromAp,
		cons:AccessPath:byVar[to] = toAp.

	MustAlias(toAp, fromAp, ctx, insn) <-
		LoadStaticField:To[insn] = to,
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		FieldInstruction:Signature[insn] = fld,
		cons:AccessPath:byStaticField[fld] = fromAp,
		cons:AccessPath:byVar[to] = toAp.

	MustAlias(toAp, fromAp, ctx, insn) <-
		StoreInstanceField:Base[insn] = base,
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		FieldInstruction:Signature[insn] = fld,
		StoreInstanceField:From[insn] = from,
		cons:AccessPath:byVar[base] = baseAp,
		cons:AccessPath:byField[baseAp, fld] = toAp,
		cons:AccessPath:byVar[from] = fromAp.

	MustAlias(toAp, fromAp, ctx, insn) <-
		StoreStaticField:From[insn] = from,
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method),
		FieldInstruction:Signature[insn] = fld,
		cons:AccessPath:byStaticField[fld] = toAp,
		cons:AccessPath:byVar[from] = fromAp.

	// Weakening
	MustAlias(ap1, ap2, ctx, insn) <-
		MustAlias(ap1, ap2, initCtx, insn),
		cons:MayContext:Initial[] = initCtx,
		Instruction:Method[insn] = method,
		ReachableContext:May(ctx, method).

	// Propagation across instructions

	// Control-flow join
	MustAlias:Before(ap2, ap1, ctx, insn) <-
		AllRelevantPredecessorsMustAlias(ap1, ap2, ctx, insn).

	// Intra-BB
	MustAlias:Before(ap2, ap1, ctx, insn) <-
		MustAlias(ap2, ap1, ctx, prev),
		PrevInSameBasicBlock(insn, prev).

	// Frame rules: unchanged information
	MustAliasBaseInvalidated(ap1, ap2, insn) <-
		MustAlias:Before(ap1, ap2, _, insn),
		AccessPath:Var[ap1] = base1,
		AccessPath:Var[ap2] = base2,
		(AssignInstruction:To[insn] = base1;
		 AssignInstruction:To[insn] = base2).

	// Single variable access paths
	MustAlias(ap1, ap2, ctx, insn) <-
		MustAlias:Before(ap1, ap2, ctx, insn),
		AccessPath:Var[ap1] = _,
		AccessPath:Var[ap2] = _,
		!MustAliasBaseInvalidated(ap1, ap2, insn).

	// Non-collection access paths
	MustAlias(ap1, ap2, ctx, insn) <-
		MustAlias:Before(ap1, ap2, ctx, insn),
		!AccessPath:IsCollection(ap1),
		!AccessPath:IsCollection(ap2),
		!MustAliasBaseInvalidated(ap1, ap2, insn),
		!MonitorInstruction(insn),
		(!MethodInvocation(insn);
		  MethodInvocation:Ignorable(insn);
		  MethodInvocation:NonCollection(insn)),
		!StoreInstruction(insn).


// // now painstaking case analysis of store instruction cases.
// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    SingleFieldAccessPath(fld, ap1),
//    AccessPath_IsVariable(ap2),
//    FieldInstruction_Signature[insn] != fld.

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    SingleFieldAccessPath(fld1, ap1),
//    SingleFieldAccessPath(fld2, ap2),
//    FieldInstruction_Signature(insn, fld),
//    fld != fld1, fld != fld2.

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    _DoubleFieldAccessPath(fld1, fld2, ap1),
//    AccessPath_IsVariable(ap2),
//    FieldInstruction_Signature(insn, fld),
//    fld != fld1, fld != fld2.

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    _DoubleFieldAccessPath(fld1, fld2, ap1),
//    SingleFieldAccessPath(fld3, ap2),
//    FieldInstruction_Signature(insn, fld),
//    fld != fld1, fld != fld2, fld != fld3.

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    _DoubleFieldAccessPath(fld1, fld2, ap1),
//    _DoubleFieldAccessPath(fld3, fld4, ap2),
//    FieldInstruction_Signature(insn, fld),
//    fld != fld1, fld != fld2, fld != fld3, fld != fld4.

// //// and still, we only covered up to 3.

// TODO extend to longer access paths



// Auxiliary, forall emulations

// Does the predecessor BB (pred) of insn establish (at its end) a must-alias
MustAliasAtPredecessor(pred, ap1, ap2, ctx, insn) <-
	MustAlias(ap1, ap2, ctx, tail),
	BasicBlockEnd(tail),
	BasicBlockHead(tail, pred),
	MaySuccessorBBModuloThrow(insn, pred).

// does the first one have *some* access path points-to info, or is irrelevant
MustAliasUpToRelevantPredecessor(pred, ap1, ap2, ctx, insn) <-
	MustAliasAtPredecessor(pred, ap1, ap2, ctx, insn),
	!ExistsPreviousPredecessorToSameBB(pred, insn).

MustAliasUpToRelevantPredecessor(pred, ap1, ap2, ctx, insn) <-
	MustAliasAtPredecessor(_, ap1, ap2, ctx, insn),
	!ExistsPreviousPredecessorToSameBB(pred, insn),
	AccessPathUnaffectedByPredecessorBB(ap1, pred),
	AccessPathUnaffectedByPredecessorBB(ap2, pred).

MustAliasUpToRelevantPredecessor(pred, ap1, ap2, ctx, insn) <-
	MustAliasUpToRelevantPredecessor(prevPred, ap1, ap2, ctx, insn),
	NextPredecessorToSameBB(insn, prevPred, pred),
	(MustAliasAtPredecessor(pred, ap1, ap2, ctx, insn);
	 (AccessPathUnaffectedByPredecessorBB(ap1, pred),
	  AccessPathUnaffectedByPredecessorBB(ap2, pred))).

AllRelevantPredecessorsMustAlias(ap1, ap2, ctx, insn) <-
	MustAliasUpToRelevantPredecessor(pred, ap1, ap2, ctx, insn),
	!NextPredecessorToSameBB(insn, pred, _),
	!ExceptionHandlerFirstInstruction(insn).

// Algebraic rules

// MustAlias is symmetrically and transitively closed. The explicit
// representation (and computation of TC) is too wasteful, but
// hopefully won't matter since this is an intra-procedural concept.
MustAlias(ap1, ap2, ctx, insn) <-
	MustAlias(ap2, ap1, ctx, insn).

MustAlias(ap1, ap2, ctx, insn) <-
	MustAlias(ap1, ap3, ctx, insn),
	MustAlias(ap2, ap3, ctx, insn).

// // Key rule. Extend access paths, if aliased one has extension,
// // establish aliasing.
// MustAlias(ap3, ap, ctx, insn) <-
//    _OptMustAlias(ctx, insn, ap2, ap1),
//    AccessPath_ByFieldAccess(fld, ap1, ap3),
//    _ExpandedAccessPath(fld, ap2, ap).

// MustAliasSomewhere(ap2, ap1) <-
//    MustAlias(ap2, ap1, _, _).

// // Place an order to the AP factory.
// AccessPathShouldBeExpanded(fld, ap2) <-
//    MustAliasSomewhere(ap2, ap1),
//    AccessPath_ByFieldAccess(fld, ap1, _),
//    AccessPath_Length(ap2, len2),
//    len2 < maxLen,
//    AccessPath_MaxLength(maxLen).



// // Now method calls. Painstaking.
// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    SingleFieldAccessPath(fld, ap1),
//    AccessPath_IsVariable(ap2),
//    May_MustCallGraphEdge_ToMethod(ctx, insn, toMethod),
//    !MethodMayAssignField(fld, toMethod),
//    !MethodHasUnresolvedInvocation(toMethod).

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    SingleFieldAccessPath(fld1, ap1),
//    SingleFieldAccessPath(fld2, ap2),
//    May_MustCallGraphEdge_ToMethod(ctx, insn, toMethod),
//    !MethodMayAssignField(fld1, toMethod),
//    !MethodMayAssignField(fld2, toMethod),
//    !MethodHasUnresolvedInvocation(toMethod).

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    _DoubleFieldAccessPath(fld1, fld2, ap1),
//    AccessPath_IsVariable(ap2),
//    May_MustCallGraphEdge_ToMethod(ctx, insn, toMethod),
//    !MethodMayAssignField(fld1, toMethod),
//    !MethodMayAssignField(fld2, toMethod),
//    !MethodHasUnresolvedInvocation(toMethod).

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    _DoubleFieldAccessPath(fld1, fld2, ap1),
//    SingleFieldAccessPath(fld3, ap2),
//    May_MustCallGraphEdge_ToMethod(ctx, insn, toMethod),
//    !MethodMayAssignField(fld1, toMethod),
//    !MethodMayAssignField(fld2, toMethod),
//    !MethodMayAssignField(fld3, toMethod),
//    !MethodHasUnresolvedInvocation(toMethod).

// MustAlias(ap2, ap1, ctx, insn) <-
//    OptBeforeMustAlias(ctx, insn, ap2, ap1),
//    _DoubleFieldAccessPath(fld1, fld2, ap1),
//    _DoubleFieldAccessPath(fld3, fld4, ap2),
//    May_MustCallGraphEdge_ToMethod(ctx, insn, toMethod),
//    !MethodMayAssignField(fld1, toMethod),
//    !MethodMayAssignField(fld2, toMethod),
//    !MethodMayAssignField(fld3, toMethod),
//    !MethodMayAssignField(fld4, toMethod),
//    !MethodHasUnresolvedInvocation(toMethod).



// // *MustAlias*
// // Access path expansion factory. Trivial but avoids repeat expensive
// // access path creation.
// AccessPath(newAp),
// AccessPath_ByFieldAccess(fld, ap, newAp),
// AccessPath_Length(newAp, len) + 1,
// _ExpandedAccessPath(fld, ap, newAp) <-
//    AccessPathShouldBeExpanded(fld, ap),
//    AccessPath_Length(ap, len).


// // limited to access paths that should be compared
// CompositeAccessPath_SameFields(ap1, ap2) <-
//    AccessPathsShouldBeCompared(ap1, ap2),
//    AccessPath_LastField(ap1, AccessPath_LastField)[ap2],
//    AccessPath_IsVariable(AccessPath_Base[ap1]),
//    AccessPath_IsVariable(AccessPath_Base[ap2]).

// CompositeAccessPath_SameFields(ap1, ap2) <-
//    AccessPathsShouldBeCompared(ap1, ap2),
//    AccessPath_ByCollectionVarInv(ap1, _),
//    AccessPath_ByCollectionVarInv(ap2, _).

// CompositeAccessPath_SameFields(ap1, ap2) <-
//    CompositeAccessPath_SameFields(baseAp1, baseAp2),
//    AccessPath_ByFieldAccess(fld, baseAp1, ap1),
//    AccessPath_ByColleFieldAccess(fld, baseAp2, ap2).
}
