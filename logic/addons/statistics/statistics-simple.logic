// Horrible hack, really (TODO: generalize and clean up). Just for
// now. Redefines the meaning of VarPointsTo for this file, to
// collapse for analyses that simultaneously compute multiple results
// and need to combine them.
#ifdef MULTIPLE_SEGREGATED_ANALYSES
#define VarPointsTo(hctx, heap, ctx, var) CollapsedVarPointsTo(hctx, heap, ctx, var)
#endif // MULTIPLE_SEGREGATED_ANALYSES

#include "macros.logic"

/***************************************************
 * Variables
 ***************************************************/
Stats:Simple:InsensVarPointsTo(?value, ?var) <- VarPointsTo(_, ?value, _, ?var).

Stats:Simple:AssignedVariable(?var) <- Stats:Simple:InsensVarPointsTo(_, ?var).

Stats:Simple:Application:InsensVarPointsTo(?value, ?var),
Stats:Simple:Application:VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
   VarPointsTo(?hctx, ?value, ?ctx, ?var),
   ApplicationVar(?var).

Stats:Simple:InsensReachableVar(?var),
Stats:Simple:ReachableVar(?ctx, ?var) <-
   ReachableContext(?ctx, ?method), Var:DeclaringMethod(?var, ?method),
   Stats:Simple:AssignedVariable(?var).

#ifdef TRANSFORM_INPUT
// Example of post-processing of set-based transform results for client analyses
// that need it.
Stats:Simple:InsensVarPointsTo(?value, ?var) <-
   VarPointsTo(_, ?value, _, ?var2), DupCopies(?var, ?var2).
#endif



/***************************************************
 * Arrays
 ***************************************************/
Stats:Simple:InsensArrayIndexPointsTo(?value, ?basevalue) <-
   ArrayIndexPointsTo(_, ?value, _, ?basevalue).

Stats:Simple:Application:InsensArrayIndexPointsTo(?value, ?basevalue),
Stats:Simple:Application:ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue) <-
   ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue),
   AssignNormalHeapAllocation(?baseheap, _, ?meth), ApplicationMethod(?meth),
   Value:byHeap[?baseheap] = ?basevalue.

/***************************************************
 * Fields
 ***************************************************/
Stats:Simple:InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue) <-
   InstanceFieldPointsTo(_, ?value, ?sig, _, ?basevalue).

Stats:Simple:InsensStaticFieldPointsTo(?value, ?sig) <-
   StaticFieldPointsTo(_, ?value, ?sig).

Stats:Simple:Application:InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue),
Stats:Simple:Application:InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue) <-
   InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue),
   AssignNormalHeapAllocation(?baseheap, _, ?meth), ApplicationMethod(?meth),
   Value:byHeap[?baseheap] = ?basevalue.

/***************************************************
 * Call graph edges
 ***************************************************/
Stats:Simple:InsensCallGraphEdge(?from, ?to) <-
   CallGraphEdge(_, ?from, _, ?to).

Stats:Simple:VirtualCallGraphEdge(?from, ?to) <-
   Stats:Simple:ReachableVirtualMethodInvocation(?from),
   Stats:Simple:InsensCallGraphEdge(?from, ?to).


/***************************************************
 * Application methods
 ***************************************************/
Stats:Simple:InsensReachableApplicationMethod(?method),
Stats:Simple:ReachableApplicationMethod(?ctx, ?method) <-
	 ReachableContext(?ctx, ?method),
	 ApplicationMethod(?method).

Stats:Simple:ApplicationConcreteMethod(?method) <-
   ApplicationMethod(?method),
   ! Method:Modifier(?abstract, ?method),
   Modifier:Id(?abstract:"abstract").

Stats:Simple:NonReachableApplicationConcreteMethod(?method) <-
   Stats:Simple:ApplicationConcreteMethod(?method),
   ! Stats:Simple:InsensReachableApplicationMethod(?method).

/***************************************************
 * Virtual method invocations
 ***************************************************/
Stats:Simple:ReachableVirtualMethodInvocation(?invocation) <-
   Reachable(?method),
   VirtualMethodInvocation:Insn(?invocation),
   Instruction:Method[?invocation] = ?method.

Stats:Simple:Application:ReachableVirtualMethodInvocation(?invocation) <-
   Stats:Simple:InsensReachableApplicationMethod(?method),
   VirtualMethodInvocation:Insn(?invocation),
   Instruction:Method[?invocation] = ?method.

Stats:Simple:VirtualTargets[?from] = ?c <-
   agg<<?c = count()>>(Stats:Simple:VirtualCallGraphEdge(?from, _)).

Stats:Simple:PolymorphicCallSite(?from) <-
   Stats:Simple:VirtualTargets[?from] = ?size, ?size > 1.

Stats:Simple:NullVirtualMethodInvocation(?invocation) <-
   Stats:Simple:ReachableVirtualMethodInvocation(?invocation),
   VirtualMethodInvocation:Base[?invocation] = ?base,
   Stats:Simple:InsensVarPointsTo(Value:Null[], ?base).

Stats:Simple:EmptyVirtualMethodInvocation(?invocation) <-
   Stats:Simple:ReachableVirtualMethodInvocation(?invocation),
   VirtualMethodInvocation:Base[?invocation] = ?base,
   !(Stats:Simple:InsensVarPointsTo(_, ?base)).

Stats:Simple:Application:VirtualMethodInvocation(?invocation) <-
   ApplicationMethod(?method),
   VirtualMethodInvocation:Insn(?invocation),
   Instruction:Method[?invocation] = ?method.

Stats:Simple:Application:PolymorphicCallSite(?from) <-
   Stats:Simple:PolymorphicCallSite(?from),
   Stats:Simple:Application:ReachableVirtualMethodInvocation(?from).

Stats:Simple:Application:NullVirtualMethodInvocation(?invocation) <-
   Stats:Simple:Application:ReachableVirtualMethodInvocation(?invocation),
   VirtualMethodInvocation:Base[?invocation] = ?base,
   Stats:Simple:InsensVarPointsTo(Value:Null[], ?base).

Stats:Simple:Application:EmptyVirtualMethodInvocation(?invocation) <-
   Stats:Simple:Application:ReachableVirtualMethodInvocation(?invocation),
   VirtualMethodInvocation:Base[?invocation] = ?base,
   !(Stats:Simple:InsensVarPointsTo(_, ?base)).

/***************************************************
 * Casts
 ***************************************************/
Stats:Simple:ReachableCast(?inmethod, ?type, ?to, ?from) <-
   Reachable(?inmethod), AssignCast(?type, ?from, ?to, ?inmethod),
   Stats:Simple:AssignedVariable(?from).

Stats:Simple:PotentiallyFailingCast(?type, ?from, ?to) <-
   Stats:Simple:ReachableCast(_, ?type, ?to, ?from),
   Stats:Simple:InsensVarPointsTo(?value, ?from),
   Value:Type[?value] = ?valuetype,
   !SupertypeOf(?type, ?valuetype).

Stats:Simple:Application:Cast(?type, ?from, ?to, ?inmethod) <-
   AssignCast(?type, ?from, ?to, ?inmethod), ApplicationMethod(?inmethod).

Stats:Simple:Application:ReachableCast(?inmethod, ?type, ?to, ?from) <-
   Stats:Simple:ReachableCast(?inmethod, ?type, ?to, ?from),
   ApplicationMethod(?inmethod).

Stats:Simple:Application:ReachableMethod(?method) <-
   Reachable(?method),
   ApplicationMethod(?method).

Stats:Simple:Application:PotentiallyFailingCast(?type, ?from, ?to) <-
   Stats:Simple:Application:ReachableCast(_, ?type, ?to, ?from),
   Stats:Simple:InsensVarPointsTo(?value, ?from),
   Value:Type[?value] = ?valuetype,
   !SupertypeOf(?type, ?valuetype).

/***************************************************
 * Reflection
 ***************************************************/
#if defined(REFLECTION)
Stats:Simple:Reflection:InsensArrayIndexPointsTo(?value, ?basevalue),
Stats:Simple:Reflection:ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue) <-
   ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue),
   ReflectiveValue(?value).

Stats:Simple:Reflection:InsensVarPointsTo(?value, ?var),
Stats:Simple:Reflection:VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
   VarPointsTo(?hctx, ?value, ?ctx, ?var),
   ReflectiveValue(?value).

Stats:Simple:Reflection:InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue),
Stats:Simple:Reflection:InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue) <-
   InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue),
   ReflectiveValue(?value).

Stats:Simple:forName(?invocation) <-
   java:lang:Class:forName(?invocation, ?inmethod), Reachable(?inmethod).

Stats:Simple:Class:newInstance(?invocation) <-
   java:lang:Class:newInstance(?invocation, _, ?from),
   Var:DeclaringMethod(?from, ?inmethod), Reachable(?inmethod).

Stats:Simple:Constructor:newInstance(?invocation) <-
   java:lang:reflect:Constructor:newInstance(?invocation, _, ?from),
   Var:DeclaringMethod(?from, ?inmethod), Reachable(?inmethod).

NewMetricMacro(30.0, _t05, "var points-to (to a reflective value) (INS)", Stats:Simple:Reflection:InsensVarPointsTo(_, _)).
NewMetricMacro(30.5, _t06, "var points-to (to a reflective value) (SENS)", Stats:Simple:Reflection:VarPointsTo(_, _, _, _)).
NewMetricMacro(31.0, _t13, "array index points-to (to a reflective value) (INS)", Stats:Simple:Reflection:InsensArrayIndexPointsTo(_, _)).
NewMetricMacro(31.5, _t14, "array index points-to (to a reflective value) (SENS)", Stats:Simple:Reflection:ArrayIndexPointsTo(_, _, _, _)).
NewMetricMacro(32.0, _t21, "instance field points-to (to a reflective value) (INS)", Stats:Simple:Reflection:InsensInstanceFieldPointsTo(_, _, _)).
NewMetricMacro(32.5, _t22, "instance field points-to (to a reflective value) (SENS)", Stats:Simple:Reflection:InstanceFieldPointsTo(_, _, _, _, _)).
NewMetricMacro(35.0, _t42, "reachable 'forName' (INS)", Stats:Simple:forName(_)).
NewMetricMacro(36.0, _t43, "reachable 'Class.newInstance' (INS)", Stats:Simple:Class:newInstance(_)).
NewMetricMacro(37.0, _t44, "reachable 'Constructor.newInstance' (INS)", Stats:Simple:Constructor:newInstance(_)).

// String coloring metrics
#ifdef GROUP_REFLECTION_STRINGS
// Number of colors
NewMetricMacro(37.1, _t441, "string colors", StringRepresentativeForColor[_]=_).
#endif
 
 // reflection string constant var points-to
Stats:Simple:Reflection:StringVarPointsTo(?hctx, ?value, ?ctx, ?var) <-
   VarPointsTo(?hctx, ?value, ?ctx, ?var),
   Value:Type[?value] = "java.lang.String".

NewMetricMacro(37.2, _t442, "string var points-to", Stats:Simple:Reflection:StringVarPointsTo(_,_,_,_)).

#endif

/***************************************************/
NewMetricMacro( 1.0, _t01, "var points-to (INS)", Stats:Simple:InsensVarPointsTo(_, _)).
NewMetricMacro( 1.5, _t02, "var points-to (SENS)", VarPointsTo(_, _, _, _)).
NewMetricMacro( 5.0, _t03, "app var points-to (INS)", Stats:Simple:Application:InsensVarPointsTo(_, _)).
NewMetricMacro( 5.5, _t04, "app var points-to (SENS)", Stats:Simple:Application:VarPointsTo(_, _, _, _)).
NewMetricMacro(10.0, _t07, "reachable variables (INS)", Stats:Simple:InsensReachableVar(_)).
NewMetricMacro(10.5, _t08, "reachable variables (SENS)", Stats:Simple:ReachableVar(_, _)).

NewMetricMacro( 2.0, _t09, "array index points-to (INS)", Stats:Simple:InsensArrayIndexPointsTo(_, _)).
NewMetricMacro( 2.5, _t10, "array index points-to (SENS)", ArrayIndexPointsTo(_, _, _, _)).
NewMetricMacro( 6.0, _t11, "app array index points-to (INS)", Stats:Simple:Application:InsensArrayIndexPointsTo(_, _)).
NewMetricMacro( 6.5, _t12, "app array index points-to (SENS)", Stats:Simple:Application:ArrayIndexPointsTo(_, _, _, _)).

NewMetricMacro( 3.0, _t15, "instance field points-to (INS)", Stats:Simple:InsensInstanceFieldPointsTo(_, _, _)).
NewMetricMacro( 3.5, _t16, "instance field points-to (SENS)", InstanceFieldPointsTo(_, _, _, _, _)).
NewMetricMacro( 4.0, _t17, "static field points-to (INS)", Stats:Simple:InsensStaticFieldPointsTo(_, _)).
NewMetricMacro( 4.5, _t18, "static field points-to (SENS)", StaticFieldPointsTo(_, _, _)).
NewMetricMacro( 7.0, _t19, "app instance field points-to (INS)", Stats:Simple:Application:InsensInstanceFieldPointsTo(_, _, _)).
NewMetricMacro( 7.5, _t20, "app instance field points-to (SENS)", Stats:Simple:Application:InstanceFieldPointsTo(_, _, _, _, _)).

NewMetricMacro( 8.0, _t23, "call graph edges (INS)", Stats:Simple:InsensCallGraphEdge(_, _)).
NewMetricMacro( 8.5, _t24, "call graph edges (SENS)", CallGraphEdge(_, _, _, _)).
NewMetricMacro( 9.0, _t25, "non-reachable app concrete methods", Stats:Simple:NonReachableApplicationConcreteMethod(_)).
NewMetricMacro(11.0, _t26, "reachable methods (INS)", Reachable(_)).
NewMetricMacro(11.5, _t27, "reachable methods (SENS)", ReachableContext(_, _)).

NewMetricMacro(12.0, _t28, "virtual call sites (statically)", VirtualMethodInvocation:Insn(_)).
NewMetricMacro(13.0, _t29, "reachable virtual call sites", Stats:Simple:ReachableVirtualMethodInvocation(_)).
NewMetricMacro(14.0, _t30, "polymorphic virtual call sites", Stats:Simple:PolymorphicCallSite(_)).
NewMetricMacro(15.0, _t49, "null virtual call sites", Stats:Simple:NullVirtualMethodInvocation(_)).
NewMetricMacro(15.5, _t31, "empty virtual call sites", Stats:Simple:EmptyVirtualMethodInvocation(_)).
NewMetricMacro(16.0, _t32, "app virtual call sites (statically)", Stats:Simple:Application:VirtualMethodInvocation(_)).
NewMetricMacro(17.0, _t33, "app reachable virtual call sites", Stats:Simple:Application:ReachableVirtualMethodInvocation(_)).
NewMetricMacro(18.0, _t34, "app polymorphic virtual call sites", Stats:Simple:Application:PolymorphicCallSite(_)).
NewMetricMacro(19.0, _t50, "app null virtual call sites", Stats:Simple:Application:NullVirtualMethodInvocation(_)).
NewMetricMacro(19.5, _t35, "app empty virtual call sites", Stats:Simple:Application:EmptyVirtualMethodInvocation(_)).

NewMetricMacro(20.0, _t36, "casts (statically)", AssignCast(_, _, _, _)).
NewMetricMacro(21.0, _t37, "reachable casts", Stats:Simple:ReachableCast(_, _, _, _)).
NewMetricMacro(22.0, _t38, "reachable casts that may fail", Stats:Simple:PotentiallyFailingCast(_, _, _)).
NewMetricMacro(23.0, _t39, "app casts (statically)", Stats:Simple:Application:Cast(_, _, _, _)).
NewMetricMacro(24.0, _t40, "app reachable casts", Stats:Simple:Application:ReachableCast(_, _, _, _)).
NewMetricMacro(25.0, _t41, "app reachable casts that may fail", Stats:Simple:Application:PotentiallyFailingCast(_, _, _)).
NewMetricMacro(25.5, _t47, "app reachable methods", Stats:Simple:Application:ReachableMethod(_)).

//NewMetricMacro(50.0, _t47, "call sites that did (not) get refined", SiteToRefine(_)).
//NewMetricMacro(51.0, _t48, "allocation sites that did (not) get refined", ValueToRefine(_)).

#ifdef INFORMATION_FLOW
Stats:Simple:InsensTaintedVarPointsTo(?value, ?var) <- TaintedVarPointsTo(?value, _, ?var).

Stats:Simple:Application:InsensTaintedVarPointsTo(?value, ?var),
Stats:Simple:Application:TaintedVarPointsTo(?value, ?ctx, ?var) <-
   TaintedVarPointsTo(?value, ?ctx, ?var),
   Var:DeclaringMethod(?var, ?meth), ApplicationMethod(?meth).

Stats:Simple:LeakingTaintedInformation(?invocation, ?objStr) <- LeakingTaintedInformation(_, _, _, ?invocation, ?objStr).

Stats:Simple:OriginalTaintedValue(?id) <- SourceFromTaintedValue[_] = ?id.

NewMetricMacro(40.0, _t60, "tainted flows-to (INS)", Stats:Simple:InsensTaintedVarPointsTo(_, _)).
NewMetricMacro(40.5, _t61, "tainted flows-to (SENS)", TaintedVarPointsTo(_, _, _)).
NewMetricMacro(41.0, _t62, "app tainted flows-to (INS)", Stats:Simple:Application:InsensTaintedVarPointsTo(_, _)).
NewMetricMacro(41.5, _t63, "app tainted flows-to (SENS)", Stats:Simple:Application:TaintedVarPointsTo(_, _, _)).
NewMetricMacro(42.0, _t64, "total tainted values", TaintedValue(_)).
NewMetricMacro(43.0, _t65, "original tainted values", Stats:Simple:OriginalTaintedValue(_)).
NewMetricMacro(44.0, _t66, "sink variables (SENS)", LeakingSinkVariable(_, _, _, _)).
NewMetricMacro(45.0, _t67, "total leaks", Stats:Simple:LeakingTaintedInformation(_, _)).
#endif

#ifdef OPEN_PROGRAMS
//Stats:Simple:ReachableFromEntryPoint(?method) <- MockReachableContext(_, ?method).

NewMetricMacro(60.0, _t70, "Entry Points", EntryPoint(_)).
NewMetricMacro(61.0, _t71, "Mock Objects", MockObject(_, _)).
NewMetricMacro(61.1, _t72, "Mock Objects for Receivers", MockObjFromEntryPoint(_)).
NewMetricMacro(61.2, _t73, "Mock Objects for Fields", MockObjFromField(_)).
NewMetricMacro(61.3, _t74, "Mock Objects for Arrays", MockObjFromArray(_)).
NewMetricMacro(61.4, _t75, "Mock Objects for Formals", MockObjFromFormal(_)).
//NewMetricMacro(62.0, _t76, "Methods Reachable from open entry points (SENS)", MockReachableContext(_,_)).
//NewMetricMacro(62.5, _t77, "Methods Reachable from open entry points (INS)", Stats:Simple:ReachableFromEntryPoint(_)).
#endif

#ifdef HEAPDL
NewMetricMacro(80.0, _t80, "Dynamic Heap Allocations (INS)", DynamicHeapAllocation(_,_)).
NewMetricMacro(81.0, _t81, "Dynamic Heap Object (SENS)", DynamicHeapObject(_,_)).
NewMetricMacro(82.0, _t82, "Unmatched Heap Allocations..", UnmatchedDynamicNormalHeapAllocation(_,_,_,_)).
NewMetricMacro(83.0, _t83, "..of which were reconstructed", ReconstructedUnmatchedDynamicHeapAllocation(_, _)).
NewMetricMacro(84.0, _t84, "Contexts", DynamicContext(_)).

NotLibraryHeapAllocation(?heap) <-
   !AssignNormalHeapAllocation(?heap, _, _),
   DynamicHeapAllocation(_, ?heap).
   

// Instance fields
Stats:Simple:InsensDynamicInstanceFieldPointsTo(?fld, ?heap, ?baseHeap) <- DynamicInstanceFieldPointsTo(?fld,_,?heap,_,?baseHeap).
NotLibraryHeapAllocation(?heap) <-
   AssignNormalHeapAllocation(?heap, _, ?meth),
   ApplicationMethod(?meth).

Stats:Simple:Application:InsensDynamicInstanceFieldPointsTo(?baseHeap, ?fld, ?heap) <-
   NotLibraryHeapAllocation(?heap),
   Stats:Simple:InsensDynamicInstanceFieldPointsTo(?fld, ?heap, ?baseHeap).

NewMetricMacro(85.0, _t85, "Dynamic instance field points-to (INS)", Stats:Simple:InsensDynamicInstanceFieldPointsTo(_,_,_)).
NewMetricMacro(86.0, _t86, "Dynamic instance field points-to (SENS)", DynamicInstanceFieldPointsTo(_,_,_,_,_)).

// Static fields
Stats:Simple:InsensDynamicStaticFieldPointsTo(?fld, ?heap) <- DynamicStaticFieldPointsTo(?fld,_,?heap).
Stats:Simple:Application:InsensDynamicStaticFieldPointsTo(?fld, ?heap) <-
   Stats:Simple:InsensDynamicStaticFieldPointsTo(?fld, ?heap),
   Field:DeclaringType[?fld] = ?cls,
   ApplicationClass(?cls).

NewMetricMacro(87.0, _t87, "Dynamic static field points-to (INS)", Stats:Simple:InsensDynamicStaticFieldPointsTo(_,_)).
NewMetricMacro(88.0, _t88, "Dynamic static field points-to (SENS)", DynamicStaticFieldPointsTo(_,_,_)).
NewMetricMacro(89.0, _t89, "App Dynamic static field points-to (INS)", Stats:Simple:Application:InsensDynamicStaticFieldPointsTo(_,_)).

// array index
Stats:Simple:InsensDynamicArrayIndexPointsTo(?heap, ?baseHeap) <- DynamicArrayIndexPointsTo(_,?heap,_,?baseHeap).
NewMetricMacro(90.0, _t90, "Dynamic array index points-to (INS)", Stats:Simple:InsensDynamicArrayIndexPointsTo(_,_)).
NewMetricMacro(91.0, _t91, "Dynamic array index points-to (SENS)", DynamicArrayIndexPointsTo(_,_,_,_)).

// call graph and reachability
Stats:Simple:Application:DynamicReachableMethod(?method) <-
   DynamicReachableMethod(?method),
   ApplicationMethod(?method).
Stats:Simple:InsensDynamicCallGraphEdge(?fromMeth, ?invocation, ?toMeth) <- MostPreciseDynamicCallGraphEdge(_,?toMeth,?invocation,_, ?fromMeth).
NewMetricMacro(92.0, _t92, "Dynamic call graph edges (INS)", Stats:Simple:InsensDynamicCallGraphEdge(_,_,_)).
NewMetricMacro(93.0, _t93, "Dynamic call graph edges (SENS)", MostPreciseDynamicCallGraphEdge(_,_,_,_,_)).
NewMetricMacro(94.0, _t94, "Dynamic reachable methods (INS)", DynamicReachableMethod(_)).
NewMetricMacro(95.0, _t95, "App Dynamic reachable methods (INS)", Stats:Simple:Application:DynamicReachableMethod(_)).
NewMetricMacro(96.0, _t96, "Unmatched dynamic reachable methods (INS)", UnmatchedDynamicReachableMethod(_)).
#endif 
