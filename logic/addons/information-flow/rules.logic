#include "macros.logic"

AnyMethodInvocation(?invocation, ?tomethod) <-
   StaticMethodInvocation(?invocation, ?tomethod, _).

AnyMethodInvocation(?invocation, ?tomethod) <-
   VirtualMethodInvocation(?invocation, ?tomethod, _).

AnyMethodInvocation(?invocation, ?tomethod) <-
   MethodInvocation:Signature[?invocation] = ?tomethod,
   SpecialMethodInvocation:Insn(?invocation).

AnyMethodInvocationOpt(?tomethod, ?invocation) <- AnyMethodInvocation(?invocation, ?tomethod).

VarUse(?from, ?insn) <- AssignOper:From(?insn, ?from).

TaintedVarTaintedFromVar(?toCtx, ?to, ?hctx, ?value, ?type) <-
   VarIsTaintedFromVar(?type, ?toCtx, ?to, ?fromCtx, ?from),
   TaintedVarPointsTo(?hctx, ?value, ?fromCtx, ?from).

TaintedValueTransferred(?value, ?type, ?newvalue),
VarPointsTo(?hctx, ?newvalue, ?toCtx, ?to) <-
  TaintedVarTaintedFromVar(?toCtx, ?to, ?hctx, ?value, ?type).

TaintedValueTransferred(?value, ?type, ?newvalue),
VarPointsTo(?hctx, ?newvalue, ?toCtx, ?to) <-
   VarIsTaintedFromValue(?type, ?hctx, ?value, ?toCtx, ?to).
   

CallTaintingMethod(?ctx, ?invocation) <-
   TaintSourceMethod(?tomethod),
   Instruction:Method[?invocation] = ?inmethod,
   ApplicationClass(Method:DeclaringType[?inmethod]),
   MethodInvocationInContext(?ctx, ?invocation, ?tomethod).

/**
 * Information flow through complex relations
 */
StringFactoryType(?type) <-
  Type:Id(?type:"java.lang.String") ;
  Type:Id(?type:"java.lang.StringBuffer") ;
  Type:Id(?type:"java.lang.StringBuilder").

StringFactoryVar(?var) <-
  Var:Type[?var] = ?type,
  StringFactoryType(?type).

StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var) <-
  VarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var),
  StringFactoryVar(?var).

Iaminterested6(?type, ?ctx, ?ret, ?ctx, ?param),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?param) <-
  Var:Type[?ret] = ?type,
  VirtualMethodInvocation:SimpleName[?invocation] = "append",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  ActualParam[0, ?invocation] = ?param,
  AssignReturnValue[?invocation] = ?ret.

Iaminterested10(?type, ?ctx, ?base, ?ctx, ?param),
VarIsTaintedFromVar(?type, ?ctx, ?base, ?ctx, ?param) <-
  Var:Type[?base] = ?type,
  VirtualMethodInvocation:SimpleName[?invocation] = "append",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  ActualParam[0, ?invocation] = ?param.


MethodReturningStringFactory(?tomethod) <-
  Method:ReturnType[?tomethod] = ?stringFactoryType,
  StringFactoryType(?stringFactoryType).

VirtualMethodInvocationOpt(?invocation, ?tomethod) <-
   VirtualMethodInvocation(?invocation, ?tomethod, _).

StringFactoryReturnInvocation(?invocation) <-
   VirtualMethodInvocationOpt(?invocation, ?tomethod),
   MethodReturningStringFactory(?tomethod).

VarIsTaintedFromVar(?type, ?ctx, ?var, ?ctx, ?var) -> Type(?type), Context(?ctx), Var(?var).

Iaminterested8(?type, ?ctx, ?ret, ?ctx, ?base),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base) <-
  Var:Type[?ret] = ?type,
  StringFactoryReturnInvocation(?invocation),
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  AssignReturnValue[?invocation] = ?ret.

VarIsTaintedFromValue(?type, ?hctx, ?value, ?ctx, ?var) -> Type(?type), HContext(?hctx), Value(?value), Context(?ctx), Var(?var).

Iaminterested(?componentType, ?basehctx, ?basevalue, ?ctx, ?to),
VarIsTaintedFromValue(?componentType, ?basehctx, ?basevalue, ?ctx, ?to) <-
   LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue),
   Value:Type[?basevalue] = ?arrayType,
   ComponentType[?arrayType] = ?componentType,
   TaintedValue(?basevalue).

Iaminterested7(?type, ?ctx, ?ret, ?ctx, ?base),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base) <-
   MethodInvocationInContext(?ctx, ?invocation, ?method),
   BaseToRetTaintTransferMethod(?method),
   MethodInvocation:Base[?invocation] = ?base,
   TypeForReturnValue(?type, ?ret, ?invocation).


MethodInvocationInfo(?invocation, ?type, ?ret) <-
  AnyMethodInvocationOpt(?method, ?invocation),
  Method:ReturnType[?method] = ?type,
  AssignReturnValue[?invocation] = ?ret.

VarIsCast(?var) <- AssignCast(_, ?var, _, _).

TypeForReturnValue(?type, ?ret, ?invocation) <-
   MethodInvocationInfo(?invocation, _, ?ret),
   OptAssignCast(?type, _, ?ret).

TypeForReturnValue(?type, ?ret, ?invocation) <-
   MethodInvocationInfo(?invocation, ?type, ?ret),
   !VarIsCast(?ret).

ValueTaintedFromValue(?newvalue, ?hctx, ?baseObj) <- 
   BaseValueTaintedFromParamValue(?newvalue, ?hctx, ?baseObj),
   ?newvalue != ?baseObj.

VarPointsTo(?hctx, ?newvalue, ?ctx, ?var)
 <- 
   VarPointsToOpt(?ctx, ?var, ?hctx, ?existingvalue),
   ValueTaintedFromValue(?newvalue, ?hctx, ?existingvalue).

TaintTransferMethodInvocationInContext(?ctx, ?index, ?invocation) <-
  MethodInvocationInContext(?ctx, ?invocation, ?taintTransferMethod),
  ParamToBaseTaintTransferMethod(?index, ?taintTransferMethod).

ParamTaintTransferredToBase(?param, ?ctx, ?base) <-
  TaintTransferMethodInvocationInContext(?ctx, ?index, ?invocation),
  ActualParam[?index, ?invocation] = ?param,
  MethodInvocation:Base[?invocation] = ?base,
  !AssignReturnValue[?invocation] = _.

MethodInvocation:Base[?invocation] = ?base <-
  VirtualMethodInvocation:Base[?invocation] = ?base ;
  SpecialMethodInvocation:Base[?invocation] = ?base.

XYZ(?hctx, ?existingvalue, ?ctx, ?param) <-
  ParamTaintTransferredToBase(?param, ?ctx, ?base),
  VarPointsTo(?hctx, ?existingvalue, ?ctx, ?base).

TaintedValueTransferred(?value, ?type, ?newvalue),
BaseValueTaintedFromParamValue(?newvalue, ?existinghctx, ?existingvalue) <-
  Value:Type[?existingvalue] = ?type,
  TaintedVarPointsTo(_, ?value, ?ctx, ?param),
  XYZ(?existinghctx, ?existingvalue, ?ctx, ?param).


/**
 * Sanitization TODO
 */

MethodInvocationInContext(?ctx, ?invocation, ?tomethod) -> Context(?ctx), MethodInvocation(?invocation), Method(?tomethod).

// Option 1
#ifdef INFORMATION_FLOW_PRECISE_SOURCES_AND_SINKS
MethodInvocationInContext(?ctx, ?invocation, ?tomethod) <-
   CallGraphEdge(?ctx, ?invocation, _, ?tomethod).
#else
// Option 2

MethodInvocationInMethod(?tomethod, ?invocation, ?inmethod) <-
   AnyMethodInvocationOpt(?tomethod, ?invocation),
   Instruction:Method[?invocation] = ?inmethod.

MethodInvocationInContext(?ctx, ?invocation, ?tomethod) <-
   MethodInvocationInMethod(?tomethod, ?invocation, ?inmethod),
   ReachableContext(?ctx, ?inmethod).

#endif
 
/**
 * Sinks and leaks
 */
LeakingSinkVariable(?invocation, ?ctx, ?var) <-
  MethodInvocationInContext(?ctx, ?invocation, ?tomethod),
  LeakingSinkMethod(?index, ?tomethod),
  ActualParam[?index, ?invocation] = ?var.

LeakingTaintedInformation(?ctx, ?invocation, ?hctx, ?source) <-
  TaintedVarPointsTo(?hctx, ?value, ?ctx, ?var),
  LeakingSinkVariable(?invocation, ?ctx, ?var),
  SourceFromTaintedValue[?value] = ?source.

/**
 * Special Heap allocation on function call
 */
RecordMacro(?ctx, ?value, ?hctx),
TaintedValueIntroduced(?invocation, ?type, ?value),
VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
   CallTaintingMethod(?ctx, ?invocation),
   TypeForReturnValue(?type, ?to, ?invocation).

TaintedVarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  VarPointsToOpt(?ctx, ?var, ?hctx, ?value),
  TaintedValue(?value).

VarPointsToOpt(?ctx, ?var, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?ctx, ?var).
