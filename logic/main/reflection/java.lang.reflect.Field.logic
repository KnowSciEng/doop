/*************************************************************
 * java.lang.reflect.Field.get
 *
 *   public Object get(Object obj)
 * 
 * If the underlying field is a static field, the obj argument is ignored; it
 * may be null.  Otherwise, the underlying field is an instance field. If the
 * specified obj argument is null, the method throws a NullPointerException.
 *
 * If the underlying field is static, the class that declared the field is
 * initialized if it has not already been initialized.
 *************************************************************/

// Reflective load of a field (static or instance)
ReflectiveLoadField(?invocation, ?ctx, ?to, ?signature) <-
  java:lang:reflect:Field:get(?invocation, ?to, ?field),
  VarPointsTo(_, ?fieldValue, ?ctx, ?field),
  ReifiedField[?signature] = ?fieldValue.

// Load of a static field
// TODO Check if class initialization handled by reflective.logic
ReflectiveLoadStaticField(?ctx, ?to, ?signature) <-
  ReflectiveLoadField(_, ?ctx, ?to, ?signature),
  Field:Modifier("static", ?signature).

// Load of an instance field
ReflectiveLoadInstanceField(?ctx, ?to, ?signature, ?ctx, ?base) <-
  ReflectiveLoadField(?invocation, ?ctx, ?to, ?signature),
  ! Field:Modifier("static", ?signature),
  java:lang:reflect:Field:get:base[?invocation] = ?base.


/*************************************************************
 * java.lang.reflect.Field.set
 *
 *   public void set(Object obj, Object value)
 *
 * If the underlying field is a static field, the obj argument is ignored; it
 * may be null.  Otherwise, the underlying field is an instance field. If the
 * specified obj argument is null, the method throws a NullPointerException.
 *************************************************************/

// Reflective store of a field (static or instance)
ReflectiveStoreField(?invocation, ?signature, ?ctx, ?from) <-
  java:lang:reflect:Field:set(?invocation, ?from, ?field),
  VarPointsTo(_, ?fieldValue, ?ctx, ?field),
  ReifiedField[?signature] = ?fieldValue.

// Store of a static field
// TODO Check if class initialization handled by reflective.logic
ReflectiveStoreStaticField(?signature, ?ctx, ?from) <-
  ReflectiveStoreField(_, ?signature, ?ctx, ?from),
  Field:Modifier("static", ?signature).

// Store of an instance field
ReflectiveStoreInstanceField(?ctx, ?from, ?signature, ?ctx, ?base) <-
  ReflectiveStoreField(?invocation, ?signature, ?ctx, ?from),
  ! Field:Modifier("static", ?signature),
  java:lang:reflect:Field:set:base[?invocation] = ?base.
