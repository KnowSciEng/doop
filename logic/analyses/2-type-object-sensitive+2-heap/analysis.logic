// In this analysis, the real context and the real heap context are a Type and
// a Value. Keeping mapping functions is the way to handle analyses
// where HContext = Context (since the language considers them different
// types).
ContextFromRealContext[?type, ?value] = ?ctx ->
  Context(?ctx), Type(?type), Value(?value).
lang:constructor(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?type ->
  Context(?ctx), Type(?type).
RealContext2FromContext[?ctx] = ?value ->
  Context(?ctx), Value(?value).
RealContext1FromContext[?ctx] = ?type,
RealContext2FromContext[?ctx] = ?value <-
  ContextFromRealContext[?type, ?value] = ?ctx.

HContextFromRealHContext[?type, ?value] = ?hctx ->
  HContext(?hctx), Type(?type), Value(?value).
lang:constructor(`HContextFromRealHContext).
RealHContext1FromHContext[?hctx] = ?type ->
  HContext(?hctx), Type(?type).
RealHContext2FromHContext[?hctx] = ?value ->
  HContext(?hctx), Value(?value).
RealHContext1FromHContext[?hctx] = ?type,
RealHContext2FromHContext[?hctx] = ?value <-
  HContextFromRealHContext[?type, ?value] = ?hctx.


// Merge optimization hack

// For this analysis, we only need two of the parameters that may influence the
// new context object.
MyMergeBasis(?hctx, ?value) <-
  MergeBasis(_, _, ?hctx, ?value).

// We create new context objects sparingly, because of the high cost.  We also
// cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[Value:DeclaringType[RealHContext2FromHContext[?hctx]], ?value] = ?calleeCtx,
CachedMerge[?hctx, ?value] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?value).
