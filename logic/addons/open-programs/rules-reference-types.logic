#include "macros.logic"
#include "common.logic"
#include "entry-points.logic"
 
StaticToActualType(?type, ?type) <- ReferenceType(?type).

MockObjectIntroduced(?class, ?value) <-
   ObjToMock(?class).

VirtualMethodInvocationSignature(?tomethod, ?callsite) <-
    VirtualMethodInvocation(?callsite, ?tomethod, _).

VirtualMethodInvocationOpt2(?callsite, ?tomethod, ?base) <-
  VirtualMethodInvocation:Base[?callsite] = ?base,
  VirtualMethodInvocationSignature(?tomethod, ?callsite).


// Overridable methods on tainted objects return tainted objects

VirtualMethodBasePointsTo(?ctx, ?callsite, ?tomethod, ?value) <-
  VirtualMethodInvocationOpt2(?callsite, ?tomethod, ?base),
  VarPointsTo(_, ?value, ?ctx, ?base).

MockObjectOpt(?type, ?value) <- MockObject(?value, ?type).

PotentialCallToExternalOverridableMethod(?ctx, ?valuetype, ?callsite) <-
  MockObjectOpt(?valuetype, ?value),
  VirtualMethodBasePointsTo(?ctx, ?callsite, _, ?value).

CallToMethodOfExternalInterface(?ctx, ?callsite, ?tomethod) <-
  VirtualMethodBasePointsTo(?ctx, ?callsite, ?tomethod, ?value),
  MockObjectOpt(?type, ?value),
  InterfaceType(?type).


VarPointsToExternalValueForType(?ctx, ?var, ?type) <-
  CallToMethodOfExternalInterface(?ctx, ?callsite, ?tomethod),
  ReturnVar(?retVar, ?tomethod),
  Var:Type(?retVar, ?type),
  AssignReturnValue(?callsite, ?var).

PossibleOverridableMethodByCallSite(?tomethod, ?valuetype, ?callsite) <-
  VirtualMethodInvocation:SimpleName(?callsite, ?simplename),
  VirtualMethodInvocation:Descriptor(?callsite, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?valuetype, ?tomethod),
  OverridableMethod(?valuetype, ?tomethod).

CallToExternalOverridableMethod(?callerCtx, ?callsite, ?tomethod) <-
  PotentialCallToExternalOverridableMethod(?callerCtx, ?valuetype, ?callsite),
  PossibleOverridableMethodByCallSite(?tomethod, ?valuetype, ?callsite).

VarPointsToExternalValueForType(?ctx, ?var, ?type) <-
  CallToExternalOverridableMethod(?ctx, ?callsite, ?tomethod),
  ReturnVar(?retVar, ?tomethod),
  Var:Type(?retVar, ?type),
  AssignReturnValue(?callsite, ?var).


/* Adds a tuple (value, var) when value is ExternalValue 
   and the type of value matches the type of var. 
*/
RecordMacro(?ctx, ?value, ?hctx),
VarPointsTo(?hctx, ?value, ?ctx, ?var) <- 
  VarPointsToExternalValueForType(?ctx, ?var, ?type),
  MockObject(?value, ?type).

/* Adds a tuple (value, var) to VarPointsTo even if the types 
  of value and var do not match,... but there is an assign-cast 
  and the type of value matches the cast type
*/
//RecordMacro(?ctx, ?value, ?hctx),
//VarPointsTo(?hctx, ?value, ?ctx, ?var) <- // TODO: fix 
//   VarPointsToExternalValueForType(?ctx, ?var, ?type),
//   CompatibleAssignCast(_, ?var, ?type2),
//   AssignCompatible(?type, ?type2),
//   MockObject(?value, ?type2).


OptAssignCast3(?to, ?from, ?castType) <- OptAssignCast(?castType, ?to, ?from).

OptCheckCast(?type, ?castType) <- CheckCast(?castType, ?type).

CompatibleAssignCast(?to, ?from, ?type) <-
   OptAssignCast3(?to, ?from, ?castType),
   OptCheckCast(?type, ?castType).
