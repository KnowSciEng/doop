MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem",
   ?type = "java.io.UnixFileSystem".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "java.io.UnixFileSystem.list/new java.lang.String[]",
   ?type = "java.lang.String[]".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "java.io.UnixFileSystem.list/new java.lang.String",
   ?type = "java.lang.String".


MockHeapConsMacro(?id, ?type, ?heap) <-
   (?id = "<<string-constant>>";
    ?id = "<<reflection-string-constant>>"),
   ?type = "java.lang.String".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<string-buffer>>",
   ?type = "java.lang.StringBuffer".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<string-builder>>",
   ?type = "java.lang.StringBuilder".

MockHeapConsMacro(?id, ?type, ?heap) <-
   (?id = "<<system-thread-group>>";
    ?id = "<<main-thread-group>>"),
   ?type = "java.lang.ThreadGroup".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<main-thread>>",
   ?type = "java.lang.Thread".

// Special heaps for contexts
// Note: the type is necessary (java.lang.Object), but never used. It could be
// anything. It also needs to be an existing type, otherwise the sanity checks
// will barf.
MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<initial-context>>",
   ?type = "java.lang.Object".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<jvm-startup-context>>",
   ?type = "java.lang.Object".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<jvm-startup-hcontext>>",
   ?type = "java.lang.Object".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<clinit-context>>",
   ?type = "java.lang.Object".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<immutable-context>>",
   ?type = "java.lang.Object".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<immutable-hcontext>>",
   ?type = "java.lang.Object".

MockHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<immutable>>",
   ?type = "java.lang.Object".
