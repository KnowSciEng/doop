/*************************************************************
 * MethodHandle constants
 *************************************************************/

HeapAllocation_ContextInsensitive(?heap) :-
   isMethodHandleConstant(?heap).

/****************** Generic invokedynamic ********************/

.decl ReachableInvokedynamic(?invokedynamic:DynamicMethodInvocation_Insn, ?dynName:symbol, ?dynRetType:Type, ?ctx:configuration.Context)
ReachableInvokedynamic(?invokedynamic, ?dynName, ?dynRetType, ?ctx) :-
   isDynamicMethodInvocation_Insn(?invokedynamic),
   Instruction_Method(?invokedynamic, ?inMethod),
   DynamicMethodInvocation_DynName(?invokedynamic, ?dynName),
   DynamicMethodInvocation_DynReturnType(?invokedynamic, ?dynRetType),
   ReachableContext(?ctx, ?inMethod).

.decl InvokedynamicBootCallGraphEdge(?callerCtx:configuration.Context, ?invokedynamic:DynamicMethodInvocation_Insn, ?calleeCtx:configuration.Context, ?bootMethod:Method)
InvokedynamicBootCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?bootMethod) :-
   ReachableInvokedynamic(?invokedynamic, _, _, ?callerCtx),
   DynamicMethodInvocation_Bootstrap(?invokedynamic, ?bootMethod),
   isImmutableContext(?calleeCtx).

ReachableContext(?calleeCtx, ?bootMethod) :-
   InvokedynamicBootCallGraphEdge(_, _, ?calleeCtx, ?bootMethod).

// Pass arguments to bootstrap methods. First three arguments are
// filled in by the JVM, so we fill them with mock objects.

#define MOCK_MH_LOOKUP "mock method handles lookup object"
#define MOCK_MT(retType, paramTypes) cat("mock method type ", cat(retType, paramTypes))

MockValueConsMacro(MOCK_MH_LOOKUP, "java.lang.invoke.MethodHandles$Lookup"),
VarPointsTo(?hctx, MOCK_MH_LOOKUP, ?ctx, ?caller),
MockValueConsMacro(?mockMethodType, "java.lang.invoke.MethodType"),
VarPointsTo(?hctx, ?mockMethodType, ?ctx, ?invokedTypeParam) :-
   InvokedynamicBootCallGraphEdge(_, ?invokedynamic, ?ctx, ?bootMethod),
   FormalParam(0, ?bootMethod, ?caller),
   FormalParam(2, ?bootMethod, ?invokedTypeParam),
   DynamicMethodInvocation_DynReturnType(?invokedynamic, ?dynRetType),
   DynamicMethodInvocation_DynParamTypes(?invokedynamic, ?dynParamTypes),
   ?mockMethodType = MOCK_MT(?dynRetType, ?dynParamTypes),
   isImmutableHContext(?hctx).

// The second-arg rule should only be enabled when strings are not merged.
#if defined(DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS) || defined(DISTINGUISH_ALL_STRING_CONSTANTS) || defined(NO_MERGES)
VarPointsTo(?hctx, ?invokedName, ?ctx, ?invokedNameParam) :-
   InvokedynamicBootCallGraphEdge(_, ?invokedynamic, ?ctx, ?bootMethod),
   isStringConstant(?invokedName),
   FormalParam(1, ?bootMethod, ?invokedNameParam),
   DynamicMethodInvocation_DynName(?invokedynamic, ?invokedName),
   isImmutableHContext(?hctx).
#endif // DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS || DISTINGUISH_ALL_STRING_CONSTANTS || NO_MERGES

// Helper method to compute the varargs accumulator formal of a method.
.decl MethodVarArgs(?method:Method, ?idx:number, ?formal:Var, ?type:ArrayType)
MethodVarArgs(?method, ?idx, ?formal, ?type) :-
   Method_Modifier("varargs", ?method),
   Method_Arity(?method, ?arity),
   ?idx = ?arity - 1,
   FormalParam(?idx, ?method, ?formal),
   Var_Type(?formal, ?type),
   isArrayType(?type).

// Use a mock array to fix calls to a bootstrap method accepting varargs.
#define MOCK_ARRAY(invokedynamic) cat("bootstrap varargs array for ", invokedynamic)

ArrayIndexPointsTo(?hctx, ?val, ?hctx, ?mockArray),
MockValueConsMacro(?mockArray, ?varArgsType),
VarPointsTo(?hctx, ?mockArray, ?calleeCtx, ?formalVarArgs) :-
   InvokedynamicBootCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?bootMethod),
   MethodVarArgs(?bootMethod, ?bootIdx, ?formalVarArgs, ?varArgsType),
   BootstrapParam(?idx, ?invokedynamic, ?actual),
   ?idx > ?bootIdx - 3,
   VarPointsTo(_, ?val, _, ?actual),
   isImmutableHContext(?hctx),
   ?mockArray = MOCK_ARRAY(?invokedynamic).

// Normal handling for the last three arguments of the bootstrap method, shifted.
VarPointsTo(?hctx, ?val, ?ctx, ?formal) :-
   InvokedynamicBootCallGraphEdge(_, ?invokedynamic, ?ctx, ?bootMethod),
   !Method_Modifier("varargs", ?bootMethod),
   FormalParam(?idx + 3, ?bootMethod, ?formal),
   BootstrapParam(?idx, ?invokedynamic, ?actual),
   VarPointsTo(_, ?val, _, ?actual),
   isImmutableHContext(?hctx).

.type CallSite = mainAnalysis.Value
.type LinkObject = mainAnalysis.Value
.decl InvokedynamicCallSite(?callsite:CallSite, ?invokedynamic:DynamicMethodInvocation_Insn, ?dynName:symbol, ?K:number, ?dynRetType:Type, ?linkObject:LinkObject)
.decl LinkObjectContexts(?hctx:configuration.HContext, ?linkObject:LinkObject, ?ctx:configuration.Context)

#define LINK_OBJECT(invokedynamic, type) \
   cat(invokedynamic, cat("::: ", cat(type, cat("::: (Mock)::: ", cat("link object of type ", type)))))

// Construct link object and record CallSite metadata.
MockValueConsMacro(?linkObject, ?dynRetType),
LinkObjectContexts(?hctx, ?linkObject, ?ctx),
InvokedynamicCallSite(?callsite, ?invokedynamic, ?dynName, ?K, ?dynRetType, ?linkObject) :-
   ReachableInvokedynamic(?invokedynamic, ?dynName, ?dynRetType, _),
   DynamicMethodInvocation_DynArity(?invokedynamic, ?K),
   DynamicMethodInvocation_Bootstrap(?invokedynamic, ?bootMethod),
   ReturnVar(?bootRetVar, ?bootMethod),
   VarPointsTo(?hctx, ?callsite, ?ctx, ?bootRetVar),
   ?linkObject = LINK_OBJECT(?invokedynamic, ?dynRetType).

// If the result of the invokedynamic instruction is assigned to a
// variable, use link object as return value.
VarPointsTo(?hctx, ?linkObject, ?ctx, ?var) :-
   InvokedynamicCallSite(_, ?invokedynamic, _, _, _, ?linkObject),
   AssignReturnValue(?invokedynamic, ?var),
   LinkObjectContexts(?hctx, ?linkObject, ?ctx).

.type MethodHandle = mainAnalysis.Value
.decl isMethodHandle(?methodHandle:MethodHandle)
.decl MethodHandle_Method(?methodHandle:MethodHandle, ?method:Method)

isMethodHandle(?methodHandle),
MethodHandle_Method(?methodHandle, ?method) :-
   MethodHandleConstant_Method(?methodHandle, ?method).

.decl LinkObject_MethodHandle(?linkObject:LinkObject, ?methodHandle:MethodHandle)
LinkObject_MethodHandle(?linkObject, ?methodHandle) :-
   InvokedynamicCallSite(?callsite, _, _, _, _, ?linkObject),
   InstanceFieldPointsTo(_, ?methodHandle, "<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>", _, ?callsite).

.decl LinkObject_Method(?linkObject:LinkObject, ?method:Method)
LinkObject_Method(?linkObject, ?method) :-
   LinkObject_MethodHandle(?linkObject, ?methodHandle),
   MethodHandle_Method(?methodHandle, ?method).

// Capture values of the enclosing environment.
.decl CallSiteCaptured(?callsite:CallSite, ?invokedynamic:DynamicMethodInvocation_Insn, ?val:Value, ?idx:number, ?ctx:configuration.Context)
CallSiteCaptured(?callsite, ?invokedynamic, ?val, ?idx, ?ctx) :-
   InvokedynamicCallSite(?callsite, ?invokedynamic, _, ?K, _, _),
   ?K > 0,
   ActualParam(?idx, ?invokedynamic, ?actual),
   VarPointsTo(_, ?val, ?ctx, ?actual).

// After a method handle is resolved, the invokedynamic calls it.
.decl InvokedynamicCallGraphEdge(?callerCtx:configuration.Context, ?i:MethodInvocation, ?calleeCtx:configuration.Context, ?m:Method, ?linkObject:LinkObject)
InvokedynamicCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?method, ?linkObject) :-
   InvokedynamicCallSite(_, ?invokedynamic, _, _, _, ?linkObject),
   LinkObject_Method(?linkObject, ?method),
   LinkObjectContexts(_, ?linkObject, ?callerCtx),
   isImmutableContext(?calleeCtx).

ReachableContext(?calleeCtx, ?callee) :-
   InvokedynamicCallGraphEdge(_, _, ?calleeCtx, ?callee, _).

// Handle return values for invokedynamic call-graph edges (either in
// the resolved invokedynamic call or later, in the case of lambdas).
VarPointsTo(?hctx, ?retVal, ?callerCtx, ?ret) :-
   InvokedynamicCallGraphEdge(?callerCtx, ?i, ?calleeCtx, ?method, _),
   ReturnVar(?realReturnVar, ?method),
   VarPointsTo(?hctx, ?retVal, ?calleeCtx, ?realReturnVar),
   AssignReturnValue(?i, ?ret).

/************** Lambda-specific invokedynamic ****************/

/** Phase 1: Linkage (creating a lambda CallSite) **/

#define LAMBDA_METAFACTORY "<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>"

#define LAMBDA_ALTMETAFACTORY "<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite altMetafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])>"

// Find invocations to the lambda metafactories.
.decl LambdaMetafactoryInvoke(?invokedynamic:DynamicMethodInvocation_Insn)
LambdaMetafactoryInvoke(?invokedynamic) :-
   DynamicMethodInvocation_Bootstrap(?invokedynamic, ?method),
   (?method = LAMBDA_METAFACTORY ; ?method = LAMBDA_ALTMETAFACTORY).

.decl ReachableLambdaMetafactoryInvoke(?invokedynamic:DynamicMethodInvocation_Insn)
ReachableLambdaMetafactoryInvoke(?invokedynamic) :-
   LambdaMetafactoryInvoke(?invokedynamic),
   ReachableInvokedynamic(?invokedynamic, _, _, _).

// Record invokedynamic invocations whose bootstrap methods are not
// handled at all. Used for statistics.
.decl UnhandledInvokedynamic(?invokedynamic:DynamicMethodInvocation_Insn, ?bootMethodId:symbol)

UnhandledInvokedynamic(?invokedynamic, ?bootMethodId) :-
   DynamicMethodInvocation_Bootstrap(?invokedynamic, ?bootMethodId),
   !LambdaMetafactoryInvoke(?invokedynamic).

#define LAMBDA_ALT_VAL(invo, ret, type, method, real, name) \
   cat(invo, cat("::: ", cat(ret, cat("::: (Mock)::: ", cat("reference ", cat(type, cat ("::", cat(method, cat(" from ", cat(real, cat(" wrapped as ", cat(ret, cat(".", name)))))))))))))

.decl LambdaCallSite(?callsite:CallSite, ?invokedynamic:DynamicMethodInvocation_Insn, ?linkObject:LinkObject, ?dynName:symbol, ?K:number, ?implMethod:Method, ?desc:symbol)

// Record more information about the link object to model the metafactory result.
LinkObject_MethodHandle(?linkObject, ?handleVal),
LambdaCallSite(?callsite, ?invokedynamic, ?linkObject, ?dynName, ?K, ?implMethod, ?desc) :-
   ReachableLambdaMetafactoryInvoke(?invokedynamic),
   InvokedynamicCallSite(?callsite, ?invokedynamic, ?dynName, ?K, ?dynRetType, ?linkObject),
   BootstrapParam(1, ?invokedynamic, ?handleVar),
   VarPointsTo(_, ?handleVal, _, ?handleVar),
   MethodHandleConstant_Method(?handleVal, ?implMethod),
   // Used to generate friendly description for the lambda.
   Method_SimpleName(?implMethod, ?handleMeth),
   Method_DeclaringType(?implMethod, ?handleType),
   ?desc = LAMBDA_ALT_VAL(?invokedynamic, ?dynRetType, ?handleType, ?handleMeth, ?implMethod, ?dynName).

// A helper filtering relation for metafactory bootstrap calls.

.decl InvokedynamicMetafactoryCallGraphEdge(?callerCtx:configuration.Context, ?invokedynamic:DynamicMethodInvocation_Insn, ?calleeCtx:configuration.Context, ?bootMethod:Method)
InvokedynamicMetafactoryCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?metafactory) :-
   ReachableLambdaMetafactoryInvoke(?invokedynamic),
   InvokedynamicBootCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?metafactory).

.decl Lambda_N(?lambda:LinkObject, ?N:number, ?samMethodType:Value)

Lambda_N(?lambda, ?N, ?val) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, _, ?metafactory),
   ?metafactory = LAMBDA_METAFACTORY,
   LambdaCallSite(_, ?invokedynamic, ?lambda, _, _, _, _),
   BootstrapParam(0, ?invokedynamic, ?actual),
   VarPointsTo(_, ?val, _, ?actual),
   _MethodTypeConstant(?val, ?N).

Lambda_N(?lambda, ?N, ?val) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, _, ?metafactory),
   ?metafactory = LAMBDA_ALTMETAFACTORY,
   LambdaCallSite(_, ?invokedynamic, ?lambda, _, _, _, _),
   ArrayIndexPointsTo(_, ?val, _, MOCK_ARRAY(?invokedynamic)),
   _MethodTypeConstant(?val, ?N).

/** Phase 2: Capture (invoke CallSite, return functional object) **/

/** Phase 3: Invocation (call method on the functional object) **/

// A boxing/unboxing conversion of types including the null type.
.decl BoxTypeConversion(?original:Type, ?new:Type)

BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(?t1, ?t2).
BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(?t1, _), isNullType(?t2).
BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(_, ?t2), isNullType(?t1).
BoxTypeConversion(?t1, ?t2) :- BoxTypeConversion(?t2, ?t1).

// Helper relation: instance methods implicitly consume one of the K
// arguments, while static methods take all K arguments before N ones.
.decl ImplMethodArgStart(?implMethod:Method, ?idx:number)
ImplMethodArgStart(?implMethod, 1) :-
   InvokedynamicCallGraphEdge(_, _, _, ?implMethod, _),
   ! Method_Modifier("static", ?implMethod).
ImplMethodArgStart(?implMethod, 0) :-
   InvokedynamicCallGraphEdge(_, _, _, ?implMethod, _),
   Method_Modifier("static", ?implMethod).

// Pass invocation arguments to the implementing method.
VarPointsTo(?hctx, ?val, ?ctx, ?formal) :-
   InvokedynamicCallGraphEdge(_, ?i, ?ctx, ?implMethod, ?lambda),
   ImplMethodArgStart(?implMethod, ?shift),
   LambdaCallSite(_, _, ?lambda, _, ?K, ?implMethod, _),
   FormalParam(?idx + ?K - ?shift, ?implMethod, ?formal),
   ActualParam(?idx, ?i, ?actual),
   VarPointsTo(_, ?val, _, ?actual),
   Value_Type(?val, ?valType),
   Var_Type(?formal, ?formalType),
   // Check type compatibility (spec: normal case/casting/(un)boxing).
   (basic.SubtypeOf(?valType, ?formalType);
    basic.SubtypeOf(?formalType, ?valType);
    BoxTypeConversion(?valType, ?formalType)),
   isImmutableHContext(?hctx).

// Pass captured arguments to the implementing method.
VarPointsTo(?hctx, ?val, ?ctx, ?formal) :-
   InvokedynamicCallGraphEdge(_, _, ?ctx, ?implMethod, ?lambda),
   ImplMethodArgStart(?implMethod, ?shift),
   LambdaCallSite(_, ?invokedynamic, ?lambda, _, ?K, ?implMethod, _),
   ?idx <= ?K - ?shift,
   CallSiteCaptured(_, ?invokedynamic, ?val, ?idx + ?shift, ?ctx),
   FormalParam(?idx, ?implMethod, ?formal),
   isImmutableHContext(?hctx).

// Special handling for captured "this" parameters.
VarPointsTo(?hctx, ?thisValue, ?ctx, ?this) :-
   InvokedynamicCallGraphEdge(_, _, ?ctx, ?implMethod, ?lambda),
   !Method_Modifier("static", ?implMethod),
   LambdaCallSite(_, ?invokedynamic, ?lambda, _, _, _, _),
   CallSiteCaptured(_, ?invokedynamic, ?thisValue, 0, ?ctx),
   ThisVar(?implMethod, ?this),
   isImmutableHContext(?hctx).

// Applications of constructor references construct values. However,
// these values do not come from a 'new' instruction in the code but
// are created here as mock values, one per type/invocation.
MockValueConsMacro(?mockObj, ?type),
VarPointsTo(?hctx, ?mockObj, ?ctx, ?var),
VarPointsTo(?hctx, ?mockObj, ?ctx, ?thisVar) :-
   InvokedynamicCallGraphEdge(_, ?i, ?ctx, ?implMethod, _),
   Method_SimpleName(?implMethod, "<init>"),
   Method_DeclaringType(?implMethod, ?type),
   AssignReturnValue(?i, ?var),
   ThisVar(?implMethod, ?thisVar),
   ?mockObj = cat("mock ", cat(?type, cat(" constructed by constructor reference at ", ?i))),
   isImmutableHContext(?hctx).

// Method handles that interact with reflection are exprerimental, use
// corresponding command-line option to enable them.
#ifdef REFLECTION_METHOD_HANDLES

// We treat method descriptors as MethodType values (with slight
// changes, e.g. in the treatment of 'void' or constructors).

.decl MethodType_ReturnType(?descriptor:symbol, ?declType:Type, ?rType:Type)

// Return types for non-constructors.
MethodType_ReturnType(?descriptor, ?declType, ?rType) :-
  Method_Descriptor(?method, ?descriptor),
  Method_ReturnType(?method, ?rType),
  Method_SimpleName(?method, ?name),
  ?name != "<clinit>",
  ?name != "<init>",
  Method_DeclaringType(?method, ?declType).

// Return types for constructors are not "void" but the type constructed.
MethodType_ReturnType(?descriptor, ?rType, ?rType) :-
  Method_Descriptor(?method, ?descriptor),
  Method_SimpleName(?method, "<init>"),
  Method_DeclaringType(?method, ?rType).

.decl MethodType_ParamType(?descriptor:symbol, ?index:number, ?pType:Type)

MethodType_ParamType(?descriptor, ?index, ?pType) :-
  Method_Descriptor(?method, ?descriptor),
  FormalParam(?index, ?method, ?var),
  _Var_Type(?var, ?pType).

#ifdef REFLECTION

// MethodType API entry points. The actual logic: every methodType()
// invocation picks all descriptors that match.

.decl ReachableMethodTypeN(?invo:MethodInvocation, ?caller:Method, ?callerCtx:configuration.Context)

ReachableMethodTypeN(?invo, ?caller, ?callerCtx) :-
   MTEntryPoint(_, ?invo, _),
   Instruction_Method(?invo, ?caller),
   ReachableContext(?callerCtx, ?caller).

.decl MT_ReturnType(?invo:MethodInvocation, ?type:Type)
.decl MT_ParamValue(?invo:MethodInvocation, ?index:number, ?classValue:Value)

// The first argument to methodType() is always the return type.
MT_ReturnType(?invo, ?type) :-
   ReachableMethodTypeN(?invo, _, _),
   ActualParam(0, ?invo, ?param),
   VarPointsTo(_, ?classValue, _, ?param),
   ReifiedClass(?type, ?classValue).

// MethodType2, MethodType4: second parameter.
MT_ParamValue(?invo, 0, ?classValue) :-
   ( MTEntryPoint(2, ?invo, _) ; MTEntryPoint(4, ?invo, _) ),
   Instruction_Method(?invo, ?caller),
   ReachableContext(_, ?caller),
   ActualParam(1, ?invo, ?param),
   VarPointsTo(_, ?classValue, _, ?param).

// MethodType1 lacks a parameter, so we use a dummy value instead.
#define MT_NOARGS_VALUE "<mock dummy methodType() class for first argument>"
MockValueConsMacro(MT_NOARGS_VALUE, "java.lang.Class"),
MT_ParamValue(?invo, 0, MT_NOARGS_VALUE) :-
   MTEntryPoint(1, ?invo, _).

// Helper relation to treat 'void' and 'java.lang.Void' as the same
// type in descriptors.
.decl MTReturnTypeMatchesDescriptor(?invo:MethodInvocation, ?descriptor:symbol)

MTReturnTypeMatchesDescriptor(?invo, ?descriptor) :-
   MT_ReturnType(?invo, "java.lang.Void"),
   MethodType_ReturnType(?descriptor, _, "void").
MTReturnTypeMatchesDescriptor(?invo, ?descriptor) :-
   MT_ReturnType(?invo, ?rType),
   MethodType_ReturnType(?descriptor, _, ?rType).

.decl Descriptor_Arity(?descriptor:symbol, ?arity:number)

Descriptor_Arity(?descriptor, ?arity) :-
  Method_Descriptor(?method, ?descriptor),
  Method_Arity(?method, ?arity).

.decl MTCallMatchesDescriptor(?invo:MethodInvocation, ?descriptor:symbol)

// MethodType1.
MTCallMatchesDescriptor(?invo, ?descriptor) :-
   MTEntryPoint(1, ?invo, _),
   MTReturnTypeMatchesDescriptor(?invo, ?descriptor),
   MT_ParamValue(?invo, 0, MT_NOARGS_VALUE),
   Descriptor_Arity(?descriptor, 0).

// MethodType2.
MTCallMatchesDescriptor(?invo, ?descriptor) :-
   MTEntryPoint(2, ?invo, _),
   MTReturnTypeMatchesDescriptor(?invo, ?descriptor),
   MT_ParamValue(?invo, 0, ?classValue0),
   ReifiedClass(?pType0, ?classValue0),
   MethodType_ParamType(?descriptor, 0, ?pType0),
   Descriptor_Arity(?descriptor, 1).

.decl MTValue_Descriptor(?mt:Value, ?descriptor:symbol)

#define MT_VALUE(desc) cat("<mock MethodType ", cat(desc, ">"))

// Make methodType() return special descriptors.
MockValueConsMacro(MT_VALUE(?descriptor), "java.lang.invoke.MethodType"),
MTValue_Descriptor(MT_VALUE(?descriptor), ?descriptor),
VarPointsTo(?hctx, MT_VALUE(?descriptor), ?callerCtx, ?ret) :-
   ReachableMethodTypeN(?invo, ?caller, ?callerCtx),
   MTCallMatchesDescriptor(?invo, ?descriptor),
   AssignReturnValue(?invo, ?ret),
   isImmutableHContext(?hctx).

// Method lookup methods.

.decl FindVirtual(?invo:MethodInvocation)

FindVirtual(?invo) :-
   MethodInvocation_Method(?invo, "<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>"),
   Instruction_Method(?invo, ?caller),
   ReachableContext(_, ?caller).

.decl FindStatic(?invo:MethodInvocation)

FindStatic(?invo) :-
   MethodInvocation_Method(?invo, "<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>"),
   Instruction_Method(?invo, ?caller),
   ReachableContext(_, ?caller).

// Lookup rules.

.decl MethodFinder(?invo:MethodInvocation, ?ret:Var)

MethodFinder(?invo, ?ret) :-
   ( FindStatic(?invo) ; FindVirtual(?invo) ),
   VirtualMethodInvocation_Base(?invo, ?lookup),
   VarPointsTo(_, ?baseVal, _, ?lookup),
   !Value_Null(?baseVal),
   AssignReturnValue(?invo, ?ret).

// Direct method handle lookup.
.decl DMHLookup(?type:Type, ?id:symbol, ?mt:Value, ?method:Method)

DMHLookup(?type, ?id, ?mt, ?method) :-
   Method_DeclaringType(?method, ?type),
   Method_SimpleName(?method, ?id),
   Method_Descriptor(?method, ?descriptor),
   MTValue_Descriptor(?mt, ?descriptor).

// Mock values for direct method handle lookup.
#define DMH(meth) cat("<direct method handle for ", cat(meth, ">"))

MockValueConsMacro(?dmh, "java.lang.invoke.MethodHandle"),
isMethodHandle(?dmh),
MethodHandle_Method(?dmh, ?method),
VarPointsTo(?hctx, ?dmh, ?ctx, ?ret) :-
   MethodFinder(?invo, ?ret),
   ActualParam(0, ?invo, ?classParam),
   VarPointsTo(?hctx, ?classValue, ?ctx, ?classParam),
   ReifiedClass(?type, ?classValue),
   ActualParam(1, ?invo, ?stringParam),
   VarPointsTo(_, ?id, _, ?stringParam),
   ActualParam(2, ?invo, ?mtParam),
   VarPointsTo(_, ?mt, _, ?mtParam),
   MHLookup(?type, ?id, ?mt, ?method).

#endif // REFLECTION
#endif // REFLECTION_METHOD_HANDLES
