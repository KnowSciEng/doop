// Compute and output the relations that are needed by Zipper.

.decl ArrayLoad(?to:Var, ?array:Value)
.output ArrayLoad(IO="file",filename="ARRAY_LOAD.csv",delimiter="\t")

ArrayLoad(?to, ?array) :- LoadHeapArrayIndex(_, ?to, _, ?array).


.decl ArrayStore(?array:Value, ?from:Var)
.output ArrayStore(IO="file",filename="ARRAY_STORE.csv",delimiter="\t")

ArrayStore(?array, ?from) :- StoreHeapArrayIndex(_, ?array, _, ?from).


.decl AllCallGraphEdge(?from:MethodInvocation, ?to:Method)
.output AllCallGraphEdge(IO="file",filename="CALL_EDGE.csv",delimiter="\t")

AllCallGraphEdge(?from, ?to) :- CallGraphEdge(_, ?from, _, ?to).

#ifdef REFLECTION
AllCallGraphEdge(?from, ?to) :- ReflectiveCallGraphEdge(_, ?from, _, ?to).
#endif

#ifdef TAMIFLEX
AllCallGraphEdge(?from, ?to) :- TamiflexCallGraphEdge(_, ?from, _, ?to).
#endif


.decl CallReturnTo(?recv:Var, ?to:Var)
.output CallReturnTo(IO="file",filename="CALL_RETURN_TO.csv",delimiter="\t")

CallReturnTo(?recv, ?to) :-
    OptVirtualMethodInvocationBase(?invo, ?recv),
    AssignReturnValue(?invo, ?to).


.decl CallSiteIn(?invo:MethodInvocation, ?method:Method)
.output CallSiteIn(IO="file",filename="CALLSITEIN.csv",delimiter="\t")

CallSiteIn(?invo, ?method) :-
    Reachable(?method),
    Instruction_Method(?invo, ?method),
    isMethodInvocation(?invo).


.output DirectSuperclass(IO="file",filename="DIRECT_SUPER_TYPE.csv",delimiter="\t")


.decl InstanceInvocationReceiver(?invo:MethodInvocation, ?recv:Var)
.output InstanceInvocationReceiver(IO="file",filename="INST_CALL_RECV.csv",delimiter="\t")

InstanceInvocationReceiver(?invo, ?recv) :-
    OptVirtualMethodInvocationBase(?invo, ?recv);
    OptSpecialMethodInvocationBase(?invo, ?recv).


.decl Instance_Method(?method:Method)
.output Instance_Method(IO="file",filename="INST_METHODS.csv",delimiter="\t")

.decl This_Var(?method:Method, ?var:Var)
.output This_Var(IO="file",filename="THIS_VAR.csv",delimiter="\t")

This_Var(?method, ?this),
Instance_Method(?method) :-
    Reachable(?method),
    ThisVar(?method, ?this).


.decl InstanceLoad(?to:Var, ?baseObj:Value, ?field:Field)
.output InstanceLoad(IO="file",filename="INSTANCE_LOAD.csv",delimiter="\t")

InstanceLoad(?to, ?baseObj, ?field) :-
    LoadHeapInstanceField(_, ?to, ?field, _, ?baseObj).


.decl InstanceStore(?baseObj:Value, ?field:Field, ?from:Var)
.output InstanceStore(IO="file",filename="INSTANCE_STORE.csv",delimiter="\t")

InstanceStore(?baseObj, ?field, ?from) :-
    StoreHeapInstanceField(?field, _, ?baseObj, _, ?from).


.decl InterproceduralAssign(?to:Var, ?from:Var)
.output InterproceduralAssign(IO="file",filename="INTERPROCEDURAL_ASSIGN.csv",delimiter="\t")

InterproceduralAssign(?to, ?from) :-
    OptArgAssign(_, ?to, _, ?from);
    OptReturnAssign(_, ?to, _, ?from).


.decl LocalAssign(?to:Var, ?from:Var)
.output LocalAssign(IO="file",filename="LOCAL_ASSIGN.csv",delimiter="\t")

LocalAssign(?to, ?from) :-
    AssignLocal(?from, ?to, ?inmethod),
    Reachable(?inmethod).

LocalAssign(?to, ?from) :- OptAssignCast(_, ?to, ?from).


.output Method_Modifier(IO="file",filename="METHOD_MODIFIER.csv",delimiter="\t")


.decl ObjType(?obj:Value, ?type:Type)
.output ObjType(IO="file",filename="OBJ_TYPE.csv",delimiter="\t")

ObjType(?obj, ?type) :-
    Value_Type(?obj, ?type),
    VarPointsTo(_, ?obj, _, _).


.decl ObjectAssign(?obj:Value, ?var:Var)
.output ObjectAssign(IO="file",filename="OBJECT_ASSIGN.csv",delimiter="\t")

.decl ObjectIn(?object:Value, ?inmethod:Method)
.output ObjectIn(IO="file",filename="OBJECT_IN.csv",delimiter="\t")

ObjectIn(?obj, ?inmethod),
ObjectAssign(?obj, ?var) :-
    AssignHeapAllocation(?obj, ?var, ?inmethod),
    Reachable(?inmethod).


.decl Formal_Param(?method:Method, ?param:Var)
.output Formal_Param(IO="file",filename="PARAMS.csv",delimiter="\t")

Formal_Param(?method, ?param) :-
    FormalParam(_, ?method, ?param),
    Reachable(?method).


.decl RetVar(?method:Method, ?ret:Var)
.output RetVar(IO="file",filename="RET_VARS.csv",delimiter="\t")

RetVar(?method, ?ret) :-
    ReturnVar(?ret, ?method),
    Reachable(?method).


.output HeapAllocation_ContextInsensitive(IO="file",filename="SPECIAL_OBJECTS.csv",delimiter="\t")


.decl VarIn(?var:Var, ?method:Method)
.output VarIn(IO="file",filename="VAR_IN.csv",delimiter="\t")

VarIn(?var, ?method) :-
    Reachable(?method),
    Var_DeclaringMethod(?var, ?method).
