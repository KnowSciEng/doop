/**
// Original blueprint for modeling of android events. This comment should
// probably be kept even when the code gets far more sophisticated. It
// will show the original thinking, which will be a good starting point
// for understanding.

// -Every application-level activity/service/content provider/broadcast
//  receiver class instantiated with a new object. All public methods of
//  these objects deemed reachable. (REVIEW: with what arguments?) Also
//  protected methods that override library methods.

// -Layout/View class: transitive subtype of android.view.ViewGroup or
//  android.view.View
//   * Every layout control (application-level or not) that appears in
//     the XML (with resource id) is instantiated (REVIEW: with what
//     links to other controls? Call constructors with some arguments,
//     perhaps?)
//   * Every layout control instantiated (in any way) has its public
//     methods whose name starts with "on" be reachable (REVIEW: with
//     what arguments?)
//   * Refinement: certainly we need a mock LayoutInflater object passed
//     to a fragment's "onCreateView", to allow calling "inflate" on it.
//   * Refinement: return right view for findViewById, (Receiver is
//     parent view, but we assume it's correct.)
//   * View.inflate called with an id should return the appropriate view

// -A class is a listener or a callback if it's a subtype of a class or
//  interface with "Callback" or "Listener" in its name
//   * Every instantiated listener or callback object (opt.: that flows
//     to a library method that accepts a listener interface) has its
//     public methods whose name starts with "on" be reachable (REVIEW:
//     with what arguments?)
**/

AndroidAppComponent(?type) :-
  Activity(?type);
  Service(?type);
  BroadcastReceiver(?type);
  ContentProvider(?type);
  AndroidApplication(?type).


.decl RegisterBroadCastReceiverVar(?var:Var)

RegisterBroadCastReceiverVar(?var) :-
   Method_SimpleName(?method, "registerReceiver"),
   MethodInvocation_Method(?invocation, ?method),
   ActualParam(0, ?invocation, ?var),
   ApplicationVar(?var),
   Var_Type(?var, ?type),
   SupertypeOf("android.content.BroadcastReceiver", ?type).

.decl ExtraAndroidAppComponent(?type:Type)

ExtraAndroidAppComponent(?type),
ReifiedAndroidObjectValue(?value, ?type) :-
   RegisterBroadCastReceiverVar(?var),
   VarPointsTo(_, ?value, _, ?var),
   Value_Type(?value, ?type),
   !AndroidAppComponent(?type).

// Create a new heap object per component declared in layout
// (XML) resources. (REVIEW) These are normal heap objects.
MockValueConsMacro(cat("<android component object ", cat(?type, ">")), ?type),
ReifiedComponent(?type, cat("<android component object ", cat(?type, ">"))) :-
  AndroidAppComponent(?type),
  isType(?type).

// Create a new heap object per control object declared in layout
// (XML) resources. (REVIEW) These are normal heap objects.
MockValueConsMacro(cat("<layout control object ", cat(?id, cat(" of type ", cat(?type, ">")))), ?type),
ReifiedLayoutControl(?type, ?id, cat("<layout control object ", cat(?id, cat(" of type ", cat(?type, ">"))))) :-
  LayoutControl(?id, ?type, _),
  isType(?type).

SensitiveLayoutControlValue(?value) :-
  ReifiedLayoutControl(?type, ?id, ?value),
  SensitiveLayoutControl(?id, ?type, _).

// Also instantiate implicitly some library objects
ImplicitlyInstantiatedLibraryType(?type) :-
  (?type = "android.content.Intent";
   ?type = "android.os.Bundle"),
  isType(?type).

MockValueConsMacro(cat("<android library object ", cat(?type, ">")), ?type),
ReifiedLibraryObject(?type, cat("<android library object ", cat(?type, ">"))) :-
  ImplicitlyInstantiatedLibraryType(?type),
  isType(?type).


// Main logic
AndroidLibraryType(?type) :-
  isType(?type),
  match("^android.*", ?type).

// REVIEW: is this needed? android.support classes are included in the
// application for compatibility with older Android versions. We
// currently consider them library, not app.
AndroidApplicationClass(?class) :-
  ApplicationClass(?class),
  !AndroidLibraryType(?class).


AndroidViewType(?type) :-
  SubtypeOf(?type, ?supertype),
  (?supertype = "android.view.View",
   isType(?supertype);
   ?supertype = "android.view.ViewGroup",
   isType(?supertype)).

AndroidLibraryListenerType(?type) :-
  AndroidLibraryType(?type),
  isType(?type),
  (contains("Listener", ?type);
   contains("Callback", ?type)).

ListenerType(?type) :-
  AndroidLibraryListenerType(?listenerType),
  SubtypeOf(?type, ?listenerType).

AndroidApplicationListenerClass(?class) :-
  AndroidApplicationClass(?class),
  ListenerType(?class).

MethodDeclaredOrInherited(?meth, ?class) :-
  isClassType(?class),
  Method_DeclaringType(?meth, ?class).

// This keeps the signature of the method in the superclass, if
// lookup returns that method (and not an overriding one).
MethodDeclaredOrInherited(?meth, ?class) :-
  MethodDeclaredOrInherited(?meth, ?superClass),
  Method_Descriptor(?meth, ?descriptor),
  Method_SimpleName(?meth, ?simplename),
  DirectSuperclass(?class, ?superClass),
  MethodLookup(?simplename, ?descriptor, ?class, ?meth).

PublicMethodOfComponent(?meth) :-
  (AndroidAppComponent(?type); ExtraAndroidAppComponent(?type)),
  MethodDeclaredOrInherited(?meth, ?type),
  Method_Modifier("public", ?meth).

ProtectedMethodOfComponent(?meth) :-
  (AndroidAppComponent(?type); ExtraAndroidAppComponent(?type)),
  MethodDeclaredOrInherited(?meth, ?type),
  Method_Modifier("protected", ?meth).

AppMethodOverridesAndroidLibraryMethod(?meth) :-
  Method_DeclaringType(?meth, ?type),
  AndroidApplicationClass(?type),
  // should be just args, since ret-type can be covariant?
  Method_Descriptor(?meth, ?descriptor),
  Method_SimpleName(?meth, ?simplename),
  SupertypeOf(?libraryType, ?type),
  AndroidLibraryType(?libraryType),
  MethodLookup(?simplename, ?descriptor, ?libraryType, _).

// The protected method overrides one in a library type, hence it's
// callable from the library.

OverridingProtectedMethodOfComponent(?meth) :-
  ProtectedMethodOfComponent(?meth),
  AppMethodOverridesAndroidLibraryMethod(?meth).


ForcedReachableAndroidContext(?ctx, ?meth),
ReachableContext(?ctx, ?meth) :-
  (PublicMethodOfComponent(?meth);
   OverridingProtectedMethodOfComponent(?meth);
   CallbackMethod(?meth)),
  isImmutableContext(?ctx).

// Handle library-callable "on*" methods of layout controls


PublicOnMethodOfLayoutControl(?meth) :-
  MethodDeclaredOrInherited(?meth, ?type),
  LayoutControl(_, ?type, _),
  Method_SimpleName(?meth, ?simplename),
  match("^on.*", ?simplename),
  Method_Modifier("public", ?meth).

ProtectedOnMethodOfLayoutControl(?meth) :-
  MethodDeclaredOrInherited(?meth, ?type),
  LayoutControl(_, ?type, _),
  Method_SimpleName(?meth, ?simplename),
  match("^on.*", ?simplename),
  Method_Modifier("protected", ?meth).

OverridingProtectedOnMethodOfLayoutControl(?meth) :-
  ProtectedOnMethodOfLayoutControl(?meth),
  AppMethodOverridesAndroidLibraryMethod(?meth).

ForcedReachableAndroidContext(?ctx, ?meth),
ReachableContext(?ctx, ?meth) :-
  (PublicOnMethodOfLayoutControl(?meth);
   OverridingProtectedOnMethodOfLayoutControl(?meth)),
  isImmutableContext(?ctx).

// Handle library-callable "on*" methods of listeners/callbacks
// REVIEW: this is currently liberal. It checks that the app class
// subtypes a library listener and that it has an "on*" method,
// but that doesn't mean that method overrides one of the listener.


// ... all analysis-reachable objects
ReachableApplicationObjectOfType(?hctx, ?value, ?ofType) :-
  ApplicationClass(?ofType),
  Value_Type(?value, ?ofType),
  VarPointsTo(?hctx, ?value, _, _).

// Be liberal: if an object is a listener, and it is instantiated
// in the application, then consider it to flow to the library.
ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType),
LibraryReachableAppListenerType(?type) :-
  ReachableApplicationObjectOfType(?hctx, ?value, ?ofType),
  AndroidApplicationListenerClass(?type).

//// Currently this is too conservative. We need to model more of
//// the environment, such as "getActivity", "getSystemService", for
//// this to work well.
// LibraryMethodArgAcceptingListeners(?formal) :-
//   Method:DeclaringType[?meth] = ?type,
//   AndroidLibraryType(?type),
//   FormalParam[_, ?meth] = ?formal,
//   Var:Type[?formal] = ?formalType,
//   ListenerType(?formalType).

// ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType) :-
//   VarPointsTo(?hctx, ?value, _, ?formal),
//   LibraryMethodArgAcceptingListeners(?formal),
//   Value:Type[?value] = ?ofType,
//   AndroidApplicationListenerClass(?ofType).

// LibraryReachableAppListenerType(?type) :-
//   ApplicationObjectFlowingToLibrary(_, _, ?type),
//   AndroidApplicationListenerClass(?type).

PublicOnMethodOfReachableListener(?meth) :-
  MethodDeclaredOrInherited(?meth, ?class),
  LibraryReachableAppListenerType(?class),
  Method_SimpleName(?meth, ?simplename),
  match("^on.*", ?simplename),
  Method_Modifier("public", ?meth).

ProtectedOnMethodOfReachableListener(?meth) :-
  MethodDeclaredOrInherited(?meth, ?class),
  LibraryReachableAppListenerType(?class),
  Method_SimpleName(?meth, ?simplename),
  match("^on.*", ?simplename),
  Method_Modifier("protected", ?meth).

OverridingProtectedOnMethodOfReachableListener(?meth) :-
  ProtectedOnMethodOfReachableListener(?meth),
  AppMethodOverridesAndroidLibraryMethod(?meth).

ForcedReachableAndroidContext(?ctx, ?meth),
ReachableContext(?ctx, ?meth) :-
  (PublicOnMethodOfReachableListener(?meth);
   OverridingProtectedOnMethodOfReachableListener(?meth)),
  isImmutableContext(?ctx).

// anantoni: Make the getters and setters of classes extending View reachable
ForcedReachableAndroidContext(?ctx, ?meth),
ReachableContext(?ctx, ?meth) :-
    Method_SimpleName(?meth, ?simplename),
    (match("set.*", ?simplename);
     match("get.*", ?simplename)),
    Method_DeclaringType(?meth, ?viewType),
    AndroidViewType(?viewType),
    isImmutableContext(?ctx).

ForcedReachableAndroidContext(?ctx, ?meth),
ReachableContext(?ctx, ?meth) :-
    Method_Modifier("public", ?meth),
    FormalParam(0, ?meth, ?arg),
    Var_Type(?arg, "android.view.View"),
    Method_DeclaringType(?meth, ?class),
    Activity(?class),
    isImmutableContext(?ctx).

// For all the above forced reachable methods, supply a receiver
// object of the appropriate type

// First, for objects implicitly registered (XML or library).
ReifiedAndroidObjectValue(?value, ?type) :-
  ReifiedComponent(?type, ?value);
  ReifiedLayoutControl(?type, _, ?value);
  ReifiedLibraryObject(?type, ?value).

VarPointsTo(?hctx, ?value, ?ctx, ?this) :-
  ForcedReachableAndroidContext(?ctx, ?meth),
  ImmutableHContextFromContext(?ctx, ?hctx),
  Method_DeclaringType(?meth, ?class),
  ReifiedAndroidObjectValue(?value, ?class),
  ThisVar(?meth, ?this).
  .plan 1:(2,1,3,4,5)

// a reachable object can always be the receiver for its own methods
VarPointsTo(?hctx, ?value, ?ctx, ?this) :-
  ForcedReachableAndroidContext(?ctx, ?meth),
  Method_DeclaringType(?meth, ?ofType),
  ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType),
//  ReachableApplicationObjectOfType(?hctx, ?value, ?ofType),
  ThisVar(?meth, ?this).
  .plan 1:(3,2,1,4)

// ... and do the same for argument objects.
// REVIEW: this is imprecise. It assigns any argument to a
// type-compatible value, regardless of the hierarchy of actual
// graphical components. One could also perhaps distinguish
// objects initialized by different constructors.

FormalOfForcedReachableContext(?ctx, ?formal, ?formalType) :-
  ForcedReachableAndroidContext(?ctx, ?meth),
  FormalParam(_, ?meth, ?formal),
  Var_Type(?formal, ?formalType).

VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  FormalOfForcedReachableContext(?ctx, ?formal, ?formalType),
  ImmutableHContextFromContext(?ctx, ?hctx),
  SubtypeOf(?type, ?formalType),
  ReifiedAndroidObjectValue(?value, ?type).
  .plan 1:(2,1,3,4)


// Do the same (use as arguments everywhere applicable) for application
// listeners that flow into library code.
ApplicationObjectFlowingToLibraryStaticType(?hctx, ?value, ?possibleType) :-
  ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType),
  SupertypeOf(?possibleType, ?ofType).

VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  FormalOfForcedReachableContext(?ctx, ?formal, ?formalType),
  ApplicationObjectFlowingToLibraryStaticType(?hctx, ?value, ?formalType).
  .plan 1:(2,1)

// Support view retrieval by id. If a call to an appropriate method is
// found, we short-circuit it and return the right view object.
ViewRetrievalByArg0MethodInvocation(?invo) :-
  (?calleeName = "inflate";
   ?calleeName = "getView";
   ?calleeName = "findViewById"),
  Method_SimpleName(?method, ?calleeName),
  ?retType = "android.view.View",
  Method_ReturnType(?method, ?retType),
  isType(?retType),
  MethodInvocation_Method(?invo, ?method).
// Lots of wrapper methods. Let's do more liberal matching.
  // (Method:Id(?signature:"<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>");
  //  Method:Id(?signature:"<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>");
  //  Method:Id(?signature:"<android.view.View: android.view.View findViewById(int)>")
  // ).

// Support fragment retrieval by id (similar to rule about view retrieval).
FragmentRetrievalByArg0MethodInvocation(?invo) :-
  Method_SimpleName(?method, "findFragmentById"),
  (?retType = "android.app.Fragment";
   ?retType = "android.support.v4.app.Fragment"),
  Method_ReturnType(?method, ?retType),
  isType(?retType),
  MethodInvocation_Method(?invo, ?method).

// The variables holding the layout control id and the retrieved
// layout control at one of these invocations.

VarsAtInvocationRetrievingLayoutControl(?ret, ?var) :-
  (FragmentRetrievalByArg0MethodInvocation(?invo);
   ViewRetrievalByArg0MethodInvocation(?invo)),
  AssignReturnValue(?invo, ?ret),
  ActualParam(0, ?invo, ?var).


LayoutControlObjectValueFromId(?controlValue, ?numId) :-
  LayoutControl(?numId, ?type, _),
  ReifiedLayoutControl(?type, ?numId, ?controlValue).

// ... and the clincher: given an id for a layout control object, at
// one of the invocation sites of methods retrieving layout controls,
// return the appropriate layout control object. REVIEW: the ?hctx is
// a hack, which currently doesn't matter since it's the immutable
// hctx anyway.  I can't see why we'd need to RecordMacro-create a new
// hctxt, since these layout objects are unique.
VarPointsTo(?hctx, ?controlValue, ?ctx, ?ret) :-
  VarsAtInvocationRetrievingLayoutControl(?ret, ?var),
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  Value_Num(?value, ?numId),
  LayoutControlObjectValueFromId(?controlValue, ?numId).



// Special handling for multi-dimensional arrays
NotSpecialObject(cat(cat(?invocation, ":"), ?type)),
NotEmptyArrayValue(cat(cat(?invocation, ":"), ?type)),
MockValueConsMacro(cat(cat(?invocation, ":"), ?type), ?type),
MultiDimensionalArrayTemp(cat(cat(?invocation, ":"), ?type), ?invocation, ?type, ?ctx, ?from) :-
  ?method = "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>",
  StaticMethodInvocation(?invocation, ?method, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  AssignReturnValue(?invocation, ?from),
  OptAssignCast(?type, _, ?from).

UninitialisedArray(?hctx, ?value, ?invocation, ?type),
VarPointsTo(?hctx, ?value, ?ctx, ?from) :-
  MultiDimensionalArrayTemp(?value, ?invocation, ?type, ?ctx, ?from),
  RecordMacro(?ctx, ?value, ?hctx).

NotSpecialObject(cat(cat(?invocation, ":"), ?arrayType)),
NotEmptyArrayValue(cat(cat(?invocation, ":"), ?arrayType)),
MockValueConsMacro(cat(cat(?invocation, ":"), ?arrayType), ?arrayType),
UninitialisedArray(?hctx, cat(cat(?invocation, ":"), ?arrayType), ?invocation, ?arrayType),
ArrayIndexPointsTo(?hctx, cat(cat(?invocation, ":"), ?arrayType), ?hctx, ?basevalue) :-
  ComponentType(?type, ?arrayType),
  isArrayType(?arrayType),
  UninitialisedArray(?hctx, ?basevalue, ?invocation, ?type).


// Being liberal ... Any Activity parameter inside a class that is
// TODO: this is only partial support for fragments, and we fail
// DroidBench's FragmentLifecycle2 benchmark

.decl ActivityVarInType(?var:Var, ?ctx:Context, ?type:Type)

ActivityVarInType(?var, ?ctx, ?type) :-
   Var_DeclaringMethod(?var, ?method),
   Var_Type(?var, ?vartype),
   SupertypeOf("android.app.Activity", ?vartype),
   ReachableContext(?ctx, ?method),
   Method_DeclaringType(?method, ?type).

OptInterproceduralAssign(?ctxTo, ?varAcc, ?ctxFrom, ?thisActivity) :-
   ActivityVarInType(?varAcc, ?ctxTo, ?type),
   Value_Type(?value, ?type),
   VarPointsTo(_, ?value, _, ?fragmentParam),
   BindFragment(?thisActivity, ?fragmentParam),
   isImmutableContext(?ctxFrom).


.decl BindFragment(?thisActivity:Var, ?fragmentParam:Var)

// Binding fragment's parent
BindFragment(?thisActivity, ?fragmentParam) :-
   Method_DeclaringType(?method, "android.app.FragmentTransaction"),
   (Method_SimpleName(?method, "add") ; Method_SimpleName(?method, "replace")),
   MethodInvocation_Method(?invocation, ?method),
   ActualParam(_, ?invocation, ?fragmentParam),
   Instruction_Method(?invocation, ?inmethod),
   ThisVar(?inmethod, ?thisActivity).


// TODO: generalize this by
// 1) getting info from factgen (Application, Component).
// 2) Be more liberal with variable types.
VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
   ReifiedApplicationAndCompatibleVar(?value, ?var),
   Var_DeclaringMethod(?var, ?method),
   ForcedReachableAndroidContext(?ctx, ?method),
   isImmutableHContext(?hctx).

.decl ReifiedApplicationAndCompatibleVar(?value:Value, ?var:Var)

ReifiedApplicationAndCompatibleVar(?value, ?var) :-
   ReifiedComponent(?type, ?value),
   AndroidApplication(?type),
   Var_Type(?var, ?type).

// Asynchronous tasks are treated as synchronous method calls
.decl AsynchTaskExecute(?param:Var, ?base:Var)

AsynchTaskExecute(?param, ?base) :-
   Method_DeclaringType(?method, "android.os.AsyncTask"),
   Method_SimpleName(?method, "execute"),
   MethodInvocation_Method(?invocation, ?method),
   ActualParam(_, ?invocation, ?param),
   Var_Type(?param, ?type),
   isArrayType(?type),
   MethodInvocation_Base(?invocation, ?base).

ReachableContext(?ctx, ?method),
OptInterproceduralAssign(?ctx, ?formal, ?callerCtx, ?actual),
VarPointsTo(?hctx, ?baseValue, ?ctx, ?this) :-
   AsynchTaskExecute(?actual, ?base),
   VarPointsTo(?hctx, ?basevalue, ?callerCtx, ?base),
   Value_Type(?baseValue, ?type),
   Method_DeclaringType(?method, ?type),
   Method_SimpleName(?method, "doInBackground"),
   FormalParam(0, ?method, ?formal),
   // TODO: requires proper method resolution
   ThisVar(?method, ?this),
   ImmutableContextFromContext(?callerCtx, ?ctx).
