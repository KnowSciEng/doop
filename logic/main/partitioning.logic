// Which types should be partitioned? 
PartitionedType(?type) <-
  ApplicationClass(?type).
  
TypeRefersToOther(?typeFrom, ?typeTo) <-
  PartitionedType(?typeFrom), PartitionedType(?typeTo),
  DirectSubclass[?typeFrom] = ?typeTo.

TypeRefersToOther(?typeFrom, ?typeTo) <-
  PartitionedType(?typeFrom), PartitionedType(?typeTo),
  Field:Type[?field] = ?typeTo,
  Field:DeclaringType[?field] = ?typeFrom.

TypeRefersToOther(?typeFrom, ?typeTo) <-
  PartitionedType(?typeFrom), PartitionedType(?typeTo),
  MethodInvocation:Method[?invo] = ?method,
  Instruction:Method[?invo] = ?fromMethod,
  Method:DeclaringType[?method] = ?typeTo,
  Method:DeclaringType[?fromMethod] = ?typeFrom.

TypeRefersToOther(?typeFrom, ?typeTo) <-
  PartitionedType(?typeFrom), PartitionedType(?typeTo),
  Var:Type[?var] = ?typeTo,
  Var:DeclaringMethod(?var, ?method),
  Method:DeclaringType[?method] = ?typeFrom.

OptTypeRefersToOther(?typeTo, ?typeFrom) <-
  TypeRefersToOther(?typeFrom, ?typeTo).

TypeTransitivelyRefersToOther(?typeFrom, ?typeTo) <-
  TypeRefersToOther(?typeFrom, ?typeTo).

TypeTransitivelyRefersToOther(?typeFrom, ?typeTo) <-
  TypeTransitivelyRefersToOther(?typeFrom, ?typeInterm),
  OptTypeRefersToOther(?typeTo, ?typeInterm).

TypesInSameSCC(?type1, ?type2) <-
  TypeTransitivelyRefersToOther(?type1, ?type2),
  TypeTransitivelyRefersToOther(?type2, ?type1).

TypesInSameSCC(?type, ?type) <-
  PartitionedType(?type),
  Type(?type).

TypeToSCCId[?type] = ?idType <-
  agg<<?idType = min(?t)>>(TypesInSameSCC(?type, ?t)).

CountOfTypesPerSCC[?idType] = ?num <-
  agg<<?num = count()>>(TypeToSCCId[_] = ?idType).

SCCPerCountOfTypes(?idType, ?num) <-
  CountOfTypesPerSCC[?idType] = ?num.

MaxCountOfTypesPerSCC[] = ?maxNum <-
  agg<<?maxNum = max(?num)>>(CountOfTypesPerSCC[_] = ?num).

SCCWithMaxCountOfTypes(?idType) <-
  SCCPerCountOfTypes(?idType, MaxCountOfTypesPerSCC[]).

NumberOfRelevantTypes[] = ?num <-
  agg<<?num = count()>>(PartitionedType(_)).
  
TypeToPartitionId[?type] = ?idType <-
  TypeToSCCId[?type] = ?idType,
  CountOfTypesPerSCC[?idType] = ?num,
  ?num*?num > NumberOfRelevantTypes[].

TypeInGenericPartition(?type) <-
  TypeToSCCId[?type] = ?idType,
  CountOfTypesPerSCC[?idType] = ?num,
  ?num*?num <= NumberOfRelevantTypes[].

IdTypeOfGenericPartition[] = ?idType <-
  agg<<?idType = min(?t)>>(TypeInGenericPartition(?t)).
  
TypeToPartitionId[?type] = ?idType <-
  TypeInGenericPartition(?type),
  IdTypeOfGenericPartition[] = ?idType.

PartitionId(?idType) <-
  TypeToPartitionId[_] = ?idType.
  
CountOfTypesPerPartition[?idType] = ?num <-
  agg<<?num = count()>>(TypeToPartitionId[_] = ?idType).

PartitionPerCountOfTypes(?idType, ?num) <-
  CountOfTypesPerPartition[?idType] = ?num.

MaxCountOfTypesPerPartition[] = ?maxNum <-
  agg<<?maxNum = max(?num)>>(CountOfTypesPerPartition[_] = ?num).

PartitionWithMaxCountOfTypes(?idType) <-
  PartitionPerCountOfTypes(?idType, MaxCountOfTypesPerPartition[]).

// // Recognize packages, for partitioning
// DotsInClassName(?type, ?pos) <-
//   ClassType(?type), Type:Value(?type:?name), string:substring[?name, ?pos, 1] = ".".

// NotLastDot(?pos, ?type) <-
//   DotsInClassName(?type, ?pos), DotsInClassName(?type, ?pos2), ?pos2 > ?pos.

// NotSecondLastDot(?pos, ?type) <-
//   DotsInClassName(?type, ?pos), DotsInClassName(?type, ?pos2), ?pos2 > ?pos, NotLastDot(?pos2, ?type).
// NotSecondLastDot(?pos, ?type) <-
//   LastDot[?type] = ?pos.

// LastDot[?type] = ?pos <-
//   DotsInClassName(?type, ?pos), !NotLastDot(?pos, ?type).

// /*
// SecondLastDot[?type] = ?pos <-
//   DotsInClassName(?type, ?pos), !NotSecondLastDot(?pos, ?type).

// // Heuristically assign a class to a package
// Class:PackageHack[?type] = ?packageName <-
//   SecondLastDot[?type] = ?secondLastPos,
//   ClassType(?type), Type:Value(?type:?name),
//   string:substring[?name,0,?secondLastPos] = ?packageName,
//   !SpecialLibraryClass(?type).
// */

// Class:PackageHack[?type] = ?packageName <-
// //  !(SecondLastDot[?type] = _), // there are fewer than two dots
//   ClassType(?type), Type:Value(?type:?name),
//   string:substring[?name,0,LastDot[?type]] = ?packageName,
//   !SpecialLibraryClass(?type).

// Class:PackageHack[?type] = "library package" <-
//   SpecialLibraryClass(?type).

// ClassesInSamePartition(?type1, ?type2) <-
//   Class:PackageHack[?type1] = ?packageName1,
//   Class:PackageHack[?type2] = ?packageName2,
//   (string:substring[?packageName1, 0, string:length[?packageName2]] = ?packageName2;
//    string:substring[?packageName2, 0, string:length[?packageName1]] = ?packageName1).

// /*
// ClassesInSamePartition(?type1, ?type2) <-
//   Class:PackageHack[?type1] = Class:PackageHack[?type2].
// */

// ClassesInSamePartition(?type1, ?type2) <-
//   ClassType(?type1),
//   Type:Value(?type2:?typename),
//   string:substring[?typename, 0, 9] = "java.util".

// // TODO: there is also the issue of calling methods on non-class
// // objects, i.e., java.lang.Object methods on arrays. Rare enough that
// // we don't care for now.
// /*
// // Just for limit testing: it should yield a fully context-sensitive analysis
// ClassesInSamePartition(?type1, ?type2) <-
//   ClassType(?type1),
//   ClassType(?type2).
// */

