// For this analysis, every heap context recorded on allocation
// corresponds to the calling context of the allocator method.
// Subtle point: this may need to be created because even though it
// exists as a Context it may not exist as an HContext.
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContext1FromContext[ctx], \
                           RealContext2FromContext[ctx], \
                           RealContext3FromContext[ctx]] = hctx


// For this analysis the context of a method call corresponds to the
// declaring classes of the receiver object, the receiver object
// of the caller and so on. Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContext2FromHContext[hctx], \
                         RealHContext3FromHContext[hctx], \
                         Value:DeclaringType[value]] = calleeCtx

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
  MergeBasis(callerCtx, invocation, hctx, value)

#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  CachedMerge[hctx, value] = calleeCtx

// For this analysis, static calls just keep the same context as the
// caller. *Not* creating a new one, but pretending to, nonetheless,
// so the engine doesn't barf.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContext1FromContext[callerCtx], \
                         RealContext2FromContext[callerCtx], \
                         RealContext3FromContext[callerCtx]] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealHContext2FromHContext[hctx], \
                         RealHContext3FromHContext[hctx], \
                         Value:DeclaringType[value]] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContext2FromHContext[hctx], \
                         RealHContext3FromHContext[hctx], \
                         Value:DeclaringType[value]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContext2FromContext[callerCtx], \
                         RealContext3FromContext[callerCtx], \
                         Value:DeclaringType[value]] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), ContextFromRealContext[value12, value12, value3] = ctx \
  <- Type:Id(value12, valueId), ClassTypeValue(value3, "java.lang.String")

#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromRealHContext[value, value, value] = hctx \
  <- Type:Id(value, valueId)
