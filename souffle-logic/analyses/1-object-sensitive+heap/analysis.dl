// Context-sensitive pointer analysis with context of 1 object and a
// context-sensitive heap abstraction.

// In this analysis, both the real context and the real heap context are
// Values.
.type Context  = [ value:Value ]
.type HContext = [ value:Value ]

// Dynamic analysis
#ifdef HEAPDL
DynamicContextToContext([ ?value ], ?dynCtx) :-
   Value_byDynamicHeap(?heap1, ?value),
   DynamicContextHeap1(?heap1, ?dynCtx).

DynamicContextToContext(?ctx, ?dynCtx) :-
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableContext(?ctx),
   isDynamicContext(?dynCtx).

DynamicContextToHContext([ ?value ], ?dynCtx) :-
   Value_byDynamicHeap(?heap1, ?value),
   DynamicContextHeap1(?heap1, ?dynCtx).

DynamicContextToHContext(?hctx, ?dynCtx) :-
   isDynamicContext(?dynCtx),
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableHContext(?hctx).
#endif