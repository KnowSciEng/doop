// Each rule that uses merge and/or record macros should add
// the created contexts into the respective relations, since
// the product of the macro goes to the body of a rule.

#define UNIQUE_HCONTEXT "<<unique-hcontext>>"

#define RecordMacro(ctx, value, hctx) \
  hctx = UNIQUE_HCONTEXT


// For this analysis the context of a method call corresponds to the
// invocation site of the method.
#define MergeMacro(callerCtx, invocation, hctx, value, newCtx) \
  newCtx = [invocation]
  
#define MergeStaticMacro(callerCtx, invocation, newCtx) \
  newCtx = [invocation]

#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  newCtx = callerCtx
  
#define MergeStartupMacro(hctx, value, newCtx) \
  StartupInvocation(invocation), \
  newCtx = [invocation]

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  FakeInvocation_RegisterFinalize(value, invocation), \
  newCtx = [invocation]


#define InitContextMacro(invocation) \
  isContext(ctx) :- ctx = [invocation]

#define InitHContextMacro(valueId) \
  isHContext(hctx) :- hctx = UNIQUE_HCONTEXT
