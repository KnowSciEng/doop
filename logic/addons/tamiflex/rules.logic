Value:DeclaringType[?value] = ?type <-
   (Tamiflex:Class:NewInstance(?invocation, ?value) ;
    Tamiflex:Constructor:NewInstance(?invocation, _, ?value) ;
    Tamiflex:Array:NewInstance(?invocation, ?value)),
   Instruction:Method[?invocation] = ?meth,
   Method:DeclaringType[?meth] = ?type.

Value:DeclaringType[?value] = ?type <-
   (Tamiflex:ReifiedField(_, ?value, _) ;
    Tamiflex:ReifiedFieldArray(_, ?value, _) ;
    Tamiflex:ReifiedMethod(_, ?value, _) ;
    Tamiflex:ReifiedMethodArray(_, ?value, _)),
   Value:Type[?value] = ?type.


MockValueConsMacro(?id, ?type, ?value),
Tamiflex:Class:NewInstance(?invocation, ?value)
<-
   Method:Id(?sig:"<java.lang.Class: java.lang.Object newInstance()>"),
   VirtualMethodInvocation(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?typeStr, ?invocation),
   Instruction:Id(?invocation:?invocationStr),
   Type:Id(?type:?typeStr),
   ?id = "<(Tamiflex) " + ?invocationStr + "/" + ?typeStr + ">".

MockValueConsMacro(?id, ?type, ?value),
Tamiflex:Constructor:NewInstance(?invocation, ?constructor, ?value)
<-
   Method:Id(?sig:"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"),
   VirtualMethodInvocation(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?constructorStr, ?invocation),
   Instruction:Id(?invocation:?invocationStr),
   Method:Id(?constructor:?constructorStr),
   Method:DeclaringType[?constructor] = ?type,
   Type:Id(?type:?typeStr),
   ?id = "<(Tamiflex) " + ?invocationStr + "/" + ?typeStr + ">".

MockValueConsMacro(?id, ?type, ?value),
Tamiflex:Array:NewInstance(?invocation, ?value)
<-
   Method:Id(?sig:"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"),
   StaticMethodInvocation(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?typeStr, ?invocation),
   Instruction:Id(?invocation:?invocationStr),
   Type:Id(?type:?typeStr),
   ?id = "<(Tamiflex) " + ?invocationStr + "/" + ?typeStr + ">".

MockValueConsMacro(?id, ?type, ?value),
Tamiflex:ReifiedField(?fld, ?value, ?invocation)
<-
   (Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>") ;
    Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>") ),
   VirtualMethodInvocation(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?fldStr, ?invocation),
   Field:Id(?fld:?fldStr),
   Type:Id(?type:"java.lang.reflect.Field"),
   ?id = "<(Tamiflex) " + ?fldStr + ">".

MockValueConsMacro(?id, ?javaFieldArrayType, ?value),
Tamiflex:ReifiedFieldArray(?type, ?value, ?invocation)
<-
   (Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>") ;
    Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Field[] getFields()>") ),
   VirtualMethodInvocation(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?typeStr, ?invocation),
   Type:Id(?type:?typeStr),
   Type:Id(?javaFieldArrayType:"java.lang.reflect.Field[]"),
   ?id = "<(Tamiflex) " + ?typeStr + "/Field[]>".

MockValueConsMacro(?id, ?type, ?value),
Tamiflex:ReifiedMethod(?method, ?value, ?invocation)
<-
   (Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>") ;
    Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>") ),
   VirtualMethodInvocation(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?methodStr, ?invocation),
   Method:Id(?method:?methodStr),
   Type:Id(?type:"java.lang.reflect.Method"),
   ?id = "<(Tamiflex) " + ?methodStr + ">".

MockValueConsMacro(?id, ?javaMethodArrayType, ?value),
Tamiflex:ReifiedMethodArray(?type, ?value, ?invocation)
<-
   (Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>") ;
    Method:Id(?sig:"<java.lang.Class: java.lang.reflect.Method[] getMethods()>") ),
   VirtualMethodInvocation(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?typeStr, ?invocation),
   Type:Id(?type:?typeStr),
   Type:Id(?javaMethodArrayType:"java.lang.reflect.Method[]"),
   ?id = "<(Tamiflex) " + ?typeStr + "/Method[]>".


/**
 * The analysis is done under a default context (ImmutableContext). No
 * reason to use normal context for reflective calls, since we are
 * using the results from tamiflex to resolve targets. Thus there is
 * no information to distinguish things per context.
 */

/**
 * A tamiflex call graph edge is not a real one: types in the signature
 * are not preserved (e.g., argumens are passed as an array). This is
 * much like reflective call graph edges.
 */
TamiflexCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee) ->
  Context(?callerCtx), MethodInvocation(?invocation),
  Context(?calleeCtx), Method(?callee).

ReachableContext(?calleeCtx, ?callee) <-
  TamiflexCallGraphEdge(_, _, ?calleeCtx, ?callee).

OptForNameInvocation(?invocation, ?inmethod) <-
   (Method:Id(?sig:"<java.lang.Class: java.lang.Class forName(java.lang.String)>") ;
    Method:Id(?sig:"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>") ),
   StaticMethodInvocation(?invocation, ?sig, ?inmethod).

VarPointsTo(?hctx, ?classValue, ?ctx, ?return) <-
   OptForNameInvocation(?invocation, ?inmethod),
   ReachableContext(?ctx, ?inmethod),
   ImmutableHContextFromContext[?ctx] = ?hctx,
   Tamiflex:ReflectionMap(?classStr, ?invocation),
   ?classObjStr = "<class " + ?classStr + ">",
   HeapAllocation:byId[?classObjStr] = ?classObj,
   HeapAllocation:Type[?classObj] = "java.lang.Class",
   Value:byHeap[?classObj] = ?classValue,
   AssignReturnValue[?invocation] = ?return.

VarPointsTo(?hctx, ?value, ?ctx, ?return) <-
   ImmutableHContextFromContext[?ctx] = ?hctx,
   (Tamiflex:Class:NewInstance(?invocation, ?value) ;
    Tamiflex:Array:NewInstance(?invocation, ?value) ),
   Instruction:Method[?invocation] = ?inmethod,
   ReachableContext(?ctx, ?inmethod),
   AssignReturnValue[?invocation] = ?return.

// MergeMacro(?callerCtx, ?invocation, ?hctx, ?obj, ?calleeCtx),
VarPointsTo(?hctx, ?value, ?callerCtx, ?return),
TamiflexCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?constructor),
TamiflexConstructorCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?constructor),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this)
<-
   ImmutableHContextFromContext[?callerCtx] = ?hctx,
   ImmutableContextFromContext[?callerCtx] = ?calleeCtx,
   Tamiflex:Constructor:NewInstance(?invocation, ?constructor, ?value),
   Instruction:Method[?invocation] = ?inmethod,
   ReachableContext(?callerCtx, ?inmethod),
   AssignReturnValue[?invocation] = ?return,
   ThisVar[?constructor] = ?this.


Java:lang:reflect:Method:invoke(?invocation) <-
   VirtualMethodInvocation(?invocation, ?sig, _),
   Method:Id(?sig:"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>").
                                
InsensTamiflexInvoke(?invocation, ?method, ?inmethod) <-
   Java:lang:reflect:Method:invoke(?invocation),
   Tamiflex:ReflectionMap(?methodStr, ?invocation),
   Method:Id(?method:?methodStr),
   Instruction:Method[?invocation] = ?inmethod.
   
Tamiflex:Invoke(?callerCtx, ?invocation, ?method)
<-
   InsensTamiflexInvoke(?invocation, ?method, ?inmethod),
   ReachableContext(?callerCtx, ?inmethod).


/**
 * Private method invocations are special methods, unless they are static.
 * But they are handled the same as virtual methods in the context of tamiflex
 * since tamiflex has already resolved the final target method.
 */
TamiflexCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this)
<-
   Tamiflex:Invoke(?callerCtx, ?invocation, ?callee),
   ! Method:Modifier("static", ?callee),
   ActualParam[0, ?invocation] = ?base,
   VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
   ThisVar[?callee] = ?this,
   ImmutableContextFromHContext[?hctx] = ?calleeCtx.

/**
 * Static method invocations
 */
TamiflexCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee) <-
   Tamiflex:Invoke(?callerCtx, ?invocation, ?callee),
   Method:Modifier("static", ?callee),
   ImmutableContextFromContext[?callerCtx] = ?calleeCtx.

/**
 * Return values of reflective method invocations
 */
OptInterproceduralAssign(?callerCtx, ?local, ?calleeCtx, ?return) <-
   Tamiflex:Invoke(?callerCtx, ?invocation, ?callee),
   AssignReturnValue[?invocation] = ?local,
   ReturnVar(?return, ?callee),
   ImmutableContextFromContext[?callerCtx] = ?calleeCtx.

/**
 * Handle the array of actual parameters of a reflective method call
 */

// Optimizing indexing
/// two cases of tamiflex calls: regular reflective invokes ...
TamiflexInvocationFirstParam(?calleeCtx, ?formal, ?callerCtx, ?argsParam) <-
   Tamiflex:Invoke(?callerCtx, ?invocation, ?callee),
   ActualParam[1, ?invocation] = ?argsParam,
   FormalParam[_, ?callee] = ?formal,
   ImmutableContextFromContext[?callerCtx] = ?calleeCtx.
/// ... vs. constructor calls
TamiflexInvocationFirstParam(?calleeCtx, ?formal, ?callerCtx, ?argsParam) <-
   TamiflexConstructorCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
   ActualParam[0, ?invocation] = ?argsParam,
   FormalParam[_, ?callee] = ?formal.

// Optimizing indexing
TamiflexInvocationArgumentArrayValue(?calleeCtx, ?formal, ?basehctx, ?basevalue) <-
   TamiflexInvocationFirstParam(?calleeCtx, ?formal, ?ctx, ?base),
   VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

VarPointsTo(?hctx, ?value, ?calleeCtx, ?formal) <-
   TamiflexInvocationArgumentArrayValue(?calleeCtx, ?formal, ?basehctx, ?basevalue),
   ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue),
   Var:Type[?formal] = ?type,
   Value:Type[?value] = ?valuetype,
   SupertypeOf(?type, ?valuetype).

VarPointsTo(?hctx, ?value, ?ctx, ?return) <-
   ImmutableHContextFromContext[?ctx] = ?hctx,
   (Tamiflex:ReifiedField(_, ?value, ?invocation) ;
    Tamiflex:ReifiedFieldArray(_, ?value, ?invocation) ;
    Tamiflex:ReifiedMethod(_, ?value, ?invocation) ;
    Tamiflex:ReifiedMethodArray(_, ?value, ?invocation) ),
   Instruction:Method[?invocation] = ?inmethod,
   ReachableContext(?ctx, ?inmethod),
   AssignReturnValue[?invocation] = ?return.
