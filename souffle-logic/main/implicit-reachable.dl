#ifndef EXCLUDE_IMPLICITLY_REACHABLE_CODE

/**
 * Implicitly reachable methods are invoked by the JVM on startup.
 */
#ifdef ANDROID

ImplicitReachable(sig) :-
    AndroidEntryPoint(sig).

#endif

ImplicitReachable(?m) :-
  ?m = "<java.lang.System: void initializeSystemClass()>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.ThreadGroup: void <init>()>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.Thread: void exit()>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.ClassLoader: void <init>()>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.ClassLoader: void addClass(java.lang.Class)>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>",
  isMethod(?m).

ImplicitReachable(?m) :-
  ?m = "<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>",
  isMethod(?m).

/**
 * TODO: this method does not seems to be implicitly reachable. There is a
 * method Finalizer.runFinalization, but this method is invoked via a native call
 * from Runtime.runFinalization. runFinalizer is invoked from the FinalizerThread,
 * which the analyses should be able to figure out by itself.

ImplicitReachable("<java.lang.ref.Finalizer: void runFinalizer()>").
*/

// Make test entry points implicitly reachable by discovering their
// annotations. This can also discover the entry points of
// XCorpus. Testing frameworks supported: TestNG, JUnit, EvoSuite.
#ifdef DISCOVER_TESTS

ImplicitReachable(?m) :- Method_Annotation(?m, "org.testng.annotations.Test").
ImplicitReachable(?m) :- Method_Annotation(?m, "org.testng.annotations.BeforeMethod").

.decl JUnitAnnotatedMethod(?m:Method)
.output JUnitAnnotatedMethod

JUnitAnnotatedMethod(?m) :- Method_Annotation(?m, "org.junit.Test").
JUnitAnnotatedMethod(?m) :- Method_Annotation(?m, "org.junit.Before").
JUnitAnnotatedMethod(?m) :- Method_Annotation(?m, "org.junit.After").
JUnitAnnotatedMethod(?m) :- Method_Annotation(?m, "org.junit.BeforeClass").
JUnitAnnotatedMethod(?m) :- Method_Annotation(?m, "org.junit.AfterClass").

ImplicitReachable(?m) :- JUnitAnnotatedMethod(?m).

// If a type contains JUnit test code and a method that returns a
// JUnit Test, we assume that method is a reachable test generator.
ImplicitReachable(?testGen) :-
  Method_DeclaringType(?m, ?t),
  JUnitAnnotatedMethod(?m),
  Method_DeclaringType(?testGen, ?t),
  Method_ReturnType(?testGen, "junit.framework.Test").

// EvoSuite: if a call to Runtime.getInstance() is found in a method
// where a string constant refers to some class type, assume the class
// methods become entry points.
ImplicitReachable(?m) :-
  MethodInvocation_Method(?invo, "<org.evosuite.runtime.Runtime: org.evosuite.runtime.Runtime getInstance()>"),
  Instruction_Method(?invo, ?containerMeth),
  _AssignHeapAllocation(_, _, ?t, _, ?containerMeth, _),
  isClassType(?t),
  Method_DeclaringType(?m, ?t).

#endif // DISCOVER_TESTS

#endif // EXCLUDE_IMPLICITLY_REACHABLE_CODE
