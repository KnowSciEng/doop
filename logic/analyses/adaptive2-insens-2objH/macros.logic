/*
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromContext[ctx] = hctx
*/

#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromOne[FirstFromContext[ctx]] = hctx

#define AdvancedRecordBasisMacro(ctx, var, value) \
  RecordBasis(ctx, var, value)
  
#define CachedRecordMacro(ctx, value, hctx) \
  CachedRecord[ctx, value] = hctx

#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  EmptyContext[] = calleeCtx

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
  MergeBasis(callerCtx, hctx, invocation, value)

#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  CachedMerge[callerCtx, hctx, invocation, value] = calleeCtx

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  EmptyContext[] = calleeCtx

#define AdvancedMergeStaticBasisMacro(callerCtx, invocation) \
  MergeStaticBasis(callerCtx, invocation)

#define CachedMergeStaticMacro(callerCtx, invocation, calleeCtx) \
  CachedMergeStatic[callerCtx, invocation] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  EmptyContext[] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  EmptyContext[] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  EmptyContext[] = newCtx

#define InitContextMacro(valueId) \
  Context(ctx), EmptyContext[] = ctx

#define InitHContextMacro(valueId) \
  HContext(hctx), EmptyHContext[] = hctx

/*
#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromContext[EmptyContext[]] = hctx
*/