// For this analysis, every heap context recorded on allocation
// corresponds to the most significant element of the calling
// context of the allocator method.
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContext2FromContext[ctx]] = hctx

#define AdvancedRecordBasisMacro(ctx, var, value) \
  RecordBasis(var, ctx, value)
  
#define CachedRecordMacro(ctx, value, hctx) \
  CachedRecord[ctx, value] = hctx

// Regular 2objH context creator
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[Clock:Zero[], RealHContextFromHContext[hctx], value] = calleeCtx

// // Lhotak-style 2objH context creator
// #define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
//   Context(calleeCtx), \
//   ContextFromRealContext[Clock:Zero[], RealContext2FromContext[callerCtx], value] = calleeCtx

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
  MergeBasis(callerCtx, invocation, hctx, value)

#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  CachedMerge[callerCtx, invocation, hctx, value] = calleeCtx

// 2objH macro
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[Clock:Zero[], RealContext1FromContext[callerCtx], \
                         RealContext2FromContext[callerCtx]] = calleeCtx
                                         
#define AdvancedMergeStaticBasisMacro(callerCtx, invocation) \
  MergeStaticBasis(callerCtx, invocation)

#define CachedMergeStaticMacro(callerCtx, invocation, calleeCtx) \
  CachedMergeStatic[callerCtx, invocation] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[Clock:Zero[], RealHContextFromHContext[hctx], value] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[Clock:Zero[], RealHContextFromHContext[hctx], value] = calleeCtx


#define MergeOpenProgramEntryPointMacro(method, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[Clock:Zero[], value, value] = calleeCtx

// This is exactly equivalent to the regular merge logic, but written
// differently. At finalization, we create a new hctx, based on the
// callerCtx, and then use this new hctx as we would in regular Merge.
// The macro below does this, without referring to the new hctx (i.e.,
// using knowledge of how it is created). This is necessary because since
// the new hctx is created in the same rule, it will not yet have values
// for its inverse functions (RealHContextFromHContext), so the rule will never
// fire if done naively. The signature of the macro (which does not accept a
// hctx) is a hint for avoiding this problem.
#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[Clock:Zero[], RealContext2FromContext[callerCtx], value] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), ContextFromRealContext[Clock:Zero[], value, value] = ctx \
  <- Value:byId[valueId] = value

#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromRealHContext[value] = hctx \
  <- Value:byId[valueId] = value
