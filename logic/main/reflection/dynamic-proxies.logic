/* Models the dynamic proxies of Java.

   There are two ways to create a dynamic proxy instance:

   (1) G obj = (G)Proxy.newProxyInstance(c, i, h);
   (2) G obj = (G)Proxy.getProxyClass(c, i)
                       .getConstructor(InvocationHandler.class)
                       .newInstance(h);

   Compared to the spec, we have the following restrictions:

   (a) We create a single proxy per interface; if the user passes many
   interfaces, the analysis generates all possible single-interface
   proxies as a result.

   (b) We don't distinguish between different positions in the
   interface array and thus we don't use these Proxy properties
   (http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html):

     - "No two elements in the interfaces array may refer to identical
       Class objects."

     - "the order of the specified proxy interfaces is significant:
       two requests for a proxy class with the same combination of
       interfaces but in a different order will result in two distinct
       proxy classes"

     - Resolution of duplicate methods in interfaces according to the
       order of values in the interfaces array.

*/

ProxyClassOfInterface[?iface] = ?class <-
   DirectSuperinterface(?class, ?iface),
   ProxyClass(?class).
  
java:lang:reflect:Proxy:newProxyInstance(?invo, ?ret, ?handler, ?interfaces) <-
   StaticMethodInvocation:SimpleName[?invo] = "newProxyInstance",
   MethodInvocation:Method[?invo] = ?meth,
   Method:Id(?meth:"<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>"),
   ActualParam[1, ?invo] = ?interfaces,
   ActualParam[2, ?invo] = ?handler,
   AssignReturnValue[?invo] = ?ret.

ArrayContentsPointToInterface(?iface, ?hctx, ?arrayValue) <-
   ArrayIndexPointsTo(_, ?interfaceVal, ?hctx, ?arrayValue),
   OptReifiedClass(?iface, ?interfaceVal),
//// Old version: syntactic meta-object instead of semantic
//   ClassHeap:InstanceType[Value:Heap[?interfaceVal]] = ?iface,
   InterfaceType(?iface).

// Proxy.getProxyClass() is simpler than Proxy.newProxyInstance(): it
// does not allocate a proxy instance and takes no handler.
java:lang:reflect:Proxy:getProxyClass(?invo, ?ret, ?interfaces) <-
   StaticMethodInvocation:SimpleName[?invo] = "getProxyClass",
   MethodInvocation:Method[?invo] = ?meth,
   Method:Id(?meth:"<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>"),
   ActualParam[1, ?invo] = ?interfaces,
   AssignReturnValue[?invo] = ?ret.

VarPointsTo(?hctxImmutable, ?proxyClassObj, ?ctx, ?ret) <-
   java:lang:reflect:Proxy:getProxyClass(_, ?ret, ?interfaces),
   VarPointsTo(?hctx, ?interfacesVal, ?ctx, ?interfaces),
   ArrayContentsPointToInterface(?iface, ?hctx, ?interfacesVal),
   ProxyClassOfInterface[?iface] = ?proxyClass,
   ReifiedClass[?proxyClass] = ?proxyClassObj,
   ImmutableHContextFromContext[?ctx] = ?hctxImmutable.

// _OptVarPointsToForArray(?ctx, ?interfaces, ?hctx, ?interfacesValue) <-
//    VarPointsTo(?hctx, ?arrayObj, ?ctx, ?arrayVar),
//    Value:Heap[?arrayObj] = ?arrayHeap,
//    ArrayType(HeapAllocation:Type[?arrayHeap]).

Optjava:lang:reflect:Proxy:newProxyInstance(?ret, ?handler, ?interfaces, ?invo) <-
   java:lang:reflect:Proxy:newProxyInstance(?invo, ?ret, ?handler, ?interfaces).
   
// Create a new heap allocation per
// (newProxyInstance call, interface type) pair.
//// REVIEW: ideally these should be allocated context sensitively, i.e.,
//// call RecordMacro, and use the calling ?ctx as argument.
MockValueConsMacro(?valueId, ?proxyClass, ?value),
ProxyClassInstance[?iface, ?invo] = ?value
<-
   Optjava:lang:reflect:Proxy:newProxyInstance(_, _, _, ?invo),
   InterfaceType(?iface),
   ProxyClassOfInterface[?iface] = ?proxyClass,
   Type:Id(?iface:?ifaceName),
   Instruction:Id(?invo:?invoId),
   ?valueId = "<proxy object for interface " + ?ifaceName + " at " + ?invoId + ">".

MethodOfInterface(?meth, ?iface) <-
   InterfaceType(?iface),
   Method:DeclaringType[?meth] = ?iface.

MockValueConsMacro(?valueId, ?objArrayType, ?arrValue),
ArgArrayOfProxyMethod[?meth, ?invo] = ?arrValue
<-
   ProxyClassInstance[?iface, ?invo] = _,
   Instruction:Id(?invo:?invoId),
   Type:Id(?objArrayType:"java.lang.Object[]"),
   MethodOfInterface(?meth, ?iface),
   Method:Id(?meth:?methName),
   ?valueId = "<argument array for proxied method " + ?methName + " at " + ?invoId + ">".

// JLS 5.1.7 (Java 8).
// TODO Misses null-to-null boxing (is it useful for proxies?).
PrimitiveType:Boxed["boolean"] = "java.lang.Boolean".
PrimitiveType:Boxed["byte"   ] = "java.lang.Byte".
PrimitiveType:Boxed["short"  ] = "java.lang.Short".
PrimitiveType:Boxed["char"   ] = "java.lang.Character".
PrimitiveType:Boxed["int"    ] = "java.lang.Integer".
PrimitiveType:Boxed["long"   ] = "java.lang.Long".
PrimitiveType:Boxed["float"  ] = "java.lang.Float".
PrimitiveType:Boxed["double" ] = "java.lang.Double".

PrimitiveFormalOfInterface(?methName, ?formal, ?formalTypeId) <-
   MethodOfInterface(?meth, _),
   FormalParam[_, ?meth] = ?formal,
   Var:Type[?formal] = ?formalType,
   PrimitiveType(?formalType),
   Method:Id(?meth:?methName),
   Type:Id(?formalType:?formalTypeId).

// Primitive values passed as arguments to proxied methods, are boxed
// to be passed to the args array. Thus, for every primitive argument
// of a proxied method, we create a new value to show where
// boxing occurs in the method. This simulates codeWrapArgument() of
// sun.misc.ProxyGenerator, which calls the valueOf() method of the
// appropriate wrapper type for every argument of a primitive type.
// REVIEW: contexts (as above)?
MockValueConsMacro(?valueId, ?boxType, ?value),
BoxAllocationOfPrimitiveFormal[?formal] = ?value
 <-
   PrimitiveFormalOfInterface(?methName, ?formal, ?formalTypeId),
   PrimitiveType:Boxed[?formalTypeId] = ?boxTypeId,
   Var:Id(?formal:?formalId),
   Type:Id(?boxType:?boxTypeId),
   ?valueId = "<boxed " + ?boxTypeId + " argument for proxied method " + ?methName + " and formal " + ?formalId + ">".

// Return var of newProxyInstance should point to the appropriate
// dynamic proxy object.
//// REVIEW: as above, have a real heap context instead of immutable?
VarPointsTo(?hctxImmutable, ?value, ?ctx, ?ret) <-
   java:lang:reflect:Proxy:newProxyInstance(?invo, ?ret, _, ?interfaces),
   VarPointsTo(?hctx, ?interfacesVal, ?ctx, ?interfaces), 
   ArrayContentsPointToInterface(?iface, ?hctx, ?interfacesVal),
   ProxyClassInstance[?iface, ?invo] = ?value,
   ImmutableHContextFromContext[?ctx] = ?hctxImmutable.

Opt2java:lang:reflect:Proxy:newProxyInstance(?ret, ?interfaces, ?invo, ?handler) <-
   java:lang:reflect:Proxy:newProxyInstance(?invo, ?ret, ?handler, ?interfaces).

ProxyObject:Invocation[?value] = ?invo,
ProxyObject:Handler(?handlerObj, ?value),
ProxyObject:HandlerHctx(?hctxHandler, ?value),
ProxyObject:Interface[?value] = ?iface
<-
   Opt2java:lang:reflect:Proxy:newProxyInstance(_, _, ?invo, ?handler),
   VarPointsTo(?hctxHandler, ?handlerObj, _, ?handler), 
   ProxyClassInstance[?iface, ?invo] = ?value.


// And the clincher: if a method gets invoked on a proxy object, simulate
// a call to the proxy object handler's "invoke" method, with the right
// arguments passed in.
CallToMethodOfProxyObject(?value, ?ctx, ?invo) <-
   VirtualMethodInvocation:Insn(?invo),
   VirtualMethodInvocation:Base[?invo] = ?base,
   VarPointsTo(_, ?value, ?ctx, ?base),
   ProxyObject:Invocation[?value] = _.


//// REVIEW
// #ifdef REFLECTION_CONTEXT_SENSITIVITY
// ReflectiveMergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx), ...
ProxyCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?handlerInvokeMeth),
VarPointsTo(?hctxHandler, ?handlerObj, ?calleeCtx, ?this)
<-
   ImmutableContextFromContext[?callerCtx] = ?calleeCtx,
   CallToMethodOfProxyObject(?value, ?callerCtx, ?invo),
   ProxyObject:Handler(?handlerObj, ?value),
   ProxyObject:HandlerHctx(?hctxHandler, ?value),
   Value:Type[?handlerObj] = ?handlerType,
   Method:Id(?invoke:"<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"),
   Method:SimpleName[?invoke] = ?invokeMethName,
   Method:Descriptor[?invoke] = ?invokeMethDescriptor,
   MethodLookup[?invokeMethName, ?invokeMethDescriptor, ?handlerType] = ?handlerInvokeMeth,
   ThisVar[?handlerInvokeMeth] = ?this.

//// TODO From spec: if method has same name/signature as Object's
//// hashCode(), equals(), or toString(), then the reified Method
//// always comes from Object.
VarPointsTo(?hctx, ?proxyValue, ?calleeCtx, ?proxyArg),
VarPointsTo(?hctx, ?methValue, ?calleeCtx, ?methArg),
VarPointsTo(?hctx, ?argsArrValue, ?calleeCtx, ?argsArg),
ProxyCallArgArray(?invo, ?methSig, ?argsArrValue) <-
   ProxyCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?handlerInvokeMeth),
   CallToMethodOfProxyObject(?proxyValue, ?callerCtx, ?invo),
   FormalParam[0, ?handlerInvokeMeth] = ?proxyArg,
   FormalParam[1, ?handlerInvokeMeth] = ?methArg,
   FormalParam[2, ?handlerInvokeMeth] = ?argsArg,
   ImmutableHContextFromContext[?calleeCtx] = ?hctx,
   MethodInvocation:Method[?invo] = ?methSig,
   ReifiedMethod[?methSig] = ?methValue,
   ArgArrayOfProxyMethod[?methSig, ProxyObject:Invocation[?proxyValue]] = ?argsArrValue.

ReachableContext(?calleeCtx, ?callee) <-
   ProxyCallGraphEdge(_, _, ?calleeCtx, ?callee).

ArgArrayAndActualArg(?argsArrValue, ?methSig, ?actual) <-
   ProxyCallArgArray(?invo, ?methSig, ?argsArrValue),
   ActualParam[_, ?invo] = ?actual.

// Populate args array:
// (a) Reference-type arguments go in directly.
ArrayIndexPointsTo(?hctx, ?actualVal, ?hctx2, ?arrValue) <-
   ArgArrayAndActualArg(?arrValue, _, ?actual),
   VarPointsTo(?hctx, ?actualVal, ?ctx, ?actual),
   Var:Type[?actual] = ?actualType,
   ReferenceType(?actualType),
   ImmutableHContextFromContext[?ctx] = ?hctx2.
// (b) Primitive arguments are boxed first.
ArrayIndexPointsTo(?hctx, ?actualVal, ?hctx, ?arrValue) <-
   ArgArrayAndActualArg(?arrValue, ?methSig, _),
   FormalParam[_, ?methSig] = ?formal,
   BoxAllocationOfPrimitiveFormal[?formal] = ?actualVal,
   ImmutableHContext(?hctx).
// REVIEW: contexts.

// Handle return values: connect the return value of handler.invoke()
// to the return value of the wrapped method. The exceptions mandated
// by the spec are handled elsewhere (in exceptions.logic); here only
// we record the internal invoke() return variable for use there.
VarPointsTo(?hctx, ?retVal, ?callerCtx, ?ret),
ProxyInvokeResult(?callerCtx, ?invo, ?calleeCtx, ?handlerReturnVar)
<-
   ProxyCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?handlerInvokeMeth),
   ReturnVar(?handlerReturnVar, ?handlerInvokeMeth),
   VarPointsTo(?hctx, ?retVal, ?calleeCtx, ?handlerReturnVar),
   AssignReturnValue[?invo] = ?ret.
