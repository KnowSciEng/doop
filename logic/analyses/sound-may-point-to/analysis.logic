// A sound may-point-to analysis ("shall"-point-to, "True-may"-point-to). Does
// not conclude anything if it is not certain it over-approximates all possible
// points-to targets. That is, an empty points-to set means "anything can be
// pointed to".

MayContext(ctx) -> .
lang:entity(`MayContext).
lang:physical:storageModel[`MayContext] = "ScalableSparse".
lang:physical:capacity[`MayContext] = 2^32.

cons:MayContext:Initial[] = ctx -> MayContext(ctx).
lang:constructor(`cons:MayContext:Initial).

cons:MayContext:extend[invo, ctx] = pushedCtx ->
	MethodInvocation(invo), MayContext(ctx), MayContext(pushedCtx).
lang:constructor(`cons:MayContext:extend).

//// ====================================

MayHeapContext(hctx) -> .
lang:entity(`MayHeapContext).
lang:physical:storageModel[`MayHeapContext] = "ScalableSparse".
lang:physical:capacity[`MayHeapContext] = 2^23.

cons:MayHeapContext:Empty[] = hctx -> MayHeapContext(hctx).
lang:constructor(`cons:MayHeapContext:Empty).

//// ====================================

AccessPath(ap) -> .
lang:entity(`AccessPath).
lang:physical:storageModel[`AccessPath] = "ScalableSparse".
lang:physical:capacity[`AccessPath] = 2^23.

cons:AccessPath:byVar[var] = ap -> Var(var), AccessPath(ap).
lang:constructor(`cons:AccessPath:byVar).
cons:AccessPath:byStaticField[fld] = ap -> Field(fld), AccessPath(ap).
lang:constructor(`cons:AccessPath:byStaticField).
cons:AccessPath:byField[var, fld] = ap -> Var(var), Field(fld), AccessPath(ap).
lang:constructor(`cons:AccessPath:byField).
cons:AccessPath:extend[ap1, fld] = ap2 -> AccessPath(ap1), Field(fld), AccessPath(ap2).
lang:constructor(`cons:AccessPath:extend).
cons:AccessPath:mock[tag, var] = ap -> string(tag), Var(var), AccessPath(ap).
lang:constructor(`cons:AccessPath:mock).

//// ====================================

// TODO check
// Initial computed access paths. Faster than doing the same thing all over
AccessPath:Precomputed(ap) -> AccessPath(ap).

cons:MayContext:Initial[] = ctx, MayContext(ctx).
cons:MayHeapContext:Empty[] = hctx, MayHeapContext(hctx).

InitialRootMethodForMayAnalysis(method) <-
	// just for benchmarking against unsound VPT analysis
	//Reachable(method), // TODO this is not present
	ApplicationMethod(method).

// The rules below create access paths from all variables and all access fields
// in the program.
cons:AccessPath:byVar[var] = ap, AccessPath(ap),
AccessPath:Precomputed(ap) <-
	Var:Type[var] = type,
	ReferenceType(type).

// Invariant: all computed access paths are type safe: the fields exist in the
// static type of the prefix. REVIEW: This may (rarely) prevent detection of
// valid aliasing.
cons:AccessPath:byField[base, fld] = ap, AccessPath(ap),
AccessPath:Precomputed(ap) <-
	(LoadInstanceField:Base[insn] = base ;
	 StoreInstanceField:Base[insn] = base),
	FieldInstruction:Signature[insn] = fld,
	Field:Type[fld] = type,
	ReferenceType(type).

cons:AccessPath:byStaticField[fld] = ap, AccessPath(ap),
AccessPath:Precomputed(ap) <-
	(LoadStaticField:To[insn] = _ ;
	 StoreStaticField:From[insn] = _),
	FieldInstruction:Signature[insn] = fld,
	Field:Type[fld] =type,
	ReferenceType(type).

//// ====================================
//// BEGIN access path definitions, creation and other auxiliary

// Any access path relevant to the analysis should be marked. This
// lazy creation is what makes access path concepts be
// analysis-phase-specific, as opposed to having a single global
// definition
//.decl ComputedAccessPath(ap:AccessPath) output

// REVIEW/TODO: current policy of access-path creation is roughly:
//  -create APs for all local vars, anywhere
//  -create APs for all var.fld load/store expressions in the program text
//  -create APs by rebasing APs that may point somewhere at calls/returns

// The rules below create access paths from all variables
// and all access fields in the program.
//ComputedAccessPath(ap) <- InitialComputedAccessPath(ap).

AccessPath:IsSimple(ap) <-
  cons:AccessPath:byVar[_] = ap ;
  cons:AccessPath:byStaticField[_] = ap.

AccessPath:IsComposite(ap) <-
  cons:AccessPath:byField[_, _] = ap ;
  cons:AccessPath:extend[_, _] = ap ;
  cons:AccessPath:mock[_, _] = ap.

AccessPath:Length[ap] = 1 <-
  AccessPath:IsSimple(ap).

AccessPath:Length[ap] = 2 <-
  cons:AccessPath:byField[_, _] = ap ;
  cons:AccessPath:mock[_, _] = ap.

AccessPath:Length[ap] = len0 + 1 <-
  cons:AccessPath:extend[ap0, _] = ap,
  AccessPath:Length[ap0] = len0.

AccessPath:ContainsField(fld, ap) <-
  cons:AccessPath:byStaticField[fld] = ap ;
  cons:AccessPath:byField[_, fld] = ap ;
  cons:AccessPath:extend[_, fld] = ap.

AccessPath:ContainsField(fld, ap) <-
  cons:AccessPath:extend[ap0, _] = ap,
  AccessPath:ContainsField(fld, ap0).

AccessPath:ContainsStaticField(fld, ap) <-
  cons:AccessPath:byStaticField[fld] = ap.

AccessPath:ContainsStaticField(fld, ap) <-
  cons:AccessPath:extend[ap0, _] = ap,
  AccessPath:ContainsStaticField(fld, ap0).

AccessPath:ContainsStaticField:Opt(ap, fld) <-
  AccessPath:ContainsStaticField(fld, ap).

AccessPath:BaseVar[ap] = base <-
  cons:AccessPath:byVar[base] = ap ;
  cons:AccessPath:byField[base, _] = ap ;
  cons:AccessPath:mock[_, base] = ap.

AccessPath:BaseVar[ap] = base <-
  cons:AccessPath:extend[ap0, _] = ap,
  AccessPath:BaseVar[ap0] = base.

AccessPath:SingleField(fld, ap) <-
  cons:AccessPath:byStaticField[fld] = ap.

// TODO REVIEW: missing dummyCollection?
AccessPath:SingleField(fld, ap) <-
  cons:AccessPath:byField[_, fld] = ap.

AccessPath:DoubleField(fld1, fld2, ap) <-
  cons:AccessPath:byStaticField[fld1] = ap0,
  cons:AccessPath:extend[ap0, fld2] = ap.

// TODO REVIEW byField: missing cases for vars?
AccessPath:DoubleField(fld1, fld2, ap) <-
  cons:AccessPath:byField[_, fld1] = ap0,
  cons:AccessPath:extend[ap0, fld2] = ap.
  //cons:AccessPath:byVar[_] = ap0.

// Is the access path a special one, based on a variable of collection type.
// Incompatible with all other access path types. The access path represents
// all the *contents* of the collection (not the collection that the var
// points-to, but all the objects that the collection points-to internally).
cons:AccessPath:mock["dummyCollection", base] = ap, AccessPath(ap),
AccessPath:IsCollection(ap) <-
  Var:Type[base] = type,
  (ArrayType(type);
   LibraryCollectionType(type)).

AccessPath:ShouldBeRebased(ap0, from, to) ->
  AccessPath(ap0), Var(from), Var(to).
// If some access path is to be rebased, its non-var prefixes are as well.
AccessPath:ShouldBeRebased(ap0, from, to) <-
  AccessPath:ShouldBeRebased(ap, from, to),
  cons:AccessPath:extend[ap0, _] = ap,
  AccessPath:BaseVar[ap] = from. // TODO needed?

AccessPath:RebaseComposite(ap, from, to, newAp) ->
  AccessPath(ap), Var(from), Var(to), AccessPath(newAp).
// TODO REVIEW if they need to be constructed
cons:AccessPath:byVar[to] = newAp, AccessPath(newAp),
AccessPath:RebaseComposite(ap, from, to, newAp) <-
  AccessPath:ShouldBeRebased(ap, from, to),
  cons:AccessPath:byVar[from] = ap.

cons:AccessPath:byField[to, fld] = newAp, AccessPath(newAp),
AccessPath:RebaseComposite(ap, from, to, newAp) <-
  AccessPath:ShouldBeRebased(ap, from, to),
  cons:AccessPath:byField[from, fld] = ap.

cons:AccessPath:extend[newAp0, fld] = newAp, AccessPath(newAp),
AccessPath:RebaseComposite(ap, from, to, newAp) <-
  AccessPath:ShouldBeRebased(ap, from, to),
  cons:AccessPath:extend[ap0, fld] = ap,
  AccessPath:RebaseComposite(ap0, from, to, newAp0).

//// END access path definitions, creation and other auxiliary
//// ====================================



#include "intraprocedural-must.logic"
#include "must-alias.logic"
#include "must-point-to.logic"
#include "sound-may.logic"

//// ====================================
//// BEGIN configuration

MayContext:MaxDepth[]  = 4.
AccessPath:MaxLength[] = 3.

IMustAlias as MustAlias1//, MustAlias2
IMustPointTo as MustPoint1//, MustPoint2
SoundMay as SoundMay1//, SoundMay2

MustAlias1 { MustAlias } -> SoundMay1
MustPoint1 { VarMustAlias, VarMustAlias:This } -> SoundMay1

//MustAlias2 { MustAlias } -> SoundMay2
//MustPoint2 { VarMustAlias, VarMustAlias:This } -> SoundMay2
//SoundMay1  { MayCallGraphEdge, ReachableContext:May } -> SoundMay2
//
//
//IMustAlias as MustAlias3
//SoundMustPointTo as MustPoint3
//SoundMay as SoundMay3
//
//MustAlias3 { MustAlias } -> SoundMay3
//MustPoint3 { VarMustAlias, VarMustAlias:This } -> SoundMay3
//SoundMay2  { MayCallGraphEdge, ReachableContext:May } -> SoundMay3
//
//
//IMustAlias as MustAlias4
//SoundMustPointTo as MustPoint4
//SoundMay as SoundMay4
//
//MustAlias4 { MustAlias } -> SoundMay4
//MustPoint4 { VarMustAlias, VarMustAlias:This } -> SoundMay4
//SoundMay3  { MayCallGraphEdge, ReachableContext:May } -> SoundMay4
//
//
//IMustAlias as MustAlias5
//SoundMustPointTo as MustPoint5
//SoundMay as SoundMay5
//
//MustAlias5 { MustAlias } -> SoundMay5
//MustPoint5 { VarMustAlias, VarMustAlias:This } -> SoundMay5
//SoundMay4  { MayCallGraphEdge, ReachableContext:May } -> SoundMay5
//
//
//IMustAlias as MustAlias6
//SoundMustPointTo as MustPoint6
//SoundMay as SoundMay6
//
//MustAlias6 { MustAlias } -> SoundMay6
//MustPoint6 { VarMustAlias, VarMustAlias:This } -> SoundMay6
//SoundMay5  { MayCallGraphEdge, ReachableContext:May } -> SoundMay6
//
//
//IMustAlias as MustAlias7
//SoundMustPointTo as MustPoint7
//SoundMay as SoundMay7
//
//MustAlias7 { MustAlias } -> SoundMay7
//MustPoint7 { VarMustAlias, VarMustAlias:This } -> SoundMay7
//SoundMay6  { MayCallGraphEdge, ReachableContext:May } -> SoundMay7
//
//
//IntraproceduralMust as IntraMustForStats
//SoundMay1 { ReachableContext:May } -> IntraMustForStats

//// END configuration
//// ====================================



ClinitMethodOfClass[class] = method <-
	Method:SimpleName[method] = "<clinit>",
	Method:DeclaringType[method] = class.

LibraryCollectionType(type) <-
	(root = "java.util.AbstractCollection" ;
	 root = "java.util.AbstractMap"),
	SubtypeOf(type, root).

// TODO model iterators
// TODO Should these use LibraryCollectionType?
LibraryCollectionStoreOperation(invo) <-
	VirtualMethodInvocation:SimpleName[invo] = "add";
	VirtualMethodInvocation:SimpleName[invo] = "push";
	VirtualMethodInvocation:SimpleName[invo] = "set";
	VirtualMethodInvocation:SimpleName[invo] = "put".
LibraryCollectionLoadOperation(invo) <-
	VirtualMethodInvocation:SimpleName[invo] = "peek";
	VirtualMethodInvocation:SimpleName[invo] = "pop";
	VirtualMethodInvocation:SimpleName[invo] = "elementAt";
	VirtualMethodInvocation:SimpleName[invo] = "firstElement";
	VirtualMethodInvocation:SimpleName[invo] = "lastElement";
	VirtualMethodInvocation:SimpleName[invo] = "remove";
	// TODO better match in future
	VirtualMethodInvocation:SimpleName[invo] = "get".

// TODO why not functional
StoreCollection:From(insn, from) <-
	StoreArrayIndex:From[insn] = from.
StoreCollection:From(invo, from) <-
	LibraryCollectionStoreOperation(invo),
	(ActualParam[1, invo] = from;
	 ActualParam[2, invo] = from).

StoreCollection:Base[insn] = base <-
	StoreArrayIndex:Base[insn] = base.
StoreCollection:Base[invo] = base <-
	LibraryCollectionStoreOperation(invo),
	VirtualMethodInvocation:Base[invo] = base.

LoadCollection:To[insn] = to <-
	LoadArrayIndex:To[insn] = to.
LoadCollection_To[invo] = to <-
	LibraryCollectionLoadOperation(invo),
	AssignReturnValue[invo] = to.

LoadCollection:Base[insn] = base <-
	LoadArrayIndex:Base[insn] = base.
LoadCollection:Base[invo] = base <-
	LibraryCollectionLoadOperation(invo),
	VirtualMethodInvocation:Base[invo] = base.

// Some calls to native or otherwise complex methods need to be modeled, i.e.,
// ignored. E.g., fillInStackTrace is a native method called in the constructor
// of a (ubiquitous) java.lang.Throwable. If not ignored, no image of the heap
// propagates anywhere.
// TODO do a better match (on full sig) than just on SimpleName.
MethodInvocation:Ignorable(invo) <-
	VirtualMethodInvocation:SimpleName[invo] = "fillInStackTrace"; // Throwable
	VirtualMethodInvocation:SimpleName[invo] = "equals";  // Object
	VirtualMethodInvocation:SimpleName[invo] = "hashCode";
	VirtualMethodInvocation:SimpleName[invo] = "toString";
	VirtualMethodInvocation:SimpleName[invo] = "println"; // PrintStream
	StaticMethodInvocation:SimpleName[invo] = "parseInt"; // Integer
	VirtualMethodInvocation:SimpleName[invo] = "endsWith"; // String
	StaticMethodInvocation:SimpleName[invo] = "floatToRawIntBits"; // Float
	// Used in the HashMap "put" method!
	StaticMethodInvocation:SimpleName[invo] = "intBitsToFloat";
	// From this point on, it's just a test to see if these natives matter.
	StaticMethodInvocation:SimpleName[invo] = "encoding"; // Console
	StaticMethodInvocation:SimpleName[invo] = "echo";
	StaticMethodInvocation:SimpleName[invo] = "istty";
	VirtualMethodInvocation:SimpleName[invo] = "sync"; // FileDescriptor
	StaticMethodInvocation:SimpleName[invo] = "initIDs";
	VirtualMethodInvocation:SimpleName[invo] = "open"; // FileInputStream
	VirtualMethodInvocation:SimpleName[invo] = "read0";
	VirtualMethodInvocation:SimpleName[invo] = "readBytes";
	VirtualMethodInvocation:SimpleName[invo] = "skip";
	VirtualMethodInvocation:SimpleName[invo] = "available";
	VirtualMethodInvocation:SimpleName[invo] = "close0";
	VirtualMethodInvocation:SimpleName[invo] = "write"; // FileOutputStream
	VirtualMethodInvocation:SimpleName[invo] = "writeBytes";
	VirtualMethodInvocation:SimpleName[invo] = "availableProcessors"; // Runtime
	VirtualMethodInvocation:SimpleName[invo] = "freeMemory";
	VirtualMethodInvocation:SimpleName[invo] = "totalMemory";
	VirtualMethodInvocation:SimpleName[invo] = "maxMemory";
	VirtualMethodInvocation:SimpleName[invo] = "gc";
	StaticMethodInvocation:SimpleName[invo] = "runFinalization0";
	StaticMethodInvocation:SimpleName[invo] = "sin"; // StrictMath
	StaticMethodInvocation:SimpleName[invo] = "cos";
	StaticMethodInvocation:SimpleName[invo] = "tan";
	StaticMethodInvocation:SimpleName[invo] = "log";
	StaticMethodInvocation:SimpleName[invo] = "pow";
	StaticMethodInvocation:SimpleName[invo] = "currentThread"; // Thread
	StaticMethodInvocation:SimpleName[invo] = "yield";
	StaticMethodInvocation:SimpleName[invo] = "sleep";
	VirtualMethodInvocation:SimpleName[invo] = "start0";
	VirtualMethodInvocation:SimpleName[invo] = "isInterrupted";
	VirtualMethodInvocation:SimpleName[invo] = "isAlive";
	StaticMethodInvocation:SimpleName[invo] = "holdsLock";
	StaticMethodInvocation:SimpleName[invo] = "getThreads";
	StaticMethodInvocation:SimpleName[invo] = "dumpThreads";
	VirtualMethodInvocation:SimpleName[invo] = "setPriority";
	VirtualMethodInvocation:SimpleName[invo] = "stop0";
	VirtualMethodInvocation:SimpleName[invo] = "suspend0";
	VirtualMethodInvocation:SimpleName[invo] = "resume0";
	VirtualMethodInvocation:SimpleName[invo] = "interrupt0";
	VirtualMethodInvocation:SimpleName[invo] = "isAlive";
	VirtualMethodInvocation:SimpleName[invo] = "getStackTraceDepth"; // Throwable
	VirtualMethodInvocation:SimpleName[invo] = "getStackTraceElement";
	VirtualMethodInvocation:SimpleName[invo] = "forkAndExec";  // UnixProcess
	VirtualMethodInvocation:SimpleName[invo] = "wait"; // Object
	VirtualMethodInvocation:SimpleName[invo] = "notify";
	VirtualMethodInvocation:SimpleName[invo] = "notifyAll".

StaticMethodInvocation:Ignorable(invo) <-
	VirtualMethodInvocation:SimpleName[invo] = "intern"; // String
	VirtualMethodInvocation:SimpleName[invo] = "clone"; // Object
	VirtualMethodInvocation:SimpleName[invo] = "append". // StringBuilder

MethodInvocation:NonCollection(invo) <-
	LibraryCollectionStoreOperation(invo);
	LibraryCollectionLoadOperation(invo).

StoreInstruction(insn) <-
	StoreStaticField:From[insn] = _ ;
	StoreInstanceField:From[insn] = _.


// Just a dumb overapproximation: is there any call site at all,
// resolved or otherwise used only for collections.
Instruction:FirstInMethod(insn) <-
	Method:FirstInstruction[_] = insn.

BBHeadIsFirstInstruction(firstInsn) <-
	BasicBlockBegin(firstInsn),
	Instruction:FirstInMethod(firstInsn).

BasicBlockContainsCall(headInsn) <-
	BasicBlockHead[insn] = headInsn,
	MethodInvocation(insn),
	!MethodInvocation:Ignorable(insn).

SomePathBetweenBasicBlocksContainsCall(prev, next) <-
	BasicBlockContainsCall(prev),
	MaySuccessorBBModuloThrow(next, prev).

SomePathFromFirstInstructionContainsCall(blockHead) <-
	BBHeadIsFirstInstruction(firstInsn),
	SomePathBetweenBasicBlocksContainsCall(firstInsn, blockHead).


// Ignore verification of calculation in head (for toString)
lang:compiler:warning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = false.

AccessPath:toString[ap] = str <-
  cons:AccessPath:byVar[var] = ap,
  Var:Id(var:str).

AccessPath:toString[ap] = str <-
  cons:AccessPath:byStaticField[fld] = ap,
  Field:Id(fld:str).

AccessPath:toString[ap2] = str2 <-
  cons:AccessPath:byField[var, fld] = ap2,
	Var:Id(var:varStr),
  Field:Id(fld:fldStr),
  str2 = varStr + "." + fldStr.

AccessPath:toString[ap2] = str2 <-
  cons:AccessPath:extend[ap1, fld] = ap2,
  Field:Id(fld:fldStr),
  AccessPath:toString[ap1] = str1,
  str2 = str1 + "." + fldStr.

/*
  // TODO not updated for LB
  ///// POINT1--unchanged access paths code

  //// Dealing with unchanged access paths (below) hasn't proven
  //// worthwhile. It's not surprising. The callee has no name for
  //// this access path. The only hope is that it will survive through
  //// virtual calls and will come back to the caller (whereas the
  //// conservative must-pre-analysis won't consider virtual calls it
  //// cannot resolve in its naive way).

  // This is quite expensive if not restricted. Currently used only for
  // non-resolved virtual calls. For resolved ones, we have a frame rule
  // to propagate the information right over the method call in many
  // cases (and we ignore the rest for now).
  // ChangedBaseAtInvocation(var, invo) <-
  //   ActualParam[_, invo] = var;
  //   VirtualMethodInvocation:Base[invo] = var;
  //   SpecialMethodInvocation:Base[invo] = var.

  // OptPotentialAccessPathMayPointToPropagation(hctx, heap, invo, calleeCtx, toMethod, ap) <-
  //   MayCallGraphEdge_ToMethod(toMethod, callerCtx, invo),
  //   !May_MustCallGraphEdge_ToMethod(callerCtx, invo, toMethod),
  //   MayCallGraphEdge_Context(callerCtx, invo, calleeCtx),
  //   Before_AccessPathMayPointTo(hctx, heap, ap, callerCtx, invo).

  // Before_AccessPathMayPointTo(hctx, heap, ap, calleeCtx, firstInsn) <_
  //    OptPotentialAccessPathMayPointToPropagation(hctx, heap, invo, calleeCtx, toMethod, ap),
  //    AccessPath:BaseVar[ap] = baseVar,
  //    !ChangedBaseAtInvocation(baseVar, invo),
  //    SingleFieldAccessPath(fld, ap),
  //    (MethodMayAssignField(fld, toMethod);
  //     MethodHasUnresolvedInvocation(toMethod)),
  //    Method:FirstInstruction[toMethod] = firstInsn.

  // Before_AccessPathMayPointTo(hctx, heap, ap, calleeCtx, firstInsn) <-
  //    OptPotentialAccessPathMayPointToPropagation(hctx, heap, invo, calleeCtx, toMethod, ap),
  //    AccessPath:BaseVar[ap] = baseVar,
  //    !ChangedBaseAtInvocation(baseVar, invo),
  //    _DoubleFieldAccessPath(fld1, fld2, ap),
  //    (MethodMayAssignField(fld1, toMethod);
  //     MethodMayAssignField(fld2, toMethod);
  //     MethodHasUnresolvedInvocation(toMethod)),
  //    Method:FirstInstruction[toMethod] = firstInsn.
*/
/*
// TODO not updated for LB
// POINT4 code
 //// Commented out for now. Does not make that much difference.
 //// InstanceFieldMayPointTo inferences rarely get stopped because of
 //// library calls.
 //// ------------------------------
 // Logic for assuming the library does not affect application fields,
 // except via reflection.
 ApplicationField(fld) <-
    Field:DeclaringClass[fld] = class,
    ApplicationClass(class).

 MethodCallsReflection(meth) <-
    Instruction:Method[invo] = meth,
    MethodInvocation_Signature(invo, sig),
    string_substring(sig, 0, _, "<java.lang.reflect").

 _Opt2MethodInvocation_Signature(invo, inMeth, toMeth) <-
    (StaticMethodInvocation:Insn(invo);
     SpecialMethodInvocation:Insn(invo)),
    MethodInvocation_Signature(invo, toMeth),
    Instruction:Method[invo] = inMeth.

 // exact resolution for static/special
 MethodCallsReflection(inMeth) <-
    _Opt2MethodInvocation_Signature(_, inMeth, toMeth),
    MethodCallsReflection(toMeth).

 // underapproximation of virtual method resolution, as if static
 _Opt2MethodInvocation_Signature(invo, inMeth, toMeth) <-
    VirtualMethodInvocation:Insn(invo),
    MethodInvocation_Signature(invo, toMeth),
    Instruction:Method[invo] = inMeth.

 // Naive virtual method resolution, based on name. REVIEW: too conservative
 _OptVirtualMethodInvocation_Simplename(inMeth, simpleName) <-
    VirtualMethodInvocation_SimpleName(invo, simpleName),
    Instruction:Method[invo] =inMeth.

 MethodCallsReflection(inMeth) <-
    MethodCallsReflection(toMeth),
    MethodSignature_SimpleName(toMeth, toMethSimpleName),
    _OptVirtualMethodInvocation_Simplename(inMeth, toMethSimpleName).

 InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn) <-
    AllPredecessors_InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn),
    MethodInvocation_Signature(insn, calledMethod), // underapproximate
 //   string_substring[calledMethod, 0, string_length[str]] != str, str = "<java.lang.reflect",
    !MethodCallsReflection(calledMethod),
    ApplicationField(fld),
    !ApplicationMethod(calledMethod).

 StaticFieldMayPointTo(hctx, heap, fld, ctx, insn) <-
    AllPredecessors_StaticFieldMayPointTo(hctx, heap, fld, ctx, insn),
    MethodInvocation_Signature(insn, calledMethod),
 //   string_substring[calledMethod, 0, string_length[str]] != str, str = "<java.lang.reflect",
    !MethodCallsReflection(calledMethod),
    ApplicationField(fld),
    !ApplicationMethod(calledMethod).

 // TODO: also extend to collections
*/
/*
 TODO not updated for LB
// POINT5: DominatedPathMayInvalidateFieldPointsTo
 // TODO: currently has no impact. Comment out and re-check when non-invalidating
 //       method calls are added

 // Interesting addition to frame rules:
 // propagate in case of non-invalidating dominated predecessors.

 // The path (dominated by dominator) that ends at insn
 // may invalidate some field.
 DominatedPathMayInvalidateFieldPointsTo(fld, insn, dominator) <-
    Dominates(dominator, insn),
    BasicBlockMayInvalidateFieldPointsTo(fld, insn).

 DominatedPathMayInvalidateFieldPointsTo(fld, insn, dominator) <-
    DominatedPathMayInvalidateFieldPointsTo(fld, otherInsn, dominator),
    MaySuccessorBBModuloThrow(insn, otherInsn),
    Dominates(dominator, insn).

 ExistsFieldInvalidatingPathToPredecessor(fld, prevHead, dominator) <-
    DominatesItsPredecessorInstruction(prevInsn, dominator),
    BasicBlockHead(prevInsn, prevHead),
    DominatedPathMayInvalidateFieldPointsTo(fld, prevHead, dominator).

 ExistsFieldInvalidatingPathToSomePredecessor(fld, dominator) <-
    ExistsFieldInvalidatingPathToPredecessor(fld, _, dominator).

 BasicBlockMayInvalidateAllFieldsPointsTo(headInsn) <-
    BasicBlockHead(insn, headInsn),
    !IndifferentInstruction(insn),
    !FieldInstruction(insn).

 // The path (dominated by dominator) that ends at insn
 // may invalidate any field.
 DominatedPathMayInvalidateAllFieldsPointsTo(insn, dominator) <-
    Dominates(dominator, insn),
    BasicBlockMayInvalidateAllFieldsPointsTo(insn).

 DominatedPathMayInvalidateAllFieldsPointsTo(insn, dominator) <-
    DominatedPathMayInvalidateAllFieldsPointsTo(otherInsn, dominator),
    MaySuccessorBBModuloThrow(insn, otherInsn),
    Dominates(dominator, insn).

 ExistsAllFieldsInvalidatingPathToPredecessor(prevHead, dominator) <-
    DominatesItsPredecessorInstruction(prevInsn, dominator),
    BasicBlockHead(prevInsn, prevHead),
    DominatedPathMayInvalidateAllFieldsPointsTo(prevHead, dominator).

 ExistsAllFieldsInvalidatingPathToSomePredecessor(dominator) <-
    ExistsAllFieldsInvalidatingPathToPredecessor(_, dominator).

 InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn) <-
    AllNonDomPredecessors_InstanceFieldMayPointTo(hctx, heap, fld, hctxBase, baseHeap, ctx, insn),
    !ExistsFieldInvalidatingPathToSomePredecessor(fld, insn),
    !ExistsAllFieldsInvalidatingPathToSomePredecessor(insn),
    DominatesItsPredecessorInstruction(_, insn).

 StaticFieldMayPointTo(hctx, heap, fld, ctx, insn) <-
    AllNonDomPredecessors_StaticFieldMayPointTo(hctx, heap, fld, ctx, insn),
    !ExistsFieldInvalidatingPathToSomePredecessor(fld, insn),
    !ExistsAllFieldsInvalidatingPathToSomePredecessor(insn),
    DominatesItsPredecessorInstruction(_, insn).

 // TODO: update with collections
*/
