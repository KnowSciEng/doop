@Entity Animal.
@Entity Cat -> Animal.

@Constructor
cons:A[x] = y -> string(x), Animal(y).

Foo(a, b) -> Animal(a), string(b).

new<<cons:A[z] = x AS Animal>>,
Foo(x, z) <- z = "bird".

// Animal x string
new<<cons:A[z] = x AS Animal>>,
Foo2(x, z) <- z = "bird".

// string x Cat
new<<cons:A[z] = x As Cat>>,
Bar(z, x) <- z = "kitty".

// string x Animal
Ble(a, b) <- cons:A[a] = b.

// string x Animal
FooBar(y, z) <- Ble(y, z), Baz(z).

// string x Cat (see below)
FooBar2(x, y) <- Bar(x, y).

// Animal
Baz(x) <- Foo(x, _).
Baz(x) <- Bar(_, x).

// string x Animal
FooBar2(x, y) <- x = "foo", Baz(y).

// string x Cat (see below)
Part1(x, y) <- Bar(x, y).

// Cat x string (see below)
Part2(x, y) <- Part1(y, x).

// string x Animal
// Also update Part2: Animal x string
Part1(x, y) <- Foo2(y, x).