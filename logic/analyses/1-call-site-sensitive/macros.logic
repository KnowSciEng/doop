// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[] = hctx


// For this analysis the context of a method call corresponds to the
// invocation site of the method.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[invocation] = calleeCtx

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[invocation] = calleeCtx

#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContextFromContext[callerCtx]] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[StartupInvocation[]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[FakeInvocation:RegisterFinalize[value]] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), ContextFromRealContext[value] = ctx \
  <- MethodInvocationValue(value, valueId)

#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromRealHContext[] = hctx
