/**
 * Context-sensitive pointer analysis with context of 2 call sites and
 * a context-sensitive heap abstraction of 2 call sites.
 */

// In this analysis, the real context and the real heap context
// are pairs of MethodInvocations. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).

ContextFromRealContext[?invocation1, ?invocation2] = ?ctx ->
  Context(?ctx), CallGraphEdgeSource(?invocation1), CallGraphEdgeSource(?invocation2).
lang:skolem(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?invocation -> 
  Context(?ctx), CallGraphEdgeSource(?invocation).
RealContext2FromContext[?ctx] = ?invocation -> 
  Context(?ctx), CallGraphEdgeSource(?invocation).

RealContext1FromContext[?ctx] = ?invocation1,
RealContext2FromContext[?ctx] = ?invocation2 <- 
  ContextFromRealContext[?invocation1, ?invocation2] = ?ctx.

HContextFromRealHContext[?invocation1, ?invocation2] = ?hctx ->
  HContext(?hctx), CallGraphEdgeSource(?invocation1), CallGraphEdgeSource(?invocation2).
lang:skolem(`HContextFromRealHContext).
RealHContext1FromHContext[?hctx] = ?invocation -> 
  HContext(?hctx), CallGraphEdgeSource(?invocation).
RealHContext2FromHContext[?hctx] = ?invocation -> 
  HContext(?hctx), CallGraphEdgeSource(?invocation).

RealHContext1FromHContext[?hctx] = ?invocation1,
RealHContext2FromHContext[?hctx] = ?invocation2 <-
  HContextFromRealHContext[?invocation1, ?invocation2] = ?hctx.

HContext(?hctx),
HContextFromRealHContext[?immutable, ?immutable] = ?hctx,
ImmutableHContext(?hctx) <-
  // Special immutable constant
  MethodInvocationValue(?immutable, "<<immutable>>").



// Create initial objects with their heapcontexts.
HContextFromRealHContext[?invocation1, ?invocation2] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?invocation1, ?invocation2, ?alloc).

HContextFromRealHContext[?invocation1, ?invocation2] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?invocation1, ?invocation2, ?alloc).

HContextFromRealHContext[?invocation1, ?invocation2] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?invocation1, ?invocation2, ?alloc).

StartupInvocation[] = ?startupInvocation <-
  MethodInvocationValue(?startupInvocation, "<<jvm-startup>>").

/**
 * Merge optimization hack
 */

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
MyMergeBasis(?callerCtx, ?invocation) <-
  MergeBasis(_, _, ?callerCtx, ?invocation).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealContext2FromContext[?callerCtx], ?invocation] = ?calleeCtx,
CachedMergeRefined[?callerCtx, ?invocation] = ?calleeCtx <-
  MyMergeBasis(?callerCtx, ?invocation).


/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?realCtx, ?realCtx] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  MethodInvocationValue(?realCtx, "<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?realCtx, ?realCtx] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  MethodInvocationValue(?realCtx, "<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?realCtx, ?realCtx] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  MethodInvocationValue(?realCtx, "<<class-initialization>>").
