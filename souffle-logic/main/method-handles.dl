/*************************************************************
 * MethodHandle constants
 *************************************************************/

HeapAllocation_ContextInsensitive(?heap) :-
   isMethodHandleConstant(?heap).

#define LAMBDA_METAFACTORY "<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>"

#define LAMBDA_ALTMETAFACTORY "<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite altMetafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])>"

/** Phase 1: Linkage (creating a CallSite) **/

// Find invocations to the lambda metafactories.
.decl LambdaMetafactoryInvoke(?invokedynamic:DynamicMethodInvocation_Insn, ?dynName:symbol, ?interface:InterfaceType)
LambdaMetafactoryInvoke(?invokedynamic, ?dynName, ?interface) :-
   isDynamicMethodInvocation_Insn(?invokedynamic),
   Instruction_Method(?invokedynamic, ?inMethod),
   Reachable(?inMethod),
   DynamicMethodInvocation_Bootstrap(?invokedynamic, ?method),
   (?method = LAMBDA_METAFACTORY ; ?method = LAMBDA_ALTMETAFACTORY),
   DynamicMethodInvocation_DynName(?invokedynamic, ?dynName),
   DynamicMethodInvocation_DynReturnType(?invokedynamic, ?interface).

// Record invokedynamic invocations whose bootstrap methods are not
// handled at all.
.decl UnhandledInvokedynamic(?invokedynamic:DynamicMethodInvocation_Insn, ?bootMethodId:symbol)

UnhandledInvokedynamic(?invokedynamic, ?bootMethodId) :-
   DynamicMethodInvocation_Bootstrap(?invokedynamic, ?bootMethodId),
   !LambdaMetafactoryInvoke(?invokedynamic, _, _).

#define MOCK_LAMBDA_CALL_SITE(invo, ret, type, method, real, name) \
   cat(invo, cat("::: ", cat(ret, cat("::: (Mock)::: ", cat("reference ", cat(type, cat ("::", cat(method, cat(" from ", cat(real, cat(" wrapped as ", cat(ret, cat(".", name)))))))))))))

.decl LambdaCallSite(?callsite:Value, ?dynName:symbol, ?dynRet:Type, ?implMethod:Method)
.decl LambdaCallSite_Invokedynamic(?callsite:Value, ?invokedynamic:DynamicMethodInvocation_Insn)
.decl LambdaCallSite_K(?callsite:Value, ?K:number)
.decl InvokedynamicBootstrapCtx(?invokedynamic:DynamicMethodInvocation_Insn, ?ctx:configuration.Context)

InvokedynamicBootstrapCtx(?invokedynamic, ?ctx),
VarPointsTo(?hctx, ?callsite, ?ctx, ?var),
MockValueConsMacro(?callsite, ?samType),
LambdaCallSite_Invokedynamic(?callsite, ?invokedynamic),
LambdaCallSite_K(?callsite, ?K),
LambdaCallSite(?callsite, ?dynName, ?samType, ?implMethod) :-
   LambdaMetafactoryInvoke(?invokedynamic, ?dynName, ?samType),
   DynamicMethodInvocation_DynArity(?invokedynamic, ?K),
   BootstrapParam(1, ?invokedynamic, ?handleVar),
   VarPointsTo(?hctx, ?handleVal, ?ctx, ?handleVar),
   MethodHandleConstant_Method(?handleVal, ?implMethod),
   isInterfaceType(?samType),
   AssignReturnValue(?invokedynamic, ?var),
   // Used to generate friendly description for the generated mock value.
   Method_SimpleName(?implMethod, ?handleMeth),
   Method_DeclaringType(?implMethod, ?handleType),
   ?callsite = MOCK_LAMBDA_CALL_SITE(?invokedynamic, ?samType, ?handleType, ?handleMeth, ?implMethod, ?dynName).

.decl InvokedynamicMetafactoryCallGraphEdge(?callerCtx:configuration.Context, ?invokedynamic:DynamicMethodInvocation_Insn, ?calleeCtx:configuration.Context, ?metafactory:Method)
InvokedynamicMetafactoryCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?metafactory) :-
   LambdaMetafactoryInvoke(?invokedynamic, _, _),
   DynamicMethodInvocation_Bootstrap(?invokedynamic, ?metafactory),
   isImmutableContext(?calleeCtx),
   InvokedynamicBootstrapCtx(?invokedynamic, ?callerCtx).

ReachableContext(?calleeCtx, ?metafactory) :-
   InvokedynamicMetafactoryCallGraphEdge(_, _, ?calleeCtx, ?metafactory).

// Pass arguments to bootstrap methods. First three arguments are
// filled in by the JVM, so we fill them in with mock objects.

#define MOCK_MH_LOOKUP "mock method handles lookup object"
#define MOCK_MT(retType, paramTypes) cat("mock method type ", cat(retType, paramTypes))

MockValueConsMacro(MOCK_MH_LOOKUP, "java.lang.invoke.MethodHandles$Lookup"),
VarPointsTo(?hctx, MOCK_MH_LOOKUP, ?ctx, ?caller),
MockValueConsMacro(?mockMethodType, "java.lang.invoke.MethodType"),
VarPointsTo(?hctx, ?mockMethodType, ?ctx, ?invokedTypeParam) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, ?ctx, ?metafactory),
   FormalParam(0, ?metafactory, ?caller),
   FormalParam(2, ?metafactory, ?invokedTypeParam),
   DynamicMethodInvocation_DynReturnType(?invokedynamic, ?dynRetType),
   DynamicMethodInvocation_DynParamTypes(?invokedynamic, ?dynParamTypes),
   ?mockMethodType = MOCK_MT(?dynRetType, ?dynParamTypes),
   isImmutableHContext(?hctx).

// The second-arg rule should only be enabled when strings are not merged.
#if defined(DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS) || defined(DISTINGUISH_ALL_STRING_CONSTANTS) || defined(NO_MERGES)
VarPointsTo(?hctx, ?invokedName, ?ctx, ?invokedNameParam) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, ?ctx, ?metafactory),
   isStringConstant(?invokedName),
   FormalParam(1, ?metafactory, ?invokedNameParam),
   DynamicMethodInvocation_DynName(?invokedynamic, ?invokedName),
   isImmutableHContext(?hctx).
#endif // DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS || DISTINGUISH_ALL_STRING_CONSTANTS || NO_MERGES

// Normal handling for the last three arguments of the metafactory, shifted.
VarPointsTo(?hctx, ?val, ?ctx, ?formal) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, ?ctx, ?metafactory),
   ?metafactory = LAMBDA_METAFACTORY,
   FormalParam(?idx + 3, ?metafactory, ?formal),
   BootstrapParam(?idx, ?invokedynamic, ?actual),
   VarPointsTo(_, ?val, _, ?actual),
   isImmutableHContext(?hctx).

// Use a mock varargs array to fix calls to the alt metafactory.

#define MOCK_ARRAY(instr) cat("metafactory varargs array for ", instr)

ArrayIndexPointsTo(?hctx, ?val, ?hctx, MOCK_ARRAY(?invokedynamic)),
MockValueConsMacro(MOCK_ARRAY(?invokedynamic), "java.lang.Object[]"),
VarPointsTo(?hctx, MOCK_ARRAY(?invokedynamic), ?ctx, ?formalVarArgs) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, ?ctx, ?metafactory),
   ?metafactory = LAMBDA_ALTMETAFACTORY,
   FormalParam(3, ?metafactory, ?formalVarArgs),
   BootstrapParam(?idx, ?invokedynamic, ?actual),
   ?idx > 2,
   VarPointsTo(_, ?val, _, ?actual),
   isImmutableHContext(?hctx).

.decl LambdaCallSite_N(?callsite:Value, ?N:number, ?samMethodType:Value)

LambdaCallSite_N(?callsite, ?N, ?val) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, _, ?metafactory),
   ?metafactory = LAMBDA_METAFACTORY,
   LambdaCallSite_Invokedynamic(?callsite, ?invokedynamic),
   BootstrapParam(0, ?invokedynamic, ?actual),
   VarPointsTo(_, ?val, _, ?actual),
   _MethodTypeConstant(?val, ?N).

LambdaCallSite_N(?callsite, ?N, ?val) :-
   InvokedynamicMetafactoryCallGraphEdge(_, ?invokedynamic, _, ?metafactory),
   ?metafactory = LAMBDA_ALTMETAFACTORY,
   LambdaCallSite_Invokedynamic(?callsite, ?invokedynamic),
   ArrayIndexPointsTo(_, ?val, _, MOCK_ARRAY(?invokedynamic)),
   _MethodTypeConstant(?val, ?N).

/** Phase 2: Capture (invoke CallSite, return functional object) **/

.decl LambdaCaptured(?callsite:Value, ?val:Value, ?idx:number, ?ctx:configuration.Context)

// Capture values of the enclosing environment.
LambdaCaptured(?callsite, ?val, ?idx, ?ctx) :-
   LambdaCallSite_K(?callsite, ?K),
   ?K > 0,
   LambdaCallSite_Invokedynamic(?callsite, ?invokedynamic),
   ActualParam(?idx, ?invokedynamic, ?actual),
   VarPointsTo(_, ?val, ?ctx, ?actual).

/** Phase 3: Invocation (call method on the functional object) **/

// When invokeinterface is called on a lambda object constructed by a
// constant method handle, the real method is called. This can wrap a
// static method call as an instance method call.

.decl InvokedynamicCallGraphEdge(?callerCtx:configuration.Context, ?i:MethodInvocation, ?calleeCtx:configuration.Context, ?m:Method, ?callsite:Value)

InvokedynamicCallGraphEdge(?callerCtx, ?i, ?calleeCtx, ?implMethod, ?callsite) :-
   LambdaCallSite(?callsite, ?dynName, _, ?implMethod),
   VarPointsTo(_, ?callsite, ?callerCtx, ?var),
   VirtualMethodInvocation_Base(?i, ?var),
   VirtualMethodInvocation_SimpleName(?i, ?dynName),
   isImmutableContext(?calleeCtx).

ReachableContext(?calleeCtx, ?callee) :-
   InvokedynamicCallGraphEdge(_, _, ?calleeCtx, ?callee, _).

// A boxing/unboxing conversion of types including the null type.
.decl BoxTypeConversion(?original:Type, ?new:Type)

BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(?t1, ?t2).
BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(?t1, _), isNullType(?t2).
BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(_, ?t2), isNullType(?t1).
BoxTypeConversion(?t1, ?t2) :- BoxTypeConversion(?t2, ?t1).

// Helper relation: instance methods implicitly consume one of the K
// arguments, while static methods take all K arguments before N ones.
.decl ImplMethodArgStart(?implMethod:Method, ?idx:number)
ImplMethodArgStart(?implMethod, 1) :-
   InvokedynamicCallGraphEdge(_, _, _, ?implMethod, _),
   ! Method_Modifier("static", ?implMethod).
ImplMethodArgStart(?implMethod, 0) :-
   InvokedynamicCallGraphEdge(_, _, _, ?implMethod, _),
   Method_Modifier("static", ?implMethod).

// Pass invocation arguments to the implementing method.
VarPointsTo(?hctx, ?val, ?ctx, ?formal) :-
   InvokedynamicCallGraphEdge(_, ?i, ?ctx, ?implMethod, ?callsite),
   ImplMethodArgStart(?implMethod, ?shift),
   LambdaCallSite_K(?callsite, ?K),
   FormalParam(?idx + ?K - ?shift, ?implMethod, ?formal),
   ActualParam(?idx, ?i, ?actual),
   VarPointsTo(_, ?val, _, ?actual),
   Value_Type(?val, ?valType),
   Var_Type(?formal, ?formalType),
   // Check type compatibility (spec: normal case/casting/(un)boxing).
   (basic.SubtypeOf(?valType, ?formalType);
    basic.SubtypeOf(?formalType, ?valType);
    BoxTypeConversion(?valType, ?formalType)),
   isImmutableHContext(?hctx).

// Pass captured arguments to the implementing method.
VarPointsTo(?hctx, ?val, ?ctx, ?formal) :-
   InvokedynamicCallGraphEdge(_, _, ?ctx, ?implMethod, ?callsite),
   ImplMethodArgStart(?implMethod, ?shift),
   LambdaCallSite_K(?callsite, ?K),
   FormalParam(?idx, ?implMethod, ?formal),
   ?idx <= ?K - ?shift,
   LambdaCaptured(?callsite, ?val, ?idx + ?shift, ?ctx),
   isImmutableHContext(?hctx).

// Special handling for captured "this" parameters.
VarPointsTo(?hctx, ?thisValue, ?ctx, ?this) :-
   InvokedynamicCallGraphEdge(_, _, ?ctx, ?implMethod, ?callsite),
   !Method_Modifier("static", ?implMethod),
   LambdaCaptured(?callsite, ?thisValue, 0, ?ctx),
   ThisVar(?implMethod, ?this),
   isImmutableHContext(?hctx).

// Handle return values.
VarPointsTo(?hctx, ?retVal, ?callerCtx, ?ret) :-
   InvokedynamicCallGraphEdge(?callerCtx, ?i, ?calleeCtx, ?implMethod, _),
   ReturnVar(?realReturnVar, ?implMethod),
   VarPointsTo(?hctx, ?retVal, ?calleeCtx, ?realReturnVar),
   AssignReturnValue(?i, ?ret).

// Applications of constructor references construct values. However,
// these values do not come from a 'new' instruction in the code but
// are created here as mock values, one per type/invocation.
MockValueConsMacro(?mockObj, ?type),
VarPointsTo(?hctx, ?mockObj, ?ctx, ?var),
VarPointsTo(?hctx, ?mockObj, ?ctx, ?thisVar) :-
   InvokedynamicCallGraphEdge(_, ?i, ?ctx, ?implMethod, _),
   Method_SimpleName(?implMethod, "<init>"),
   Method_DeclaringType(?implMethod, ?type),
   AssignReturnValue(?i, ?var),
   ThisVar(?implMethod, ?thisVar),
   ?mockObj = cat("mock ", cat(?type, cat(" constructed by constructor reference at ", ?i))),
   isImmutableHContext(?hctx).

// Method handles usually need reflection except they come from the constant pool.
.decl MethodHandle_Method(?mh:Value, ?method:Method)
.decl isMethodHandle(?mh:Value)

isMethodHandle(?mh),
MethodHandle_Method(?mh, ?method) :-
   MethodHandleConstant_Method(?mh, ?method).

// Method handles that interact with reflection are exprerimental, use
// corresponding command-line option to enable them.
#ifdef REFLECTION_METHOD_HANDLES

// We treat method descriptors as MethodType values (with slight
// changes, e.g. in the treatment of 'void' or constructors).

.decl MethodType_ReturnType(?descriptor:symbol, ?declType:Type, ?rType:Type)

// Return types for non-constructors.
MethodType_ReturnType(?descriptor, ?declType, ?rType) :-
  Method_Descriptor(?method, ?descriptor),
  Method_ReturnType(?method, ?rType),
  Method_SimpleName(?method, ?name),
  ?name != "<clinit>",
  ?name != "<init>",
  Method_DeclaringType(?method, ?declType).

// Return types for constructors are not "void" but the type constructed.
MethodType_ReturnType(?descriptor, ?rType, ?rType) :-
  Method_Descriptor(?method, ?descriptor),
  Method_SimpleName(?method, "<init>"),
  Method_DeclaringType(?method, ?rType).

.decl MethodType_ParamType(?descriptor:symbol, ?index:number, ?pType:Type)

MethodType_ParamType(?descriptor, ?index, ?pType) :-
  Method_Descriptor(?method, ?descriptor),
  FormalParam(?index, ?method, ?var),
  _Var_Type(?var, ?pType).

#ifdef REFLECTION

// MethodType API entry points. The actual logic: every methodType()
// invocation picks all descriptors that match.

.decl ReachableMethodTypeN(?invo:MethodInvocation, ?caller:Method, ?callerCtx:configuration.Context)

ReachableMethodTypeN(?invo, ?caller, ?callerCtx) :-
   MTEntryPoint(_, ?invo, _),
   Instruction_Method(?invo, ?caller),
   ReachableContext(?callerCtx, ?caller).

.decl MT_ReturnType(?invo:MethodInvocation, ?type:Type)
.decl MT_ParamValue(?invo:MethodInvocation, ?index:number, ?classValue:Value)

// The first argument to methodType() is always the return type.
MT_ReturnType(?invo, ?type) :-
   ReachableMethodTypeN(?invo, _, _),
   ActualParam(0, ?invo, ?param),
   VarPointsTo(_, ?classValue, _, ?param),
   ReifiedClass(?type, ?classValue).

// MethodType2, MethodType4: second parameter.
MT_ParamValue(?invo, 0, ?classValue) :-
   ( MTEntryPoint(2, ?invo, _) ; MTEntryPoint(4, ?invo, _) ),
   Instruction_Method(?invo, ?caller),
   ReachableContext(_, ?caller),
   ActualParam(1, ?invo, ?param),
   VarPointsTo(_, ?classValue, _, ?param).

// MethodType1 lacks a parameter, so we use a dummy value instead.
#define MT_NOARGS_VALUE "<mock dummy methodType() class for first argument>"
MockValueConsMacro(MT_NOARGS_VALUE, "java.lang.Class"),
MT_ParamValue(?invo, 0, MT_NOARGS_VALUE) :-
   MTEntryPoint(1, ?invo, _).

// Helper relation to treat 'void' and 'java.lang.Void' as the same
// type in descriptors.
.decl MTReturnTypeMatchesDescriptor(?invo:MethodInvocation, ?descriptor:symbol)

MTReturnTypeMatchesDescriptor(?invo, ?descriptor) :-
   MT_ReturnType(?invo, "java.lang.Void"),
   MethodType_ReturnType(?descriptor, _, "void").
MTReturnTypeMatchesDescriptor(?invo, ?descriptor) :-
   MT_ReturnType(?invo, ?rType),
   MethodType_ReturnType(?descriptor, _, ?rType).

.decl Descriptor_Arity(?descriptor:symbol, ?arity:number)

Descriptor_Arity(?descriptor, ?arity) :-
  Method_Descriptor(?method, ?descriptor),
  Method_Arity(?method, ?arity).

.decl MTCallMatchesDescriptor(?invo:MethodInvocation, ?descriptor:symbol)

// MethodType1.
MTCallMatchesDescriptor(?invo, ?descriptor) :-
   MTEntryPoint(1, ?invo, _),
   MTReturnTypeMatchesDescriptor(?invo, ?descriptor),
   MT_ParamValue(?invo, 0, MT_NOARGS_VALUE),
   Descriptor_Arity(?descriptor, 0).

// MethodType2.
MTCallMatchesDescriptor(?invo, ?descriptor) :-
   MTEntryPoint(2, ?invo, _),
   MTReturnTypeMatchesDescriptor(?invo, ?descriptor),
   MT_ParamValue(?invo, 0, ?classValue0),
   ReifiedClass(?pType0, ?classValue0),
   MethodType_ParamType(?descriptor, 0, ?pType0),
   Descriptor_Arity(?descriptor, 1).

.decl MTValue_Descriptor(?mt:Value, ?descriptor:symbol)

#define MT_VALUE(desc) cat("<mock MethodType ", cat(desc, ">"))

// Make methodType() return special descriptors.
MockValueConsMacro(MT_VALUE(?descriptor), "java.lang.invoke.MethodType"),
MTValue_Descriptor(MT_VALUE(?descriptor), ?descriptor),
VarPointsTo(?hctx, MT_VALUE(?descriptor), ?callerCtx, ?ret) :-
   ReachableMethodTypeN(?invo, ?caller, ?callerCtx),
   MTCallMatchesDescriptor(?invo, ?descriptor),
   AssignReturnValue(?invo, ?ret),
   isImmutableHContext(?hctx).

// Method lookup methods.

.decl FindVirtual(?invo:MethodInvocation)

FindVirtual(?invo) :-
   MethodInvocation_Method(?invo, "<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>"),
   Instruction_Method(?invo, ?caller),
   ReachableContext(_, ?caller).

.decl FindStatic(?invo:MethodInvocation)

FindStatic(?invo) :-
   MethodInvocation_Method(?invo, "<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>"),
   Instruction_Method(?invo, ?caller),
   ReachableContext(_, ?caller).

// Lookup rules.

.decl MethodFinder(?invo:MethodInvocation, ?ret:Var)

MethodFinder(?invo, ?ret) :-
   ( FindStatic(?invo) ; FindVirtual(?invo) ),
   VirtualMethodInvocation_Base(?invo, ?lookup),
   VarPointsTo(_, ?baseVal, _, ?lookup),
   !Value_Null(?baseVal),
   AssignReturnValue(?invo, ?ret).

.decl MHLookup(?type:Type, ?id:symbol, ?mt:Value, ?method:Method)

MHLookup(?type, ?id, ?mt, ?method) :-
   Method_DeclaringType(?method, ?type),
   Method_SimpleName(?method, ?id),
   Method_Descriptor(?method, ?descriptor),
   MTValue_Descriptor(?mt, ?descriptor).

// Mock method handle values.
#define MH(meth) cat("<computed method handle for ", cat(meth, ">"))

MockValueConsMacro(MH(?method), "java.lang.invoke.MethodHandle"),
isMethodHandle(MH(?method)),
MethodHandle_Method(MH(?method), ?method),
VarPointsTo(?hctx, MH(?method), ?ctx, ?ret) :-
   MethodFinder(?invo, ?ret),
   ActualParam(0, ?invo, ?classParam),
   VarPointsTo(?hctx, ?classValue, ?ctx, ?classParam),
   ReifiedClass(?type, ?classValue),
   ActualParam(1, ?invo, ?stringParam),
   VarPointsTo(_, ?id, _, ?stringParam),
   ActualParam(2, ?invo, ?mtParam),
   VarPointsTo(_, ?mt, _, ?mtParam),
   MHLookup(?type, ?id, ?mt, ?method).

#endif // REFLECTION
#endif // REFLECTION_METHOD_HANDLES
