#include "rules-spring.dl"

ServletEntryMethodName("service").

PossibleOpenProgramEntryPoint(?class, ?meth) :-
  ServletClass(?class),
  Method_DeclaringType(?meth, ?class),
  Method_SimpleName(?meth, "init").

.decl WebappMock(?v: mainAnalysis.Value)

#define MOCK_WEBAPP_CTX(class)\
  cat(cat("<Mock webapp context ", class), ">")

.decl MockCallReturnVal(?meth: Method)

// These methods introduce webapp context mock objects
MockCallReturnVal("<org.springframework.web.context.support.WebApplicationContextUtils: org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.servlet.ServletContext)>").
MockCallReturnVal("<javax.faces.FactoryFinder: java.lang.Object getFactory(java.lang.String)>").
MockCallReturnVal("<org.alfresco.web.app.servlet.FacesHelper: java.lang.Object getManagedBean(javax.faces.context.FacesContext,java.lang.String)>").

MockCallReturnVal(?meth) :-
  basic.MethodOverridesOther(?meth, "<javax.faces.context.FacesContext: javax.faces.application.Application getApplication()>").

mainAnalysis.configuration.RecordContextRequest(?ctx, MOCK_WEBAPP_CTX(?class), ?var) :-
  mainAnalysis.ReachableContext(?ctx, ?meth),
  MockCallReturnVal(?meth),
  ReturnVar(?var, ?meth),
  Var_Type(?var, ?type),
  ConcreteImplementations(?type, ?class).

// Create initial webapp mock objects
WebappMock(MOCK_WEBAPP_CTX(?class)),
mainAnalysis_MockValueConsMacro(MOCK_WEBAPP_CTX(?class), ?class),
mainAnalysis.VarPointsTo(?hctx, MOCK_WEBAPP_CTX(?class), ?ctx, ?var),
MockObject(MOCK_WEBAPP_CTX(?class), ?class) :-
  mainAnalysis.ReachableContext(?ctx, ?meth),
  MockCallReturnVal(?meth),
  ReturnVar(?var, ?meth),
  Var_Type(?var, ?type),
  ConcreteImplementations(?type, ?class),
  mainAnalysis.configuration.RecordContextResponse(?ctx, MOCK_WEBAPP_CTX(?class), ?var, ?hctx).

// If a method is called on a webapp mock that returns a type that
// contains the following substrings or if it's casted,
// return a new mock object
.decl MockedObjTypeContains(?part: symbol)
MockedObjTypeContains("org.springframework.web.context.").
MockedObjTypeContains("org.springframework.context.").
MockedObjTypeContains("java.lang.Object").
MockedObjTypeContains("org.alfresco.service.").
MockedObjTypeContains("org.alfresco.web.bean.").
MockedObjTypeContains("javax.faces.context.").
MockedObjTypeContains("javax.faces.lifecycle.").

// If a webapp mock object is casted to one of the above types,
// create a new mock object
WebappMock(MOCK_WEBAPP_CTX(?class)),
mainAnalysis_MockValueConsMacro(MOCK_WEBAPP_CTX(?class), ?class),
MockObject(MOCK_WEBAPP_CTX(?class), ?class),
mainAnalysis.VarPointsTo(?hctx, MOCK_WEBAPP_CTX(?class), ?ctx, ?to) :-
  mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?from),
  WebappMock(?value),
  mainAnalysis.OptAssignCast(?type, ?to, ?from),
  ConcreteImplementations(?type, ?class),
  MockedObjTypeContains(?part),
  contains(?part, ?type).
.plan 2: (3,1,2,4,5)

// Return a new webapp mock object of the appropriate type on a virtual call
// on a webapp mock
WebappMock(MOCK_WEBAPP_CTX(?class)),
mainAnalysis_MockValueConsMacro(MOCK_WEBAPP_CTX(?class), ?class),
MockObject(MOCK_WEBAPP_CTX(?class), ?class),
mainAnalysis.VarPointsTo(?hctx, MOCK_WEBAPP_CTX(?class), ?ctx, ?to) :-
  VirtualMethodInvocation_Base(?invo, ?base),
  mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?base),
  WebappMock(?value),
  AssignReturnValue(?invo, ?to),
  Var_Type(?to, ?type),
  MockedObjTypeContains(?part),
  contains(?part, ?type),
  ConcreteImplementations(?type, ?class).
