#include "../context-insensitive/analysis.dl"

.init preAnalysis = BasicContextSensitivity<ContextInsensitiveConfiguration>

                    
.comp TwoPhaseAConfiguration : AbstractConfiguration {

.type Context  = [ c1:mainAnalysis.Value, c2:mainAnalysis.Value ]
.type HContext = [ value:mainAnalysis.Value ]
                    
ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
  ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod),
  (SpecialContextSensitivityMethod(?tomethod, "context-insensitive");
   !MethodToRefine(?tomethod),
   !SpecialContextSensitivityMethod(?tomethod, _)),
  isImmutableContext(?calleeCtx).
  
ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?calleeCtx) :-
  ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod),
  (MethodToRefine(?tomethod);
   SpecialContextSensitivityMethod(?tomethod, "2-object-sensitive")),      
  ?hctx = [?hctxValue],
  ?calleeCtx = [?hctxValue, ?value].

StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
   StaticContextRequest(?callerCtx, ?invo),
   MethodInvocation_Method(?invo, ?tomethod),
   (SpecialContextSensitivityMethod(?tomethod, "context-insensitive");
    !MethodToRefine(?tomethod),
    !SpecialContextSensitivityMethod(?tomethod, _)),   
   isImmutableContext(?calleeCtx).

StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
  StaticContextRequest(?callerCtx, ?invo),
  MethodInvocation_Method(?invo, ?tomethod),
  (MethodToRefine(?tomethod);
   SpecialContextSensitivityMethod(?tomethod, "2-object-sensitive")),
  ?calleeCtx = ?callerCtx.

RecordContextResponse(?ctx, ?value, ?arg, ?hctx) :-
  RecordContextRequest(?ctx, ?value, ?arg),      
  ?ctx = [?ctxValue1, ?ctxValue2],
  ?hctx = [?ctxValue2],
  ?ctxValue1 = ?ctxValue1.

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
ThreadStartContextResponse(?callerCtx, ?hctx, ?value, ?newCtx) :-
  ThreadStartContextRequest(?callerCtx, ?hctx, ?value),
  ?hctx = [?hctxValue],
  ?newCtx = [?hctxValue, ?value].

StartupContextResponse(?hctx, ?value, ?newCtx) :-
  StartupContextRequest(?hctx, ?value),
  ?hctx = [?hctxValue],
  ?newCtx = [?hctxValue, ?value].

FinalizerRegisterContextResponse(?callerCtx, ?inmethod, ?value, ?newCtx) :-
  FinalizerRegisterContextRequest(?callerCtx, ?inmethod, ?value),
  ?callerCtx = [?callerCtxValue1, ?callerCtxValue2],
  ?newCtx = [?callerCtxValue2, ?value],

  ?callerCtxValue1 = ?callerCtxValue1.

InitContextResponse(?value, ?ctx) :-
  InitContextRequest(?value),
  ?ctx = [?value, ?value].

InitHContextResponse(?value, ?hctx) :-
  InitHContextRequest(?value),
  ?hctx = [?value].

.decl MethodsOfSameOrSuperType(?method1:Method, ?method2:Method)
MethodsOfSameOrSuperType(?method1, ?method2) :-
   !ThisPointsToTooManyValues(?method1),
   !ThisPointsToTooManyValues(?method2),
   basic.MethodsOfSameOrSuperType(?method1, ?method2).
   
/** Utility rule: Value points to another value directly or indirectly **/
.decl ValuePointsTo(?baseValue:Value, ?value:Value)

ValuePointsTo(?baseValue, ?value) :-
  preAnalysis.InstanceFieldPointsTo(_, ?value, _, _, ?baseValue).

// anantoni: The recursive rule does not make much of a difference anyway
//
// ValuePointsTo(?baseValue, ?value) :-
//   ValuePointsTo(?value1, ?value),
//   preAnalysis.InstanceFieldPointsTo(_, ?value1, _, _, ?baseValue).

// anantoni: These filters can be vital to achieving good scale
// .decl ArgPointsToTooManyValues(?arg:Var, ?method:Method)
// ArgPointsToTooManyValues(?arg, ?method) :-
//   FormalParam(_, ?method, ?arg),
//   VPTCountPerVar(?arg, ?n),
//   ?n > 10000.

.decl ThisPointsToTooManyValues(?method:Method)
ThisPointsToTooManyValues(?method) :-
  ThisVar(?method, ?this),
  VPTCountPerVar(?this, ?n),
  ?n = 1.
  
.decl ArgPointsTo(?arg:Var, ?method:Method, ?value:Value)
ArgPointsTo(?arg, ?method, ?value) :-
  FormalParam(_, ?method, ?arg),
  preAnalysis.VarPointsTo(_, ?value, _, ?arg).
ArgPointsTo(?arg, ?method, ?value) :-
  ThisVar(?method, ?arg),
  preAnalysis.VarPointsTo(_, ?value, _, ?arg).

.decl RetPointsTo(?ret:Var, ?method:Method, ?value:Value)
RetPointsTo(?ret, ?method, ?value) :-
  ReturnVar(?ret, ?method),
  preAnalysis.VarPointsTo(_, ?value, _, ?ret).

.decl LocalPointsTo(?local:Var, ?method:Method, ?value:Value)
LocalPointsTo(?local, ?method, ?value) :-
  Var_DeclaringMethod(?local, ?method),
  preAnalysis.VarPointsTo(_, ?value, _, ?local).

.decl MethodValuePair(?inMethod:Method, ?argValue:Value, ?outMethod:Method, ?retValue:Value)
MethodValuePair(?inMethod, ?argValue, ?outMethod, ?retValue) :-
   ArgPointsTo(_, ?inMethod, ?argValue),    
   MethodsOfSameOrSuperType(?inMethod, ?outMethod),
   RetPointsTo(_, ?outMethod, ?retValue).

/** Direct in out flow:
 *
 *   arg -> value
 *   ret -> value
 */
.decl InOutFlowDirectValuePerClass(?inMethod:Method, ?outMethod:Method, ?value:Value)
InOutFlowDirectValuePerClass(?inMethod, ?outMethod, ?value) :-
   MethodValuePair(?inMethod, ?value, ?outMethod, ?value).

.decl InOutFlowDirectTwoValuesPerClass(?inMethod:Method, ?outMethod:Method, ?value:Value)
InOutFlowDirectTwoValuesPerClass(?inMethod, ?outMethod, ?value1) :-
  InOutFlowDirectValuePerClass(?inMethod, ?outMethod, ?value1),
  InOutFlowDirectValuePerClass(?inMethod, ?outMethod, ?value2),
  ?value1 != ?value2.

.decl MethodTaintedByDirectFlow(?method:Method)
MethodTaintedByDirectFlow(?method) :-
  LocalPointsTo(_, ?method, ?value),
  MethodsOfSameOrSuperType(?inMethod, ?method),
  InOutFlowDirectTwoValuesPerClass(?inMethod, _, ?value).

.decl MethodTaintedByWrappedFlow(?method:Method)
MethodTaintedByWrappedFlow(?method) :-
  LocalPointsTo(_, ?method, ?value),
  MethodsOfSameOrSuperType(?inMethod, ?method),
  InOutFlowWrappedTwoValuesPerClass(?inMethod, _, ?value).


/**
 * Wrapped in out flow:
 *
 * arg -> value
 * ret -> ... -> ... -> value
 */   
.decl InOutFlowWrappedValuePerClass(?inMethod:Method, ?outMethod:Method, ?value:Value) 
InOutFlowWrappedValuePerClass(?inMethod, ?outMethod, ?value) :-
  MethodValuePair(?inMethod, ?value, ?outMethod, ?baseValue),
  ValuePointsTo(?baseValue, ?value),
  ?value != ?baseValue.

.decl InOutFlowWrappedTwoValuesPerClass(?inMethod:Method, ?outMethod:Method, ?value:Value)
InOutFlowWrappedTwoValuesPerClass(?inMethod, ?outMethod, ?value1) :-
   InOutFlowWrappedValuePerClass(?inMethod, ?outMethod, ?value1),
   InOutFlowWrappedValuePerClass(?inMethod, ?outMethod, ?value2),
   ?value1 != ?value2.

/**
 * Unwrapped in out flow:
 *
 * arg -> ... -> ... -> ... -> value
 * ret -> value
 */
.decl InOutFlowUnwrappedValuePerClass(?inMethod:Method, ?outMethod:Method, ?value:Value) 
InOutFlowUnwrappedValuePerClass(?inMethod, ?outMethod, ?value) :-
  MethodValuePair(?inMethod, ?baseValue, ?outMethod, ?value),
  ValuePointsTo(?baseValue, ?value),
  ?value != ?baseValue.

.decl InOutFlowUnwrappedTwoValuesPerClass(?inMethod:Method, ?outMethod:Method)
InOutFlowUnwrappedTwoValuesPerClass(?inMethod, ?outMethod) :-
  InOutFlowUnwrappedValuePerClass(?inMethod, ?outMethod, ?value1),
  InOutFlowUnwrappedValuePerClass(?inMethod, ?outMethod, ?value2),
  ?value1 != ?value2.

/**
 * Any in out flow:
 *
 * arg -> ... -> ... -> ... -> value
 * ret -> ... -> ... -> ... -> value
 */
// The following refinement logic is too expensive

// .decl InOutFlowAnyValuePerClass(?inMethod:Method, ?outMethod:Method, ?class:Type, ?value:Value) 

// InOutFlowAnyValuePerClass(?inMethod, ?outMethod, ?class, ?value) :-
//   FormalParam(_, ?inMethod, ?arg),
//   basic.MethodsOfSameType(?inMethod, ?outMethod, ?class),
//   ReturnVar(?returnArg, ?outMethod),
//   preAnalysis.VarPointsTo(_, ?baseValue1, _, ?arg),
//   preAnalysis.VarPointsTo(_, ?baseValue2, _, ?returnArg),
//   ValuePointsTo(?baseValue1, ?value),
//   ValuePointsTo(?baseValue2, ?value),
//   ?baseValue1 != ?baseValue2.
             
// .decl InOutFlowAnyTwoValuesPerClass(?inMethod:Method, ?outMethod:Method, ?class:Type)
      
// InOutFlowAnyTwoValuesPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowAnyValuePerClass(?inMethod, ?outMethod, ?class, ?value1),
//   InOutFlowAnyValuePerClass(?inMethod, ?outMethod, ?class, ?value2),
//   ?value1 != ?value2.
.decl InOutFlowPair(?inMethod:Method, ?outMethod:Method)

InOutFlowPair(?inMethod, ?outMethod) :-
  InOutFlowDirectTwoValuesPerClass(?inMethod, ?outMethod, _).

InOutFlowPair(?inMethod, ?outMethod) :-
  InOutFlowWrappedTwoValuesPerClass(?inMethod, ?outMethod,_).

// InOutFlowPair(?inMethod, ?outMethod) :-
//   InOutFlowUnwrappedTwoValuesPerClass(?inMethod, ?outMethod).

// InOutFlowPerClass(?inMethod, ?outMethod, ?class) :-
//   InOutFlowAnyTwoValuesPerClass(?inMethod, ?outMethod, ?class).

       
.decl MethodToRefine(?method:Method)

MethodToRefine(?method) :-      
  (InOutFlowPair(?method, _);
   InOutFlowPair(_, ?method);
   MethodTaintedByDirectFlow(?method);
   MethodTaintedByWrappedFlow(?method)),
  !SpecialContextSensitivityMethod(?method, _).

.printsize isMethod
.printsize MethodToRefine
.output MethodToRefine


.decl VPTCountPerVar(?var:Var, ?n:number)

VPTCountPerVar(?var, Y) :- ThisVar(_, ?var), Y =  count : preAnalysis.VarPointsTo(_, _, _, ?var), Y > 0.

.decl SpecialContextSensitivityMethod(?method:Method, ?sensivity:symbol)
.input SpecialContextSensitivityMethod(IO="file", filename="SpecialContextSensitivityMethod.facts", delimiter="\t")

.decl SpecialContextSensitivityMethodConstraintViolated(?method:Method)

SpecialContextSensitivityMethodConstraintViolated(?method) :-
  SpecialContextSensitivityMethod(?method, _),
  !isMethod(?method).

.printsize SpecialContextSensitivityMethodConstraintViolated


}
