// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[] = hctx


// For this analysis the context of a method call corresponds to the
// identity of the receiver object. Again, this may trigger creation of
// a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContext2FromContext[callerCtx], value] = calleeCtx

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
  MergeBasis(hctx, invocation, callerCtx, value)

#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  CachedMerge[callerCtx, value] = calleeCtx

// For this analysis, static calls just keep the same context as the
// caller. *Not* creating a new one, but pretending to, nonetheless,
// so the engine doesn't barf.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContext1FromContext[callerCtx], \
                         RealContext2FromContext[callerCtx]] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContext2FromContext[callerCtx], value] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[value, value] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContext2FromContext[callerCtx], value] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), ContextFromRealContext[value, value] = ctx \
  <- Value:byId[valueId] = value

#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromRealHContext[] = hctx
