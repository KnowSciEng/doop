// In this analysis, the real context is a pair of Types and the real heap
// context a single Type. Keeping mapping functions is the way to handle
// analyses where HContext = Context (since the language considers them
// different types).  The type is not always a class type, because of arrays
// currently being a non-class subtype of Object
ContextFromRealContext[?type1, ?type2] = ?ctx ->
  Context(?ctx), Type(?type1), Type(?type2).
lang:constructor(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?type ->
  Context(?ctx), Type(?type).
RealContext2FromContext[?ctx] = ?type ->
  Context(?ctx), Type(?type).
RealContext1FromContext[?ctx] = ?type1,
RealContext2FromContext[?ctx] = ?type2 <-
  ContextFromRealContext[?type1, ?type2] = ?ctx.

HContextFromRealHContext[?type] = ?hctx ->
  HContext(?hctx), Type(?type).
lang:constructor(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?type ->
  HContext(?hctx), Type(?type).
RealHContextFromHContext[?hctx] = ?type <-
  HContextFromRealHContext[?type] = ?hctx.

InitialTypeValue[] = ?initType <-
  Type:Id(?initType:"<<initial-context>>").
