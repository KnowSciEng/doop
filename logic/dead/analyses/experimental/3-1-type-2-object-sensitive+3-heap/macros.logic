#include "../../../facts/macros.logic"

// For this analysis, every heap context recorded on allocation
// corresponds to the calling context of the allocator method.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContext1FromContext[ctx], \
                           RealContext2FromContext[ctx], \
                           RealContext3FromContext[ctx]] = hctx


// For this analysis the context of a method call corresponds to the
// identity of the receiver object. Again, this may trigger creation of
// a new object.
#define MergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[DeclaringClass:Allocation[RealHContext2FromHContext[hctx]], \
                         RealHContext3FromHContext[hctx], \
                         heap] = calleeCtx
/*
 * The above gives us an upper bound of the receiver allocator's allocator's dynamic type!
 * Another option is the exact dynamic type of the allocator object. In that case we have:
 * ContextFromRealContext[RealHContext1FromHContext[hctx], \
 *                        HeapAllocation:Type[RealHContext2FromHContext[hctx]], \
 *                        heap] = calleeCtx
 */

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, heap) \
  MergeBasis(callerCtx, invocation, hctx, heap)

#define CachedMergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  CachedMerge[hctx, heap] = calleeCtx

// For this analysis, static calls just keep the same context as the
// caller. *Not* creating a new one, but pretending to, nonetheless,
// so the engine doesn't barf.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContext1FromContext[callerCtx], \
                         RealContext2FromContext[callerCtx], \
                         RealContext3FromContext[callerCtx]] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[DeclaringClass:Allocation[RealHContext2FromHContext[hctx]], \
                         RealHContext3FromHContext[hctx], \
                         heap] = newCtx

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[DeclaringClass:Allocation[RealHContext2FromHContext[hctx]], \
                         RealHContext3FromHContext[hctx], \
                         heap] = calleeCtx

// This is exactly equivalent to the regular merge logic, but written
// differently. At finalization, we create a new hctx, based on the
// callerCtx, and then use this new hctx as we would in regular Merge.
// The macro below does this, without referring to the new hctx (i.e.,
// using knowledge of how it is created). This is necessary because since
// the new hctx is created in the same rule, it will not yet have values
// for its inverse functions (RealHContextFromHContext), so the rule will never
// fire if done naively. The signature of the macro (which does not accept a
// hctx) is a hint for avoiding this problem.
#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[DeclaringClass:Allocation[RealContext2FromContext[callerCtx]], \
                         RealContext3FromContext[callerCtx], \
                         heap] = newCtx
