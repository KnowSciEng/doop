.type Module
.type Package = Module

.decl isModule(?module:Module)
.decl isPackage(?package: Package)

.decl ModuleSubmodule(?module: Module, ?submodule: Module)
.decl Function_Module(?function:Function, ?module: Module)

.decl VarPointsToModule(?var:Var, ?module:Module)

.decl VarPointsToFunction(?var:Var, ?function: Function)
.output VarPointsToFunction
.output isFunction

.output VarPointsToModule

VarPointsToModule(?var, ?module):-
  VarPointsTo(?var, ?module),
  isModule(?module).
  
VarPointsTo(?var, ?module),
VarPointsToModule(?var, ?module):-
  isImportInstruction(?insn),
  ImportInsn_ModuleName(?insn, ?name),
  AssignInstruction_To(?insn, ?var),
  ?module = cat(cat("<",?name),">"),
  isModule(?module).

VarPointsTo(?var, ?module),
VarPointsToModule(?var, ?module):-
  isLoadInstanceField_Insn(?insn),
  FieldInstruction_FieldName(?insn, ?fieldName),
  LoadInstanceField_Base(?insn, ?base),
  LoadInstanceField_To(?insn, ?var),
  VarPointsToModule(?base, ?parModule),
  ?module = cat(cat(cat(substr(?parModule, 0, strlen(?parModule) -1), "."), ?fieldName),">"),
  isModule(?module).

VarPointsTo(?var, ?function),
VarPointsToFunction(?var, ?function):-
  isLoadInstanceField_Insn(?insn),
  FieldInstruction_FieldName(?insn, ?fieldName),
  LoadInstanceField_Base(?insn, ?base),
  LoadInstanceField_To(?insn, ?var),
  VarPointsToModule(?base, ?parModule),
  ?function = cat(cat(cat(substr(?parModule, 0, strlen(?parModule) -1), "."), ?fieldName),">"),
  isFunction(?function).


//One thing to be considered in the future is the difference between:
//1) from file import var
//   var = 5
//2) import file
//   file.var = 5
//
// The first creates a copy of the variable in your scope while the second modifies the original var