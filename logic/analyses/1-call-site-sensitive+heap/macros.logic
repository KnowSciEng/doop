// For this analysis, every heap context recorded on allocation
// corresponds to the calling context of the allocator method.
// Subtle point: this may need to be created because even though it
// exists as a Context it may not exist as an HContext.
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContextFromContext[ctx]] = hctx


// For this analysis the context of a method call corresponds to the
// invocation site of the method.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[invocation] = calleeCtx

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[invocation] = calleeCtx

#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContextFromContext[callerCtx]] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[StartupInvocation[]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[FakeInvocation:RegisterFinalize[value]] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), ContextFromRealContext[value] = ctx \
  <- MethodInvocationValue(value, valueId)

#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromRealHContext[value] = hctx \
  <- MethodInvocationValue(value, valueId)
