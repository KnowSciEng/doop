//----------------------------------------------------------------------------------------------------------------------
//                                              MAYBE SOME BROADCASTING LOGIC
//----------------------------------------------------------------------------------------------------------------------




//----------------------------------------------------------------------------------------------------------------------
//                                              ADD(tf.add,+) also: See tf.add_n
//----------------------------------------------------------------------------------------------------------------------
.decl TfAddOrSubOp(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?addOrSubOp:Value)
.output TfAddOrSubOp

TensorOperation_NameToVal(?ctx, ?insn, ?addOrSubOp, "op1", ?tensor1Hctx, ?tensor1),
TensorOperation_NameToVal(?ctx, ?insn, ?addOrSubOp, "op2", ?tensor2Hctx, ?tensor2),
TfAddOrSubOp(?ctx, ?insn, ?addOrSubOp):-
  isAssignBinop_Insn(?insn),
  AssignOper_From(?insn, ?x1, ?from1),
  AssignOper_From(?insn, ?x2, ?from2),
  ?x1 != ?x2,
  Assign_Operation(?insn, ?op),
  (?op = "add" ; ?op = "rem"),
  VarPointsTo(?tensor1Hctx, ?tensor1, ?ctx, ?from1),
  VarPointsTo(?tensor2Hctx, ?tensor2, ?ctx, ?from2),
  TensorShapeListLength(?tensor1Hctx, ?tensor1, ?len1),
  TensorShapeListLength(?tensor2Hctx, ?tensor2, ?len2),
  ?len1 >= ?len2,
  Instruction_Function(?insn, ?fun),
  Instruction_Index(?insn, ?index),
  ?addOrSubOp = PlaceHolderValueMacro(?op, ?fun, ?index, ?tensor1, ?tensor2).

//----------------------------------------------------------------------------------------------------------------------
//                                              MATMUL
//----------------------------------------------------------------------------------------------------------------------
.decl TfMatMulOp(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?matMulOp:Value)
.output TfMatMulOp


//----------------------------------------------------------------------------------------------------------------------
//                                              MULTIPLY
//----------------------------------------------------------------------------------------------------------------------



//----------------------------------------------------------------------------------------------------------------------
//                                              * OP(overloaded)
//----------------------------------------------------------------------------------------------------------------------



//----------------------------------------------------------------------------------------------------------------------
//                                               TENSORDOT
//----------------------------------------------------------------------------------------------------------------------

