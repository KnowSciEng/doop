// For this analysis, every heap context recorded on allocation
// corresponds to the most significant element of the calling
// context of the allocator method.
#define RecordMacro(ctx, value, hctx) \
  ctx = [type, value1], \
  hctx = [value1]

// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  hctx = [value1], \
  Value_DeclaringType(value1, type), \
  calleeCtx = [type, value]

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  calleeCtx = callerCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  hctx = [value1], \
  Value_DeclaringType(value1, type), \
  newCtx = [type, value]

#define MergeStartupMacro(hctx, value, calleeCtx) \
  hctx = [value1], \
  Value_DeclaringType(value1, type), \
  calleeCtx = [type, value]

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  callerCtx = [type1, value2], \
  Value_DeclaringType(value2, type2), \
  newCtx = [type2, value]

#define InitContextMacro(value) \
  isContext(ctx) :- \
      isValue(value), \
      ctx = ["java.lang.String", value]

#define InitHContextMacro(value) \
  isHContext(hctx) :- \
      isValue(value), \
      hctx = [value]
