#include "init.dl"

/**
 * Generic context-sensitive pointer analysis
 */


/**
 * Heap allocation
 */

configuration.RecordContextRequest(?ctx, ?heapValue, ?var) :-
  AssignNormalHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod).

isHContext(?newHCtx),
VarPointsTo(?newHCtx, ?heapValue, ?ctx, ?var) :-
  configuration.RecordContextRequest(?ctx, ?heapValue, ?var),
  configuration.RecordContextResponse(?ctx, ?heapValue, ?var, ?newHCtx).

VarPointsTo(?hctx, ?heapValue, ?ctx, ?var) :-
  Reachable(?inmethod),  // optimization purposes
  AssignContextInsensitiveHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  isImmutableHContext(?hctx).
  .plan 1:(4,3,2,1)

/**
 * Null assignments
 */

VarPointsTo(?hctx, ?null, ?toCtx, ?to) :-
   Reachable(?inmethod),  // optimization purposes
   AssignNull(?to, ?inmethod),
   Value_Null(?null),
   ReachableContext(?toCtx, ?inmethod),
   isImmutableHContext(?hctx).

/**
 * Assignment of numeric constant. Currently context-insensitive and
 * only used for android analyses, hence the ad hoc logic to match
 * a specific host class (R).
 */

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
   ReachableContext(?toCtx, ?inmethod),
   Instruction_Method(?insn, ?inmethod),
   (AssignNumConstant_Id(?insn, ?const);
    AssignCastNumConstant_Id(?insn, ?const)), // TODO: check the cast?
   AssignInstruction_To(?insn, ?to),
   Value_Num(?value, ?const),
   isImmutableHContext(?hctx).

// No need to check if type compatible: check is done at original
// inputs to VarPointsTo

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  AssignLocal(?from, ?to, _).

/**
 * Cast assignments
 */

.decl OptAssignCast(?type:Type, ?to:Var, ?from:Var)

OptAssignCast(?type, ?to, ?from) :-
  Reachable(?inmethod),
  AssignCast(?type, ?from, ?to, ?inmethod).

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  OptAssignCast(?type, ?to, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  Value_Type(?value, ?valuetype),
  basic.SupertypeOf(?type, ?valuetype).
 .plan 2:(3,2,1,4)

/**
 * Load/Store instance fields
 */

LoadHeapInstanceField(?ctx, ?to, ?sig, ?basehctx, ?basevalue) :-
  LoadInstanceField(?base, ?sig, ?to, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from) :-
  StoreInstanceField(?from, ?base, ?signature, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

#ifndef FEATHERWEIGHT_ANALYSIS
//// Much slower in Souffle, for large analyses
// VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
//   LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
//   InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
//    .plan 1:(2,1)

HeapInterproceduralAssign(?ctxTo, ?to, ?ctxFrom, ?from) :-
  LoadHeapInstanceField(?ctxTo, ?to, ?signature, ?basehctx, ?basevalue),
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctxFrom, ?from),
  !Value_Null(?basevalue).
 .plan 1:(2,1)

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  HeapInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from),
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  NotSpecialObject(?value).
 .plan 1:(2,1,3), 2:(3,2,1)

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
  InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
#else
// FEATHERWEIGHT_ANALYSIS
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
  InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
#endif

#ifndef FEATHERWEIGHT_ANALYSIS
InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) :-
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  NotSpecialObject(?value),
  !Value_Null(?basevalue).
 .plan 1:(2,1,3), 2:(3,2,1)

#else

.decl NoInformationOnSignature(?signature: Field)
.output NoInformationOnSignature

NoInformationOnSignature(?signature) :-
 isField(?signature),
 !DynamicInstanceFieldPointsTo(?signature, _, _, _, _).

.decl ConstructorVar(?var:Var)

ConstructorVar(?var) :-
  Var_DeclaringMethod(?var, ?meth),
  ApplicationMethod(?meth),
  basic.ClassConstructor(?meth, _).

InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) :-
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  ConstructorVar(?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  NoInformationOnSignature(?signature),
  Value_byDynamicHeap(_, ?value),
  NotSpecialObject(?value),
  !Value_Null(?basevalue).
.plan 1:(3,2,1,4,5,6)
#endif

#if defined(HEAPDLS) || defined(IMPORT_DYNAMIC_FACTS)
InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) :-
  HeapDLInstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
  HeapDLInstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
#endif

#if defined(FEATHERWEIGHT_ANALYSIS) && defined(INFORMATION_FLOW)
InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) :-
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  TaintedVarPointsTo(?value, ?ctx, ?from),
  isImmutableHContext(?hctx),
  !Value_Null(?basevalue).
  .plan 1:(2,1,3)
#endif


/**
 * Load static fields
 */

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  StaticFieldPointsTo(?hctx, ?value, ?sig),
  LoadStaticField(?sig, ?to, ?inmethod),
  ReachableContext(?ctx, ?inmethod).
#ifndef X_CONTEXT_REMOVER
  .plan 1:(3,2,1)
#endif

/**
 * Store static fields
 */
#ifndef FEATHERWEIGHT_ANALYSIS
StaticFieldPointsTo(?hctx, ?value, ?signature) :-
  ReachableStoreStaticFieldFrom(?from),
  StoreStaticField(?from, ?signature, _),
  VarPointsTo(?hctx, ?value, _, ?from).
#endif
#if defined(FEATHERWEIGHT_ANALYSIS) && defined(INFORMATION_FLOW)
StaticFieldPointsTo(?hctx, ?value, ?signature) :-
  ReachableStoreStaticFieldFrom(?from),
  StoreStaticField(?from, ?signature, _),
  TaintedVarPointsTo(?value, _, ?from),
  isImmutableHContext(?hctx).
#endif

.decl ReachableStoreStaticFieldFrom(?from:Var)

ReachableStoreStaticFieldFrom(?from) :-
  Reachable(?inmethod),
  StoreStaticField(?from, _, ?inmethod).

#ifdef ANDROID
/**
 * Store default value in static field (Android-only!)
 */
StaticFieldPointsTo(?hctx, ?value, ?signature) :-
  FieldInitialValue(?signature, ?const),
  Value_Num(?value, ?const),
  isImmutableHContext(?hctx).

/**
 * Array elements initialized by local variables (Dalvik filled-new-array*).
 */
VarPointsTo(?baseHctx, ?baseHeap, ?ctx, ?to),
ArrayIndexPointsTo(?hctx, ?value, ?baseHctx, ?baseHeap) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  ArrayInitialValueFromLocal(_, ?to, _, ?from, ?baseHeap),
  isImmutableContext(?ctx),
  isImmutableHContext(?baseHctx).

/**
 * Array elements initialized by constants (Dalvik array payloads).
 */
VarPointsTo(?hctx, ?baseHeap, ?ctx, ?to),
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?baseHeap) :-
  ArrayInitialValueFromConst(_, ?to, _, ?const, ?baseHeap),
  Value_Num(?value, ?const),
  isImmutableContext(?ctx),
  isImmutableHContext(?hctx).

#endif // ANDROID

/**
 * Load array index
 */

// Intermediate relations used for optimization purposes
.decl OptLoadHeapArrayIndex(?var:Var, ?value:Value)
.decl Temp1(?value:Value, ?var:Var)
.decl Temp2(?ctx:configuration.Context, ?var:Var, ?hctx:configuration.HContext, ?value:Value)

OptLoadHeapArrayIndex(?to, ?basevalue) :-
  LoadHeapArrayIndex(_, ?to, _, ?basevalue).

Temp1(?basevalue, ?to) :-
  NotEmptyArrayValue(?basevalue),
  OptLoadHeapArrayIndex(?to, ?basevalue),
  Value_Type(?basevalue, ?basevaluetype),
  ComponentType(?basevaluetype, ?basecomponenttype),
  Var_Type(?to, ?type),
  basic.SupertypeOf(?type, ?basecomponenttype).

Temp2(?ctx, ?to, ?basehctx, ?basevalue) :-
  Temp1(?basevalue, ?to),
  LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue).

VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  Temp2(?ctx, ?to, ?basehctx, ?basevalue),
  ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue).

// The above logic aims to optimize the following rule:
//
// VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
//   NotEmptyArrayValue(?basevalue),
//   LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue),
//   ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue).
//   // this is necessary to handle untyped array operations, e.g., the
//   // simulation of arrayCopy calls as Load/Stores
//   Value_Type(?basevalue, ?basevaluetype),
//   Var_Type(?to, ?type),
//   ComponentType(?basevaluetype, ?basecomponenttype),
//   basic.SupertypeOf(?type, ?basecomponenttype).

.decl NotEmptyArrayValue(?value:Value)

NotEmptyArrayValue(?heapValue) :-
  Value_isHeap(?heapValue),
  !HeapAllocation_EmptyArray(?heapValue).
NotEmptyArrayValue(?value) :-
  Value_isNonHeap(?value).

LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue) :-
  ReachableLoadArrayIndexBase(?base),
  OptLoadArrayIndex(?to, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

OptLoadArrayIndex(?to, ?base) :-
  LoadArrayIndex(?base, ?to, _).

.decl ReachableLoadArrayIndexBase(?base:Var)

ReachableLoadArrayIndexBase(?base) :-
  Reachable(?inmethod),
  LoadArrayIndex(?base, _, ?inmethod).

/**
 * Store array index
 */

.decl OptStoreIntoArray(?hctx:configuration.HContext, ?value:Value, ?basehctx:configuration.HContext, ?basevalue:Value)

#ifndef FEATHERWEIGHT_ANALYSIS
OptStoreIntoArray(?hctx, ?value, ?basehctx, ?basevalue) :-
  StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from).
#endif
#if defined(FEATHERWEIGHT_ANALYSIS) && defined(INFORMATION_FLOW)
OptStoreIntoArray(?hctx, ?value, ?basehctx, ?basevalue) :-
  StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from),
  TaintedVarPointsTo(?value, ?ctx, ?from),
  isImmutableHContext(?hctx).
#endif

ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue) :-
  OptStoreIntoArray(?hctx, ?value, ?basehctx, ?basevalue),
  NotSpecialObject(?value),
  NotEmptyArrayValue(?basevalue),
  Value_Type(?value, ?valuetype),
  Value_Type(?basevalue, ?basevaluetype),
  ComponentType(?basevaluetype, ?componenttype),
  basic.SupertypeOf(?componenttype, ?valuetype).
 .plan 1:(2,1,3,4,5,6,7),
       2:(3,1,2,4,5,6,7),
       3:(4,1,2,3,5,6,7),
       4:(5,1,2,3,4,6,7)

StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from) :-
  ReachableStoreArrayIndexBase(?base),
  OptStoreArrayIndex(?from, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

.decl ReachableStoreArrayIndexBase(?base:Var)

ReachableStoreArrayIndexBase(?base) :-
  Reachable(?inmethod),
  StoreArrayIndex(_, ?base, ?inmethod).

OptStoreArrayIndex(?from, ?base) :-
  StoreArrayIndex(?from, ?base, _).


/**
 * Assignments for method invocations
 */

// This logic replaces (optimizes) general-purpose inter-procedural
// assignments for args and returns. It should be unnecessary, but
// Souffle appreciates smaller deltas, since plans cannot change
// per-rule-evaluation, only per-rule-structure.

OptArgAssign(?calleeCtx, ?formal, ?callerCtx, ?actual) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  ActualParam(?index, ?invocation, ?actual),
  FormalParam(?index, ?method, ?formal).

#ifdef INFORMATION_FLOW

VarPointsTo(?hctx, ?value, ?callerCtx, ?local) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  AssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?method),
  !SanitizationMethod(?method),
  OptRetVarPointsTo(?hctx, ?value, ?calleeCtx, ?return).
  .plan 1:(4,3,1,2)

VarPointsTo(?hctx, ?value, ?callerCtx, ?local) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  AssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?method),
  OptRetVarPointsTo(?hctx, ?value, ?calleeCtx, ?return),
  isHeapAllocation(?value).
  .plan 1:(4,5,3,1,2)

#else

OptReturnAssign(?callerCtx, ?local, ?calleeCtx, ?return) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  AssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?method).

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptRetVarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  OptReturnAssign(?toCtx, ?to, ?fromCtx, ?from).
  .plan 1:(2,1)

#endif

OptArgVarPointsTo(?hctx, ?value, ?actualCtx, ?actual) :-
  VarPointsTo(?hctx, ?value, ?actualCtx, ?actual),
  ActualParam(_, _, ?actual).

OptRetVarPointsTo(?hctx, ?value, ?returnCtx, ?return) :-
  VarPointsTo(?hctx, ?value, ?returnCtx, ?return),
  ReturnVar(?return, _).

#ifdef INFORMATION_FLOW

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptArgVarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  OptArgAssign(?toCtx, ?to, ?fromCtx, ?from),
  isHeapAllocation(?value).
  .plan 1:(2,1,3)

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptArgVarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  OptArgAssign(?toCtx, ?to, ?fromCtx, ?from),
  Var_DeclaringMethod(?to, ?meth),
  !SanitizationMethod(?meth).
  .plan 1:(2,1,3)

#else

VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptArgVarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  OptArgAssign(?toCtx, ?to, ?fromCtx, ?from).
  .plan 1:(2,1)

#endif


/**
 * Catch-all Assignments. Use sparingly!
 */

// No longer using general-purpose inter-procedural assignments for lots
// of different flows. Souffle cannot optimize well. Best to break up
// key cases (like arg-return flow, above) into separate, well-optimized rules.
VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from),
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from).
//  .plan 1:(2,1)
//// no plan for now. These kinds of inter-proc assignments should be very few!


/**
 * Virtual Method Invocation
 */

.decl OptVirtualMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)

OptVirtualMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  VirtualMethodInvocation_Base(?invocation, ?base).

// The optimization/advanced merge treatment is as follows: the main
// analysis (this file) first creates all the possible bindings that
// the Merge logic might need to create a new context. (It uses
// ContextRequest to communicate these bindings to the individual
// context-sensitive analysis.) Then each individual analysis creates
// new context objects by employing arbitrary logic, and communicates
// back to the main analysis the results of context creation using
// ContextResponse.
configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod) :-
  OptVirtualMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  Value_Type(?value, ?valuetype),
  basic.ResolveInvocation(?valuetype, ?invocation, ?tomethod).

// The main analysis is merely looking up the previously created
// context objects.
#ifdef ZIPPER

VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod),
  configuration.ContextResponse(?callerCtx, ?hctx, ?invocation, ?value, ?calleeCtx),
  ThisVar(?tomethod, ?this),
  ZipperPrecisionCriticalMethod(?tomethod).
#ifndef X_CONTEXT_REMOVER
// .plan 1:(2,1,3,4,5), 2:(3,1,2,4,5)
#endif

VarPointsTo(?hctx, ?value, ?immCtx, ?this) :-
  configuration.ContextRequest(_, ?hctx, ?invocation, ?value, ?tomethod),
  isImmutableContext(?immCtx),
  ThisVar(?tomethod, ?this),
  !ZipperPrecisionCriticalMethod(?tomethod).
#ifndef X_CONTEXT_REMOVER
// .plan 1:(2,1,3,4,5), 2:(3,1,2,4,5)
#endif

#else

VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod),
  configuration.ContextResponse(?callerCtx, ?hctx, ?invocation, ?value, ?calleeCtx),
  ThisVar(?tomethod, ?this).
#ifndef X_CONTEXT_REMOVER
 .plan 1:(2,1,3)
#endif

#endif // #ifdef ZIPPER

/**
 * Super method invocations
 */

.decl OptSuperMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)

OptSuperMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SuperMethodInvocation_Base(?invocation, ?base).

configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod) :-
  OptSuperMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  MethodInvocation_Method(?invocation, ?tomethod).

/**
 * Special method invocations
 */

.decl OptSpecialMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)

OptSpecialMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SpecialMethodInvocation_Base(?invocation, ?base).

configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod) :-
  OptSpecialMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  MethodInvocation_Method(?invocation, ?tomethod).

#ifdef ZIPPER

VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod),
  configuration.ContextResponse(?callerCtx, ?hctx, ?invocation, ?value, ?calleeCtx),
  ThisVar(?tomethod, ?this),
  ZipperPrecisionCriticalMethod(?tomethod).
#ifndef X_CONTEXT_REMOVER
//  .plan 1:(2,1,3,4,5)
#endif

VarPointsTo(?hctx, ?value, ?immCtx, ?this) :-
  configuration.ContextRequest(_, ?hctx, ?invocation, ?value, ?tomethod),
  isImmutableContext(?immCtx),
  ThisVar(?tomethod, ?this),
  !ZipperPrecisionCriticalMethod(?tomethod).
#ifndef X_CONTEXT_REMOVER
// .plan 1:(2,1,3)
#endif

#else

VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod),
  configuration.ContextResponse(?callerCtx, ?hctx, ?invocation, ?value, ?calleeCtx),
  ThisVar(?tomethod, ?this).
#ifndef X_CONTEXT_REMOVER
  .plan 1:(2,1,3)
#endif

#endif // #ifdef ZIPPER

/**
 * Reachable
 */
ReachableContext(?ctx, ?method) :-
  CallGraphEdge(_, _, ?ctx, ?method).

Reachable(?method) :-
  ReachableContext(_, ?method).
