#include "entry-points.dl"

.decl AllConcreteImplementations(?class:ClassType, ?type:Type)
.decl ConcreteType(?class:ClassType)

AllConcreteImplementations(?class, ?staticType) :-
  isClassType(?class),
  basic.SubtypeOf(?class, ?staticType),
  !ClassModifier("abstract", ?class).

AllConcreteImplementations(?class, ?class) :-
  isClassType(?class),
  !ClassModifier("abstract", ?class).

AllConcreteImplementations(?type, ?type) :-
  isArrayType(?type).

ConcreteType(?type) :-
  AllConcreteImplementations(?type, _).

.decl ObjToMock(?class:ReferenceType)
.decl MockObjFromOpenProgramEntryPoint(?class:ReferenceType)
.decl MockObjFromArray(?class:ReferenceType)

MockObjFromOpenProgramEntryPoint(?class),
ObjToMock(?class) :-
  OpenProgramEntryPoint(?method),
  Method_DeclaringType(?method, ?class),
  isReferenceType(?class),
  !ClassModifier("abstract", ?class).

MockObjFromArray(?class),
ObjToMock(?class) :-
  ObjToMock(?type),
  isArrayType(?type),
  ComponentType(?type, ?componentType),
  StaticToActualType(?class, ?componentType).


.decl MockObjFromField(?fieldType:ReferenceType)

#ifdef MOCK_OBJECTS_FOR_FIELDS
MockObjFromField(?fieldType),
ObjToMock(?fieldType) :-
  ObjToMock(?class),
  FieldInformation(_, ?fieldType, ?class),
  isReferenceType(?fieldType),
  !ClassModifier("abstract", ?fieldType).

.decl FieldInformation(?signature:Field, ?fieldtype:Type, ?class:ReferenceType)

FieldInformation(?signature, ?fieldtype, ?class) :-
  Field_Type(?signature, ?fieldtype),
  Field_DeclaringType(?signature, ?class).

FieldInformation(?signature, ?fieldtype, ?class) :-
  FieldInformation(?signature, ?fieldtype, ?staticType),
  AllConcreteImplementations(?class, ?staticType).

FieldInformation(?signature, ?fieldConcreteType, ?class) :-
  FieldInformation(?signature, ?fieldStaticType, ?class),
  StaticToActualType(?fieldConcreteType, ?fieldStaticType).

.decl FieldTypeForMockObject(?signature:Field, ?basevalue:mainAnalysis.Value, ?fieldtype:Type)

FieldTypeForMockObject(?signature, ?basevalue, ?fieldtype) :-
  FieldInformation(?signature, ?fieldtype, ?class),
  MockObject(?basevalue, ?class).

InstanceFieldPointsTo(?hctx, ?value, ?signature, ?hctx, ?basevalue) :-
  mainAnalysis.isImmutableHContext(?hctx), //TODO: hctx
  FieldTypeForMockObject(?signature, ?basevalue, ?fieldtype),
  MockObjectForType(?value, ?fieldtype).
#endif


// Arrays
.decl MockObjectForType(?value:mainAnalysis.Value, ?staticType:Type)

MockObjectForType(?value, ?staticType) :-
  MockObject(?value, ?class),
  StaticToActualType(?class, ?staticType).

.decl MockObjectForComponentType(?value:mainAnalysis.Value, ?arrayType:ArrayType)

MockObjectForComponentType(?value, ?arrayType) :-
  ComponentType(?arrayType, ?componentType),
  MockObjectForType(?value, ?componentType).

mainAnalysis.ArrayIndexPointsTo(?hctx, ?componentValue, ?hctx, ?arrayValue) :-
  MockObjectContext(?hctx, ?arrayValue, ?arrayType),
  isArrayType(?arrayType),
  MockObjectForComponentType(?componentValue, ?arrayType).

// *****************
// Formal parameters
// *****************
.decl FormalsForOpenProgramEntryPoints(?method:Method, ?formal:Var)

FormalsForOpenProgramEntryPoints(?method, ?formal) :-
  OpenProgramEntryPoint(?method),
  FormalParam(_, ?method, ?formal).

.decl MockObjFromFormal(?type:ReferenceType)
.decl TypeForFormals(?formal:Var, ?method:Method, ?type:ReferenceType)

ObjToMock(?subtype),
MockObjFromFormal(?subtype),
TypeForFormals(?formal, ?method, ?subtype) :-
  FormalsForOpenProgramEntryPoints(?method, ?formal),
  Var_Type(?formal, ?staticType),
  StaticToActualType(?subtype, ?staticType).

.decl MockForFormal(?value:mainAnalysis.Value, ?formal:Var, ?type:ReferenceType, ?method:Method)

MockForFormal(?value, ?formal, ?type, ?method) :-
  TypeForFormals(?formal, ?method, ?type),
  MockObject(?value, ?type).

.decl MockObject(?value:mainAnalysis.Value, ?class:ReferenceType)
.decl MockObjectContext(?hctx:mainAnalysis.configuration.HContext, ?value:mainAnalysis.Value, ?class:ReferenceType)

.decl ContextForOpenProgramEntryPoint(?ctx:mainAnalysis.configuration.Context, ?method:Method)
.decl HContextForOpenProgramEntryPoint(?hctx:mainAnalysis.configuration.HContext, ?method:Method)

// bind mock objects to formals
MockObjectContext(?hctx, ?value, ?class),
mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  ContextForOpenProgramEntryPoint(?ctx, ?method),
  HContextForOpenProgramEntryPoint(?hctx, ?method),
  MockForFormal(?value, ?formal, ?class, ?method).

// TODO: do we need all these options?
// feel free to remove/collapse some

// receivers for entry points
.decl ReceiverPointsTo(?value:mainAnalysis.Value, ?ctx:mainAnalysis.configuration.Context, ?receiver:Var, ?class:ReferenceType, ?method:Method)

mainAnalysis.configuration.RecordContextRequest(?calleeCtx, ?value, ?receiver) :-
  ReceiverPointsTo(?value, ?calleeCtx, ?receiver, _, _).

HContextForOpenProgramEntryPoint(?hctx, ?method),
MockObjectContext(?hctx, ?value, ?class),
mainAnalysis.VarPointsTo(?hctx, ?value, ?calleeCtx, ?receiver) :-
#ifdef OPEN_PROGRAMS_IMMUTABLE_HCTX
  isImmutableHContext(?hctx)
#else
  mainAnalysis.configuration.RecordContextResponse(?calleeCtx, ?value, ?receiver, ?hctx),
  mainAnalysis.configuration.RecordContextRequest(?calleeCtx, ?value, ?receiver),
#endif
  ReceiverPointsTo(?value, ?calleeCtx, ?receiver, ?class, ?method).


// Important: The MergeOpenProgramEntryPointMacro can be defined
// in such a way as to retrieve some of the precision lost
// due to having mock objects flowing everywhere,
// see implementation in 2objH
// see scalable (but less sound) implementation in partioned-2objH
mainAnalysis.configuration.StartupContextRequest(?immutablehctx, ?value) :-
  MockObjectForType(?value, _),
  mainAnalysis.isImmutableHContext(?immutablehctx).


// TODO: feel free to simplify options here
ReceiverPointsTo(?value, ?calleeCtx, ?receiver, ?class, ?method),
ContextForOpenProgramEntryPoint(?calleeCtx, ?method) :-
  ThisVar(?method, ?receiver),
  Method_DeclaringType(?method, ?class),
  MockObjectForType(?value, ?class),
#ifndef MergeOpenProgramEntryPointMacro
  mainAnalysis.isImmutableHContext(?immutablehctx),
#endif
#ifdef OPEN_PROGRAMS_IMMUTABLE_CTX
  mainAnalysis.isImmutableContext(?calleeCtx),
#endif
#ifndef OPEN_PROGRAMS_IMMUTABLE_CTX
#ifdef MergeOpenProgramEntryPointMacro
  MergeOpenProgramEntryPointMacro(?method, ?value, ?calleeCtx),
#else
  mainAnalysis.configuration.StartupContextResponse(?immutablehctx, ?value, ?calleeCtx),
  mainAnalysis.configuration.StartupContextRequest(?immutablehctx, ?value),
#endif
#endif
  OpenProgramEntryPoint(?method).

// TODO: requires major tweaking for context sensitive analyses
// Consider a recency abstraction for context in static methods
HContextForOpenProgramEntryPoint(?hctx, ?method),
ContextForOpenProgramEntryPoint(?calleeCtx, ?method) :-
  mainAnalysis.isImmutableHContext(?hctx),
  mainAnalysis.isImmutableContext(?calleeCtx),
  Method_Modifier("static", ?method),
  !Method_Modifier("abstract", ?method),
  OpenProgramEntryPoint(?method).

.decl TypeToConcreteImplementationOrd(?staticType:Type, ?classOrd:number)
.decl ConcreteImplementations(?staticType:Type, ?class:ClassType)

// Here we "randomly" select a concrete implementation for each type.
// In a partitioned analysis we try to select one from the same partition.
#ifndef USER_DEFINED_PARTITIONS
TypeToConcreteImplementationOrd(?staticType, ?classOrd) :-
  AllConcreteImplementations(_, ?staticType),
  ?classOrd = min ord(?allClasses) : {
     AllConcreteImplementations(?allClasses, ?staticType)
   }.
#else
TypeToConcreteImplementationOrd(?staticType, ?classOrd) :-
  AllConcreteImplementations(_, ?staticType),
  ?classOrd = min ord(?allClasses) : {
     AllConcreteImplementations(?allClasses, ?staticType),
     mainAnalysis.configuration.TypeToPartitionId(?staticType, ?part1),
     mainAnalysis.configuration.TypeToPartitionId(?allClasses, ?part2),
     mainAnalysis.configuration.PrimaryPartitionId(?primary),
     ?part1 != ?primary,
     ?part2 != ?primary
  }.

  TypeToConcreteImplementationOrd(?staticType, ?classOrd) :-
    AllConcreteImplementations(_, ?staticType),
    ?classOrd = min ord(?allClasses) : {
       AllConcreteImplementations(?allClasses, ?staticType),
       mainAnalysis.configuration.TypeToPartitionId(?staticType, ?part1),
       mainAnalysis.configuration.TypeToPartitionId(?allClasses, ?part2),
       mainAnalysis.configuration.PrimaryPartitionId(?primary),
       ?part1 = ?primary,
       ?part2 = ?primary
    }.
#endif

ConcreteImplementations(?staticType, ?class) :-
  TypeToConcreteImplementationOrd(?staticType, ?classOrd),
  isType(?class),
  ord(?class) = ?classOrd.

// gives us a concrete implementation of a type, preferably itself
.decl StaticToActualType(?class:ClassType, ?staticType:Type)

StaticToActualType(?class, ?staticType) :-
  ConcreteImplementations(?staticType, ?class),
  !ConcreteType(?staticType).

StaticToActualType(?type, ?type) :-
  ConcreteType(?type).


// The key point where all the mock objects are created. Triggers all the rest.
MockObject(cat(?class, "::: (Mock)"), ?class),
mainAnalysis_MockValueConsMacro(cat(?class, "::: (Mock)"), ?class),
mainAnalysis.Value_DeclaringType(cat(?class, "::: (Mock)"), ?class) :-
#ifndef OPEN_PROGRAMS
  // If we are not in open-program mode, only trigger logic if no main method exists
  !basic.MainMethodDeclaration(_),
#ifdef ANDROID
  !AndroidAppComponent(_),
#endif
#endif
  ObjToMock(?class).

// Similar for mainAnalysis.ReachableContext. If not in open program mode, add extra conditions.
mainAnalysis.ReachableContext(?ctx, ?method) :-
#ifndef OPEN_PROGRAMS
  // If we are not in open-program mode, only trigger logic if no main method exists
  !basic.MainMethodDeclaration(_),
#ifdef ANDROID
  !AndroidAppComponent(_),
#endif
#endif
  ContextForOpenProgramEntryPoint(?ctx, ?method).


// "Arbitrary" methods might be made reachable. Initialize the corresponding
// classes as well.
mainAnalysis.InitializedClass(?class) :-
  mainAnalysis.ReachableContext(_, ?method),
  Method_DeclaringType(?method, ?class).
