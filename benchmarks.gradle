import org.apache.tools.ant.util.TeeOutputStream

def defaultCommonArgs = ['--timeout', '90', '--platform', 'java_7', '--cache']
def defaultOutDir     = '.'
def defaultPrefix     = ''
def defaultAnalyses   = ['context-insensitive', '1-object-sensitive', '2-type-sensitive+heap']
def defaultDaCapo2006 = ['antlr', 'bloat', 'chart', 'eclipse', 'fop', 'hsqldb', 'jython', 'luindex', 'lusearch', 'pmd', 'xalan']
def defaultDaCapoBach = ['avrora', 'batik', 'eclipse', 'h2', 'jython', 'luindex', 'lusearch', 'pmd', 'sunflow', 'xalan']

def commonArgs        = (project.hasProperty('commonArgs') ? project.property('commonArgs').split() as List : defaultCommonArgs)
def outDir            = (project.hasProperty('outDir')     ? project.property('outDir')                     : defaultOutDir)
def suffix            = (project.hasProperty('suffix')     ? project.property('suffix')                     : defaultPrefix)
def analyses          = (project.hasProperty('analyses')   ? project.property('analyses').split()           : defaultAnalyses)
def DaCapo2006        = (project.hasProperty('DaCapo2006') ? project.property('DaCapo2006').split()         : defaultDaCapo2006)
def DaCapoBach        = (project.hasProperty('DaCapoBach') ? project.property('DaCapoBach').split()         : defaultDaCapoBach)

def repoInfo
task collectRepoInfo (type: Exec) {
    commandLine 'git rev-parse --short HEAD'.split()
    standardOutput = new ByteArrayOutputStream()
    doLast {
        repoInfo = standardOutput.toString().replace(' ', '-').trim()
    }
}
def templateLambda = { suiteName, benchmarks, specialArgs ->
    task "run-$suiteName" {
        dependsOn collectRepoInfo
        dependsOn << analyses.collect { analysis -> benchmarks.collect { BM -> "$suiteName-$analysis-$BM-info" } }
    }
    analyses.each { analysis -> 
        benchmarks.each { BM ->
            task "$suiteName-$analysis-$BM-info" (type: Exec) {
                commandLine 'bloxbatch -db last-analysis -popCount'.split()
                standardOutput = new ByteArrayOutputStream()
                doLast {
                    new File("${outDir}/${analysis}-${BM}-${suffix}-${repoInfo}.popCounts")
                        .text = standardOutput.toString().split('\n')
                            .findAll { !(it =~ /^Stats/) &&
                                       !(it =~ /^system/) &&
                                       !(it =~ '^\\$') &&
                                       !(it =~ ':\\$_none') &&
                                       !(it =~ /^derivationcounts/) }
                            .join('\n') + '\n'
                }
                dependsOn "$suiteName-$analysis-$BM"
            }
            task "$suiteName-$analysis-$BM" (type: JavaExec) {
                doFirst {
                    new File(outDir).mkdirs()
                    standardOutput = new TeeOutputStream(new FileOutputStream("${outDir}/${analysis}-${BM}-${suffix}-${repoInfo}.trace"), System.out);
                }
                classpath = sourceSets.main.runtimeClasspath
                main = 'org.clyze.doop.Main'

                def jarFile = "${environment.DOOP_BENCHMARKS}/$suiteName/${BM}.jar"
                args = ['-a', analysis, '-i', jarFile] + commonArgs + specialArgs
            }
        }
    }
}

templateLambda("dacapo-2006", DaCapo2006, ['--dacapo'])      // --> adds "run-dacapo-2006" task
templateLambda("dacapo-bach", DaCapoBach, ['--dacapo-bach']) // --> adds "run-dacapo-bach" task
