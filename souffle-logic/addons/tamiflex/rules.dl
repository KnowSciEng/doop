Value_DeclaringType(?value, ?type) :-
  (Tamiflex_Class_NewInstance(?invocation, ?heap) ;
   Tamiflex_Constructor_NewInstance(?invocation, _, ?heap) ;
   Tamiflex_Array_NewInstance(?invocation, ?heap)),
  Value_Heap(?value, ?heap),
  Instruction_Method(?invocation, ?meth),
  Method_DeclaringType(?meth, ?type).

Value_DeclaringType(?value, ?type) :-
  (Tamiflex_ReifiedField(_, ?heap, _) ;
   Tamiflex_ReifiedFieldArray(_, ?heap, _) ;
   Tamiflex_ReifiedMethod(_, ?heap, _) ;
   Tamiflex_ReifiedMethodArray(_, ?heap, _)),
  Value_Heap(?heap, ?value),
  Value_Type(?value, ?type).


Tamiflex_Class_NewInstance(?invocation, ?heap) :-
  ?sig = "<java.lang.Class: java.lang.Object newInstance()>",
  isMethod(?sig),
  VirtualMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?type, ?invocation),
  isInstruction(?invocation),
  isType(?type),
  ?id = cat(cat(cat(cat("<(Tamiflex) ", ?invocation), "/"), ?type), ">"),
  MockHeapConsMacro(?id, ?type, ?heap).

Tamiflex_Constructor_NewInstance(?invocation, ?constructor, ?heap) :-
  ?sig = "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>",
  isMethod(?sig),
  VirtualMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?constructor, ?invocation),
  isInstruction(?invocation),
  isMethod(?constructor),
  Method_DeclaringType(?constructor, ?type),
  isType(?type),
  ?id = cat(cat(cat(cat("<(Tamiflex) ", ?invocation), "/"), ?type), ">"),
  MockHeapConsMacro(?id, ?type, ?heap).

Tamiflex_Array_NewInstance(?invocation, ?heap) :-
  ?sig = "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
  isMethod(?sig),
  StaticMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?type, ?invocation),
  isInstruction(?invocation),
  isType(?type),
  ?id = cat(cat(cat(cat("<(Tamiflex) ", ?invocation), "/"), ?type), ">"),
  MockHeapConsMacro(?id, ?type, ?heap).

Tamiflex_ReifiedField(?fld, ?heap, ?invocation) :-
  (?sig = "<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>" ;
   ?sig = "<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>" ),
  isMethod(?sig),
  VirtualMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?fld, ?invocation),
  isField(?fld),
  ?type = "java.lang.reflect.Field",
  isType(?type),
  ?id = cat(cat("<(Tamiflex) ", ?fld), ">"),
  MockHeapConsMacro(?id, ?type, ?heap).

Tamiflex_ReifiedFieldArray(?type, ?heap, ?invocation) :-
  (?sig = "<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>" ;
   ?sig = "<java.lang.Class: java.lang.reflect.Field[] getFields()>" ),
  isMethod(?sig),
  VirtualMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?type, ?invocation),
  isType(?type),
  ?javaFieldArrayType = "java.lang.reflect.Field[]",
  isType(?javaFieldArrayType),
  ?id = cat(cat("<(Tamiflex) ", ?type), "/Field[]>"),
  MockHeapConsMacro(?id, ?javaFieldArrayType, ?heap).

Tamiflex_ReifiedMethod(?method, ?heap, ?invocation) :-
  (?sig = "<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>" ;
   ?sig = "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>" ),
  isMethod(?sig),
  VirtualMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?method, ?invocation),
  isMethod(?method),
  ?type = "java.lang.reflect.Method",
  isType(?type),
  ?id = cat(cat("<(Tamiflex) ", ?method), ">"),
  MockHeapConsMacro(?id, ?type, ?heap).

Tamiflex_ReifiedMethodArray(?type, ?heap, ?invocation) :-
  (?sig = "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>" ;
   ?sig = "<java.lang.Class: java.lang.reflect.Method[] getMethods()>" ),
  isMethod(?sig),
  VirtualMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?type, ?invocation),
  isType(?type),
  ?javaMethodArrayType = "java.lang.reflect.Method[]",
  isType(?javaMethodArrayType),
  ?id = cat(cat("<(Tamiflex) ", ?type), "/Method[]>"),
  MockHeapConsMacro(?id, ?javaMethodArrayType, ?heap).


/**
 * The analysis is done under a default context (ImmutableContext). No
 * reason to use normal context for reflective calls, since we are
 * using the results from tamiflex to resolve targets. Thus there is
 * no information to distinguish things per context.
 */

/**
 * A tamiflex call graph edge is not a real one: types in the signature
 * are not preserved (e.g., argumens are passed as an array). This is
 * much like reflective call graph edges.
 */
.decl TamiflexCallGraphEdge(?callerCtx:Context, ?invocation:MethodInvocation,
                            ?calleeCtx:Context, ?callee:Method)

ReachableContext(?calleeCtx, ?callee) :-
  TamiflexCallGraphEdge(_, _, ?calleeCtx, ?callee).

OptForNameInvocation(?invocation, ?inmethod) :-
  (?sig = "<java.lang.Class: java.lang.Class forName(java.lang.String)>" ;
   ?sig = "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>" ),
  isMethod(?sig),
  StaticMethodInvocation(?invocation, ?sig, ?inmethod).

VarPointsTo(?hctx, ?classValue, ?ctx, ?return) :-
  OptForNameInvocation(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  ImmutableHContextFromContext(?ctx, ?hctx),
  Tamiflex_ReflectionMap(?class, ?invocation),
  ?classObj = cat(cat("<class ", ?class), ">"),
  isHeapAllocation(?classObj),
  HeapAllocation_Type(?classObj, "java.lang.Class"),
  Value_Heap(?classValue, ?classObj),
  AssignReturnValue(?invocation, ?return).

VarPointsTo(?hctx, ?value, ?ctx, ?return) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  (Tamiflex_Class_NewInstance(?invocation, ?heap) ;
   Tamiflex_Array_NewInstance(?invocation, ?heap) ),
  Value_Heap(?value, ?heap),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  AssignReturnValue(?invocation, ?return).

// MergeMacro(?callerCtx, ?invocation, ?hctx, ?obj, ?calleeCtx),
VarPointsTo(?hctx, ?value, ?callerCtx, ?return),
TamiflexCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?constructor),
TamiflexConstructorCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?constructor),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  ImmutableHContextFromContext(?callerCtx, ?hctx),
  ImmutableContextFromContext(?callerCtx, ?calleeCtx),
  Tamiflex_Constructor_NewInstance(?invocation, ?constructor, ?heap),
  Value_Heap(?value, ?heap),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?callerCtx, ?inmethod),
  AssignReturnValue(?invocation, ?return),
  ThisVar(?constructor, ?this).

Tamiflex_Invoke(?callerCtx, ?invocation, ?method) :-
  ?sig = "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>",
  isMethod(?sig),
  VirtualMethodInvocation(?invocation, ?sig, _),
  Tamiflex_ReflectionMap(?method, ?invocation),
  isMethod(?method),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?callerCtx, ?inmethod).

/**
 * Private method invocations are special methods, unless they are static.
 * But they are handled the same as virtual methods in the context of tamiflex
 * since tamiflex has already resolved the final target method.
 */
TamiflexCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  Tamiflex_Invoke(?callerCtx, ?invocation, ?callee),
  ! Method_Modifier("static", ?callee),
  ActualParam(0, ?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  ThisVar(?callee, ?this),
  ImmutableContextFromHContext(?hctx, ?calleeCtx).

/**
 * Static method invocations
 */
TamiflexCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee) :-
   Tamiflex_Invoke(?callerCtx, ?invocation, ?callee),
   Method_Modifier("static", ?callee),
   ImmutableContextFromContext(?callerCtx, ?calleeCtx).

/**
 * Return values of reflective method invocations
 */
OptInterproceduralAssign(?callerCtx, ?local, ?calleeCtx, ?return) :-
  Tamiflex_Invoke(?callerCtx, ?invocation, ?callee),
  AssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?callee),
  ImmutableContextFromContext(?callerCtx, ?calleeCtx).

/**
 * Handle the array of actual parameters of a reflective method call
 */

// Optimizing indexing
/// two cases of tamiflex calls: regular reflective invokes ...
TamiflexInvocationFirstParam(?calleeCtx, ?formal, ?callerCtx, ?argsParam) :-
  Tamiflex_Invoke(?callerCtx, ?invocation, ?callee),
  ActualParam(1, ?invocation, ?argsParam),
  FormalParam(_, ?callee, ?formal),
  ImmutableContextFromContext(?callerCtx, ?calleeCtx).
/// ... vs. constructor calls
TamiflexInvocationFirstParam(?calleeCtx, ?formal, ?callerCtx, ?argsParam) :-
  TamiflexConstructorCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
  ActualParam(0, ?invocation, ?argsParam),
  FormalParam(_, ?callee, ?formal).

// Optimizing indexing
TamiflexInvocationArgumentArrayValue(?calleeCtx, ?formal, ?basehctx, ?basevalue) :-
  TamiflexInvocationFirstParam(?calleeCtx, ?formal, ?ctx, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

VarPointsTo(?hctx, ?value, ?calleeCtx, ?formal) :-
  TamiflexInvocationArgumentArrayValue(?calleeCtx, ?formal, ?basehctx, ?basevalue),
  ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue),
  Var_Type(?formal, ?type),
  Value_Type(?value, ?valuetype),
  SupertypeOf(?type, ?valuetype).

VarPointsTo(?hctx, ?value, ?ctx, ?return) :-
  ImmutableHContextFromContext(?ctx, ?hctx),
  (Tamiflex_ReifiedField(_, ?heap, ?invocation) ;
   Tamiflex_ReifiedFieldArray(_, ?heap, ?invocation) ;
   Tamiflex_ReifiedMethod(_, ?heap, ?invocation) ;
   Tamiflex_ReifiedMethodArray(_, ?heap, ?invocation) ),
  Value_Heap(?value, ?heap),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  AssignReturnValue(?invocation, ?return).
