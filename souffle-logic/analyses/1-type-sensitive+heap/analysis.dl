// Context-sensitive pointer analysis with context of 1 type and a
// context-sensitive heap abstraction.

// In this analysis, both the real context and the real heap context are Types
// The type is now always a class type, because of arrays currently being a
// non-class subtype of Object
.type Context  = [ type:Type ]
.type HContext = [ type:Type ]

// Dynamic analysis
#ifdef HEAPDL
DynamicContextToContext([?type], ?dynCtx) :-
   DynamicContextHeap1(?heap1, ?dynCtx),
   Value_byDynamicHeap(?heap1, ?value),
   Value_Type(?value, ?type).

DynamicContextToContext(?ctx, ?dynCtx) :-
   isDynamicContext(?dynCtx),
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableContext(?ctx).

DynamicContextToHContext([?type], ?dynCtx) :-
   DynamicContextHeap1(?heap1, ?dynCtx),
   Value_byDynamicHeap(?heap1, ?value),
   Value_Type(?value, ?type).

DynamicContextToHContext(?hctx, ?dynCtx) :-
   isDynamicContext(?dynCtx),
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableHContext(?hctx).
#endif