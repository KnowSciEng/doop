// For this analysis, every heap context recorded on allocation
// corresponds to the most significant element of the calling
// context of the allocator method.
#define RecordMacro(ctx, value, hctx) \
  ctx = [invocation1, invocation2], \
  hctx = [invocation2]


// For this analysis the context of a method call corresponds to the
// invocation site of the method and the most significant element of the
// calling context for the caller method.
// Just keep the same context as the
// caller.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
   newCtx = callerCtx
   
#define MergeStartupMacro(hctx, value, calleeCtx) \
  StartupInvocation(invocation), \
  calleeCtx = [invocation, invocation]

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  FakeInvocation_RegisterFinalize(value, invocation), \
  callerCtx = [invocation1, invocation2], \
  newCtx = [invocation2, invocation]

#define InitContextMacro(invocation) \
  isContext(ctx) :- ctx = [invocation, invocation]

#define InitHContextMacro(invocation) \
  isHContext(hctx) :- hctx = [invocation]
