//// Heuristic pre-analysis to tell us when there (likely) is a flow
//// from a method's arguments to its return.

// There is a flow (of any kind) between two local vars
LocalVarFlow(?to, ?from) <-
  AssignLocal(?from, ?to, _);
  AssignCast(_, ?from, ?to, _).

// There is a flow from a method formal, at a given index, to a method local
InFlowTo(?index, ?inVar) <-
  FormalParam[?index, _] = ?inVar.
// HACK: use 7 to designate receiver
InFlowTo(?index, ?inVar) <-
  ParamIndex:Id(?index:7),
  ThisVar[_] = ?inVar.

InFlowTo(?index, ?toVar) <-
  InFlowTo(?index, ?someVar),
  LocalVarFlow(?toVar, ?someVar).

_OptReturnVar(?method, ?return) <-
  ReturnVar(?return, ?method).

// Method that has its in-value (from a given-index formal param) flow to returns.
InFlowToReturn(?index, ?method) <-
  InFlowTo(?index, ?outVar),
  _OptReturnVar(?method, ?outVar).

StoreFlowThroughHeap(?to, ?from) <-
  StoreInstanceField(?from, ?to, _, _). // ?to is base

InFlowTo(?index, ?toVar) <-
  InFlowTo(?index, ?someVar),
  StoreFlowThroughHeap(?toVar, ?someVar).


InOutFlowMethod(?index, ?method) <-
  InFlowToReturn(?index, ?method).

IsInOutFlowMethod(?method) <-
  InOutFlowMethod(_, ?method).


// Now more deeply recursive logic: define LocalVarFlow itself based
// on InOutFlowMethod: a local var has values flow to another through
// a method call that has its params flow to its returns.

// Adding virtual is a heuristic, but it seems to be useful
ReturnFlowMethodInvocationParam(?param, ?invo) <-
  //  (SpecialMethodInvocation:Insn(?invo);
  //   StaticMethodInvocation:Insn(?invo)),
  MethodInvocation:Method[?invo] = ?toMeth,
  InFlowToReturn(?index, ?toMeth),
  ActualParam[?index, ?invo] = ?param.

ReturnFlowMethodInvocationParam(?param, ?invo) <-
  (SpecialMethodInvocation:Base[?invo] = ?param;
   VirtualMethodInvocation:Base[?invo] = ?param),
  MethodInvocation:Method[?invo] = ?toMeth,
  ParamIndex:Id(?index:7),
  InFlowToReturn(?index, ?toMeth).

LocalVarFlow(?to, ?from) <-
  ReturnFlowMethodInvocationParam(?from, ?invo),
  AssignReturnValue[?invo] = ?to.


/*
//// Possible extensions. Did not find right balance yet.

// LoadFlowThroughHeap(?to, ?from) <-
//   LoadInstanceField(?from, _, ?to, _). // ?from is base

// InFlowTo(?index, ?toVar) <-
//   InFlowTo(?index, ?someVar),
//   LoadFlowThroughHeap(?toVar, ?someVar).

// _OptMethodFromVar[?var] = ?method <-
//   Var:DeclaringMethod(?var, ?method).
  
// InFlowToOtherArgsHeap(?index, ?indexBase, ?method) <-
//   InFlowTo(?index, ?fromVar),
//   InFlowTo(?indexBase, ?baseVar),
//   StoreFlowThroughHeap(?baseVar, ?fromVar),
//   _OptMethodFromVar[?fromVar] = ?method.

// InOutFlowMethod(?index, ?method) <-
//   InFlowToOtherArgsHeap(?index, _, ?method).


// // Also interprocedural handling for flow through heap
// HeapFlowMethodInvocationParam(?param, ?indexBase, ?invo) <-
//   MethodInvocation:Method[?invo] = ?toMeth,
//   InFlowToOtherArgsHeap(?index, ?indexBase, ?toMeth),
//   ActualParam[?index, ?invo] = ?param.

// HeapFlowMethodInvocationParam(?param, ?indexBase, ?invo) <-
//   (SpecialMethodInvocation:Base[?invo] = ?param;
//    VirtualMethodInvocation:Base[?invo] = ?param),
//   MethodInvocation:Method[?invo] = ?toMeth,
//   ParamIndex:Id(?index:7),
//   InFlowToOtherArgsHeap(?index, ?indexBase, ?toMeth).

// StoreFlowThroughHeap(?to, ?from) <-
//   HeapFlowMethodInvocationParam(?from, ?indexBase, ?invo),
//   ActualParam[?indexBase, ?invo] = ?to.

// StoreFlowThroughHeap(?to, ?from) <-
//   (SpecialMethodInvocation:Base[?invo] = ?to;
//    VirtualMethodInvocation:Base[?invo] = ?to),
//   HeapFlowMethodInvocationParam(?from, ?indexBase, ?invo),
//   ParamIndex:Id(?indexBase:7).

*/