// A sound may-point-to analysis ("shall"-point-to
// "True-may"-point-to). Does not conclude anything if it is not
// certain it over-approximates all possible points-to targets. That
// is, an empty points-to set means "anything can be pointed to".

MayContext(ctx) -> .
lang:entity(`MayContext).
lang:physical:storageModel[`MayContext] = "ScalableSparse".
lang:physical:capacity[`MayContext] = 2^32.

cons:MayContext:Initial[] = ctx -> MayContext(ctx).
lang:constructor(`cons:MayContext:Initial).

PushMayContext[invo, ctx] = pushedCtx ->
  MethodInvocation(invo), MayContext(ctx), MayContext(pushedCtx).
lang:constructor(`PushMayContext).


MayHeapContext(hctx) -> .
lang:entity(`MayHeapContext).
lang:physical:storageModel[`MayHeapContext] = "ScalableSparse".
lang:physical:capacity[`MayHeapContext] = 2^23.

cons:MayHeapContext:Empty[] = hctx -> MayHeapContext(hctx).
lang:constructor(`cons:MayHeapContext:Empty).


AccessPath(ap) -> .
lang:entity(`AccessPath).
lang:physical:storageModel[`AccessPath] = "ScalableSparse".
lang:physical:capacity[`AccessPath] = 2^23.

cons:AccessPath:byVar[var] = ap -> Var(var), AccessPath(ap).
lang:constructor(`cons:AccessPath:byVar).
cons:AccessPath:byStaticField[fld] = ap -> Field(fld), AccessPath(ap).
lang:constructor(`cons:AccessPath:byStaticField).
cons:AccessPath:byField[fld, ap1] = ap2 -> Field(fld), AccessPath(ap1), AccessPath(ap2).
lang:constructor(`cons:AccessPath:byField).

AccessPath:toString[ap] = str -> AccessPath(ap), string(str).

// Initial computed access paths. Faster than doing the same thing all over
InitialComputedAccessPath(ap) -> AccessPath(ap).

MayContext:MaxDepth[] = maxDepth -> int(maxDepth).
AccessPath:MaxLength[] = maxLength -> int(maxLength).
InitialRootMethodForMayAnalysis(method) -> Method(method).



LibraryCollectionType(type) -> Type(type).
// TODO: model iterators
LibraryCollectionStoreOperation(invo) -> MethodInvocation(invo).
LibraryCollectionLoadOperation(invo) -> MethodInvocation(invo).

// TODO why not functional
StoreCollection:From(insn, from) -> Instruction(insn), Var(from).
StoreCollection:Base[insn] = base -> Instruction(insn), Var(base).
LoadCollection:To[insn] = to -> Instruction(insn), Var(to).
LoadCollection:Base[insn] = base -> Instruction(insn), Var(base).

ThisVarOfConstructor[method] = this -> Method(method), Var(this).

Method:FirstInstruction[method] = insn -> Method(method), Instruction(insn).
StoreInstruction(insn) -> Instruction(insn).
BBHeadIsFirstInstruction(firstInsn) -> Instruction(firstInsn).
// Just a dumb overapproximation: is there any call site at all,
// resolved or otherwise used only for collections.
BasicBlockContainsCall(headInsn) -> Instruction(headInsn).
SomePathBetweenBasicBlocksContainsCall(prev, next) -> Instruction(prev), Instruction(next).
SomePathFromFirstInstructionContainsCall(blockHead) -> Instruction(blockHead).

StaticMethodInvocation:SimpleName[invo] = simplename -> MethodInvocation(invo), SimpleName(simplename).

IgnorableMethodInvocation(invo) -> MethodInvocation(invo).
IgnorableForStaticsMethodInvocation(invo) -> MethodInvocation(invo).
IgnorableForNonCollectionsMethodInvocation(invo) -> MethodInvocation(invo).
