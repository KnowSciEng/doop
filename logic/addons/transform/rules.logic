/**
 * Yo dawg, I heard you like program analysis, so here's some program
 * analysis before you start your program analysis.
 *
 * We can statically (with local examination only) tell that some variables 
 * are redundant copies of others: E.g., there is only a single local assignment
 * to said variables. So we remove them. Similar logic applies to
 * redundant operations.
 * 
 * Generally, this preprocessing step can be used to implement ideas from
 * C pointer analysis, such as the constraint graph or sparse analyses. All
 * these are essentially pre-analyses to simplify the subsequent real analysis
 * logic.
 */

// Root variables are the ones that have data in-flow via instructions
// other than local moves. Subtle point: if we know that a root variable
// both copies another local var and the local var copies the root var,
// the root var is equivalent to the local var and *can* be eliminated.
// But for algorithms that just compute equivalence via dominance, the
// in-flow means that root variables should not be eliminated.
_Root(?to) <- 
   ThisVar[_] = ?to ;
   FormalParam[_,_] = ?to;
   AssignHeapAllocation(_, ?to, _);
   java:lang:reflect:Constructor:newInstance(_, ?to, _);
   java:lang:Class:newInstance(_, ?to, _);
   AssignReturnValue[_] = ?to ;
   AssignCast(_, _, ?to, _) ;
   LoadArrayIndex(_, ?to, _) ;
   LoadInstanceField(_, _, ?to, _) ;
   LoadStaticField(_, ?to, _) ;
   ExceptionHandler:FormalParam[_] = ?to.

_OptLoadInstanceField(?to, ?sig, ?base) <-
   LoadInstanceField(?base, ?sig, ?to, _).
_OptLoadStaticField(?to, ?sig, ?inmethod) <-
   LoadStaticField(?sig, ?to, ?inmethod).
_OptStoreInstanceField(?from, ?sig, ?base) <-
   StoreInstanceField(?from, ?base, ?sig, _).

/*
 * No-brainer variable clones detected below
 */
// Note that we are not even checking for base vars being clones
// of each other. Only lexical equality! That's not a problem,
// because after the first transformation step, equivalent vars
// will become lexically equal! All we need is to iterate the
// transform steps.

_OptAssignLocalVar(?to) <- AssignLocal(_, ?to, _).
_OptLoadInstanceFieldVar(?to) <- LoadInstanceField(_, _, ?to, _).
_OptThisVar(?to) <- ThisVar[_] = ?to.
_OptFormalParamVar(?to) <- FormalParam[_,_] = ?to.
_OptAssignHeapAllocationVar(?to) <- AssignHeapAllocation(_, ?to, _).
_OptNewInstanceVar(?to) <- 
   java:lang:reflect:Constructor:newInstance(_, ?to, _);
   java:lang:Class:newInstance(_, ?to, _).
_OptAssignReturnVar(?to) <- AssignReturnValue[_] = ?to.
_OptAssignCastVar(?to) <- AssignCast(_, _, ?to, _).
_OptLoadArrayVar(?to) <- LoadArrayIndex(_, ?to, _).
_OptLoadStatic(?to) <- LoadStaticField(_, ?to, _).
_OptExceptionHandlerVar(?to) <- ExceptionHandler:FormalParam[_] = ?to.

// Are two locals that read an instance field clones of each other?
_ExclusivelyInstanceFieldVar(?to) <- 
   _OptLoadInstanceFieldVar(?to),
   !_OptAssignLocalVar(?to),
   !_OptThisVar(?to),
   !_OptFormalParamVar(?to),
   !_OptAssignHeapAllocationVar(?to),
   !_OptNewInstanceVar(?to),
   !_OptAssignReturnVar(?to),
   !_OptAssignCastVar(?to),
   !_OptLoadArrayVar(?to),
   !_OptLoadStatic(?to),
   !_OptExceptionHandlerVar(?to).

_OptLoadInstanceField2(?sig, ?base, ?to) <-
   LoadInstanceField(?base, ?sig, ?to, _).

_MultipleLoadInstanceFields(?var) <-
   _OptLoadInstanceField2(?sig, ?base, ?var),
   _OptLoadInstanceField2(?sig2, ?base2, ?var),
   (?base != ?base2 ; ?sig != ?sig2).
  
_InstanceFieldClones(?var,?var2)
<-
   _ExclusivelyInstanceFieldVar(?var),
   _ExclusivelyInstanceFieldVar(?var2),
   _OptLoadInstanceField(?var, ?sig, ?base),
   _OptLoadInstanceField(?var2, ?sig, ?base),
   !_MultipleLoadInstanceFields(?var),
   !_MultipleLoadInstanceFields(?var2),
   ?var != ?var2.

// Only need to add reflexivity for vars already there. No need to
// pointlessly add all vars.
_InstanceFieldClones(?var,?var) <- _InstanceFieldClones(_,?var).


_FieldClonesTemp[?to] = m <-
   agg<<m = min(?from)>>(_InstanceFieldClones(?from,?to)).

_CopiesInit[?to] = ?from <- _FieldClonesTemp[?to] = ?from, ?to != ?from.


// Are two locals just storing a read of the same static field?
_ExclusivelyStaticFieldVar(?to) <- 
   !_OptLoadInstanceFieldVar(?to),
   !_OptAssignLocalVar(?to),
   !_OptThisVar(?to),
   !_OptFormalParamVar(?to),
   !_OptAssignHeapAllocationVar(?to),
   !_OptNewInstanceVar(?to),
   !_OptAssignReturnVar(?to),
   !_OptAssignCastVar(?to),
   !_OptLoadArrayVar(?to),
   _OptLoadStatic(?to),
   !_OptExceptionHandlerVar(?to).

_OptLoadStaticField(?to, ?sig, ?inmethod) <-
   LoadStaticField(?sig, ?to, ?inmethod).

_MultipleLoadStaticFields(?to) <-
   _OptLoadStaticField(?to, ?sig, ?inmethod),
   _OptLoadStaticField(?to, ?sig2, ?inmethod),
   ?sig != ?sig2.
  
_StaticFieldClones(?var,?var2)
<-
   _ExclusivelyStaticFieldVar(?var),
   _ExclusivelyStaticFieldVar(?var2),
   _OptLoadStaticField(?var, ?sig, ?inmethod),
   _OptLoadStaticField(?var2, ?sig, ?inmethod),
   !_MultipleLoadStaticFields(?var),
   !_MultipleLoadStaticFields(?var2),
   ?var != ?var2.

_StaticFieldClones(?var,?var) <- _StaticFieldClones(_,?var).

_StaticFieldClonesTemp[?to] = m <-
   agg<<m = min(?from)>>(_StaticFieldClones(?from,?to)).

_CopiesInit[?to] = ?from <- _StaticFieldClonesTemp[?to] = ?from, ?to != ?from.


// Are two locals just storing a read of the same array?

_ExclusivelyArrayReadVar(?to) <- 
   !_OptLoadInstanceFieldVar(?to),
   !_OptAssignLocalVar(?to),
   !_OptThisVar(?to),
   !_OptFormalParamVar(?to),
   !_OptAssignHeapAllocationVar(?to),
   !_OptNewInstanceVar(?to),
   !_OptAssignReturnVar(?to),
   !_OptAssignCastVar(?to),
   _OptLoadArrayVar(?to),
   !_OptLoadStatic(?to),
   !_OptExceptionHandlerVar(?to).

_MultipleArrayLoads(?to) <-
   LoadArrayIndex(?base, ?to, ?inmethod),
   LoadArrayIndex(?base2, ?to, ?inmethod),
   ?base != ?base2.

_OptLoadArrayIndex(?to, ?base) <-
   LoadArrayIndex(?base, ?to, _).

_ArrayReadClones(?var, ?var2) <-
   _ExclusivelyArrayReadVar(?var),
   _ExclusivelyArrayReadVar(?var2),
   _OptLoadArrayIndex(?var, ?base),
   _OptLoadArrayIndex(?var2, ?base),
   !_MultipleArrayLoads(?var),
   !_MultipleArrayLoads(?var2),
   ?var != ?var2.

_ArrayReadClones(?var,?var) <- _ArrayReadClones(_,?var).

_ArrayReadClonesTemp[?to] = m <-
   agg<<m = min(?from)>>(_ArrayReadClones(?from,?to)).

_CopiesInit[?to] = ?from <- _ArrayReadClonesTemp[?to] = ?from, ?to != ?from.

  
// Are two locals that store a method's return clones of each other?
_ExclusivelyReturnVar(?to) <- 
   !_OptLoadInstanceFieldVar(?to),
   !_OptAssignLocalVar(?to),
   !_OptThisVar(?to),
   !_OptFormalParamVar(?to),
   !_OptAssignHeapAllocationVar(?to),
   !_OptNewInstanceVar(?to),
   _OptAssignReturnVar(?to),
   !_OptAssignCastVar(?to),
   !_OptLoadArrayVar(?to),
   !_OptLoadStatic(?to),
   !_OptExceptionHandlerVar(?to).

_SameVirtualInvocationBaseAndSig(?invocation2, ?invocation)
<-
   VirtualMethodInvocation:Base[?invocation] = 
      VirtualMethodInvocation:Base[?invocation2],
   MethodInvocation:Method[?invocation] = 
      MethodInvocation:Method[?invocation2],
   ?invocation != ?invocation2.

_SameStaticInvocationSig(?invocation2, ?invocation) <-
   StaticMethodInvocation(?invocation, ?sig, ?inmethod),
   StaticMethodInvocation(?invocation2, ?sig, ?inmethod),
   ?invocation != ?invocation2.

_SameSpecialInvocationBaseAndSig(?invocation2, ?invocation)
<-
   SpecialMethodInvocation:Base[?invocation] = 
      SpecialMethodInvocation:Base[?invocation2],
   MethodInvocation:Method[?invocation] = 
      MethodInvocation:Method[?invocation2],
   ?invocation != ?invocation2.

_SameInvocationExceptArgs(?invocation2, ?invocation) <-
   _SameVirtualInvocationBaseAndSig(?invocation2, ?invocation) ;
   _SameStaticInvocationSig(?invocation2, ?invocation) ;
   _SameSpecialInvocationBaseAndSig(?invocation2, ?invocation).

DifferentInvocations(?invocation2, ?invocation) <-
   _SameInvocationExceptArgs(?invocation2, ?invocation),
   ActualParam[?index, ?invocation] != ActualParam[?index,?invocation2].

// This was the cause of an infernal bug! It turns out that just because
// two calls are statically the same, they don't necessarily have
// ActualParams in the same positions because one of them may be the 
// constant "null", which is not shown in Doop!
DifferentInvocations(?invocation2, ?invocation) <-
   _SameInvocationExceptArgs(?invocation2, ?invocation),
   ActualParam[?index, ?invocation] =_,
   !(ActualParam[?index,?invocation2] = _).


DifferentInvocations(?invocation2, ?invocation) <-
   _SameInvocationExceptArgs(?invocation2, ?invocation),
   ExceptionHandler:Method[?handler] = ?method, // TODO: this could be optimized
   Instruction:Method[?invocation] = ?method,
   Instruction:Index[?invocation] = ?index1,
   Instruction:Index[?invocation2] = ?index2,
   ?index1 < ?index2,
   ExceptionHandler:Begin[?handler] = ?begin,
   ExceptionHandler:End[?handler] = ?end,
   (?begin <= ?index2, ?begin >= ?index1 ; 
    ?end <= ?index2, ?end >= ?index1).  

_SameInvocation(?invocation, ?invocation2) <-
   _SameInvocationExceptArgs(?invocation, ?invocation2),
   !DifferentInvocations(?invocation, ?invocation2),
   !DifferentInvocations(?invocation2, ?invocation).

// Sanity checking. _SameInvocation should be transitive.
_SameInvocation(?inv1, ?inv2), _SameInvocation(?inv2, ?inv3), 
?inv1 != ?inv2, ?inv2 != ?inv3, ?inv1 != ?inv3 
->
   _SameInvocation(?inv1, ?inv3).

OptAssignReturnValue(?invocation, ?var) <-
   AssignReturnValue[?invocation] = ?var.

MultipleVirtualVar(?var) <-
   OptAssignReturnValue(?invocation, ?var),
   OptAssignReturnValue(?invocation2, ?var),
   ?invocation != ?invocation2,
   !_SameInvocation(?invocation, ?invocation2).
  
_CallClones(?var,?var2)
<-
   _ExclusivelyReturnVar(?var),
   _ExclusivelyReturnVar(?var2),
   !MultipleVirtualVar(?var),
   !MultipleVirtualVar(?var2),
   AssignReturnValue[?invocation] = ?var,
   AssignReturnValue[?invocation2] = ?var2,
   _SameInvocation(?invocation, ?invocation2).

_CallClones(?var,?var) <- _CallClones(_,?var).

CallClonesTemp[?to] = m <-
   agg<<m = min(?from)>>(_CallClones(?from,?to)).

_CopiesInit[?to] = ?from <- CallClonesTemp[?to] = ?from, ?to != ?from.


/*
 * Find clones based on move instructions or other subset reasoning
 * Note that these are defined to never be root variables.
 */

_DirectAssign(?to, ?from) <- AssignLocal(?from, ?to, _), ?from != ?to.

// These matter very little. Remove if slow to execute.
// -------------------------------------
_DirectAssign(?to, ?from) <-   
   StoreInstanceField(?from, ?base, ?sig, _),
   _OptLoadInstanceField(?to, ?sig, ?base),
   ?from != ?to.
_DirectAssign(?to, ?from) <-   
   StoreStaticField(?from, ?sig, ?inmethod),
   _OptLoadStaticField(?to, ?sig, ?inmethod),
   ?from != ?to.
// -------------------------------------

_OptDirectAssign(?from, ?to) <- _DirectAssign(?to, ?from).

// There are tons of ways to find variables that just copy others.
// Algorithm A: find all non-root variables dominated by a root. They
// are copies of the root. 

// Where do values from root variables get moved to without crossing another root?
_FlowFromRoot(?from, ?to) <-
   _DirectAssign(?to, ?from), _Root(?from), !_Root(?to).
_FlowFromRoot(?from, ?to) <-
   _DirectAssign(?to, ?interm), _FlowFromRoot(?from, ?interm), !_Root(?to).

// Which vars can get values from multiple roots?
_DualRoot(?var) <-
   _FlowFromRoot(?root, ?var),
   _FlowFromRoot(?root2, ?var),
   ?root != ?root2.

// If a variable is not a root, then it only has move instructions
// yielding its values. If all its move instructions transitively
// can only reach one root, then the root dominates the variable.
// The variable is just a redundant copy of the root.
_CopiesRoot[?to] = ?from <-
   _FlowFromRoot(?from, ?to),
   !_DualRoot(?to),
   !_Root(?to),
   !(_CopiesInit[?from] = _).

_CopiesRoot[?to] = ?from <-
   _FlowFromRoot(?fromInterm, ?to),
   !_DualRoot(?to),
   !_Root(?to),
   _CopiesInit[?fromInterm] = ?from.


// Algorithm A finds enough redundant copy variables, but we can find
// more. Consider:
// Algorithm B: for all variables not eliminated by Algorithm A and
// whose value is assigned by a single move instruction, follow 
// chains of such moves until you reach the "prototype" variable, 
// which does not have this "value flow from a single move"
// property (and thus is either a root, or a variable initialized by
// more than one move instruction).
// Actually Algorithm B alone yields most of the benefit of A+B for our
// Jimple intermediate language.

_DualAssign(?var) <- 
   _OptDirectAssign(?var2, ?var), 
   _OptDirectAssign(?var3, ?var), 
   ?var2 != ?var3.

_DirectCopies[?to] = ?from <-
   _DirectAssign(?to, ?from),
   !_DualAssign(?to),
   !_Root(?to).

CopiesOther[?to] = ?from <- 
   _DirectCopies[?to] = ?from,
   !(_CopiesRoot[?to] = _),
   !(_CopiesInit[?to] = _),
   !(_DirectCopies[?from] = _).
CopiesOther[?to] = ?from <- 
   _DirectCopies[?to] = ?interm, 
   CopiesOther[?interm] = ?from,
   !(_CopiesRoot[?to] = _),
   !(_CopiesInit[?to] = _).

Copies[?to] = ?from <- _CopiesInit[?to] = ?from, Var:Type[?to] = Var:Type[?from].
Copies[?to] = ?from <- _CopiesRoot[?to] = ?from, Var:Type[?to] = Var:Type[?from].
Copies[?to] = ?from <- CopiesOther[?to] = ?from, !(_CopiesRoot[?from] = _),
                       Var:Type[?to] = Var:Type[?from].
Copies[?to] = ?from <- 
   CopiesOther[?to] = ?fromInterm, 
   _CopiesRoot[?fromInterm] = ?from,
   Var:Type[?to] = Var:Type[?from].


/*
 * Separate optimization: remove redundant data-flow.
 */

// INVARIANT: CopiesInit is the only subset of Copies that applies to root 
// variables, and it applies to single-purpose root variables only. This is
// important for avoiding cycles below.

_OptAssignLocal(?to, ?from) <- AssignLocal(?from, ?to, _).

_TransitiveCopy(?from, ?to) <-
   _DirectAssign(?to, ?from).

_TransitiveCopy(?from, ?to) <-
   _DirectAssign(?to, ?interm),
   _TransitiveCopy(?from, ?interm).

// Need to be sure to avoid cycles, although they are probably impossible
// in our current intermediate representation (Jimple). We impose directionality
// conservatively: the eliminated edge is always on a var that has no
// flow back to the other var that gives it (or receives) data. The conditions
// below currently seem sufficient.
RedundantLoadInstanceField(?to, ?sig, ?base, ?inmethod) <-
   LoadInstanceField(?base, ?sig, ?to, ?inmethod),
   _OptLoadInstanceField(?toFrom, ?sig, ?base),
   _OptAssignLocal(?to, ?toFrom),
   !_TransitiveCopy(?to, ?toFrom), 
   ?to != ?toFrom.

RedundantLoadStaticField(?to, ?sig, ?inmethod) <-
   _OptLoadStaticField(?to, ?sig, ?inmethod),
   _OptLoadStaticField(?toFrom, ?sig, ?inmethod),
   _OptAssignLocal(?to, ?toFrom),
   !_TransitiveCopy(?to, ?toFrom), 
   ?to != ?toFrom.

RedundantLocalCopy(?to, ?from, ?inmethod) <-
   _OptAssignLocal(?to, ?from),
   _OptLoadInstanceField(?to, ?sig, ?base),
   StoreInstanceField(?from, ?base, ?sig, ?inmethod),
   !_TransitiveCopy(?to, ?from), 
   ?to != ?from.

RedundantLocalCopy(?to, ?from, ?inmethod) <-
   _OptAssignLocal(?to, ?from),
   _OptLoadStaticField(?to, ?sig, ?inmethod),
   StoreStaticField(?from, ?sig, ?inmethod),
   !_TransitiveCopy(?to, ?from), 
   ?to != ?from.

RedundantLocalCopy(?to, ?from, ?inmethod) <-
   _OptAssignLocal(?to, ?from),
   AssignLocal(?from, ?toFrom, ?inmethod),
   _OptAssignLocal(?to, ?toFrom),
   !_TransitiveCopy(?to, ?from), 
   !_TransitiveCopy(?to, ?toFrom), 
   !_TransitiveCopy(?toFrom, ?from), 
   ?to != ?from, ?to != ?toFrom, ?from != ?toFrom.

/*
// No easy way to ensure these don't create elimination cycles 
// together with the above.
RedundantStoreInstanceField(?from, ?sig, ?base, ?inmethod) <-
   StoreInstanceField(?from, ?base, ?sig, ?inmethod),
   _OptStoreInstanceField(?fromTo, ?sig, ?base),
   _OptAssignLocal(?fromTo, ?from),
   ?from != ?fromTo.

RedundantStoreStaticField(?from, ?sig, ?inmethod) <-
   StoreStaticField(?from, ?sig, ?inmethod),
   StoreStaticField(?fromTo, ?sig, ?inmethod),
   _OptAssignLocal(?fromTo, ?from),
   ?from != ?fromTo.
*/

RedundantInvocation(?invocation) <-
   _SameInvocation(?invocation2, ?invocation),
   AssignReturnValue[?invocation] = ?to,
   AssignReturnValue[?invocation2] = ?toFrom,
   _OptAssignLocal(?to, ?toFrom),
   !_TransitiveCopy(?to, ?toFrom),
   ?to != ?toFrom.

// If the return variable is eliminated, no problem. The invocation
// is redundant for one more reason.
RedundantInvocation(?invocation) <-
   _SameInvocation(?invocation2, ?invocation),
   AssignReturnValue[?invocation] = AssignReturnValue[?invocation2],
   Instruction:Index[?invocation2] < Instruction:Index[?invocation].

RedundantInvocation(?invocation) <-
   _SameInvocation(?invocation2, ?invocation),
   !(AssignReturnValue[?invocation] = _),
   !(AssignReturnValue[?invocation2] = _),
   Instruction:Index[?invocation2] < Instruction:Index[?invocation].

// It's ok to also eliminate invocations that ignore the return value,
// as long as an equivalent one that doesn't is in the same method.
RedundantInvocation(?invocation) <-
   _SameInvocation(?invocation2, ?invocation),
   !(AssignReturnValue[?invocation] = _),
   AssignReturnValue[?invocation2] = _.


/*
 * EXPERIMENTS ONLY BELOW THIS POINT, no active code.
 */

/*
 * The start of yet another optimization: field expression clones
 */
/*
// Not worth exploring further: yields zero-size relations after
// all previous optimizations have been applied.
_FieldExprSubset(?baseSub, ?baseSup, ?sig) <-
   LoadInstanceField(?baseSub, ?sig, ?var, ?inmethod),
   StoreInstanceField(?var, ?baseSup, ?sig, ?inmethod),
   ?baseSub != ?baseSup,
   !(Copies[?baseSub] = ?baseSup),
   !(Copies[?baseSup] = ?baseSub),
   !(Copies[?baseSup] = Copies[?baseSub]).

_FieldExprClones(?base1, ?base2, ?sig) <-
   _FieldExprSubset(?base1, ?base2, ?sig),
   _TransitiveCopy(?base2, ?base1).
//   _OptAssignLocal(?base1, ?base2).
  
_FieldExprClones(?base1, ?base2, ?sig) <-
   _FieldExprSubset(?base1, ?base2, ?sig),
   _FieldExprSubset(?base2, ?base1, ?sig).  

_FieldExprSubset2(?baseSub, ?sigSub, ?baseSup, ?sigSup) <-
   LoadInstanceField(?baseSub, ?sigSub, ?var, ?inmethod),
   StoreInstanceField(?var, ?baseSup, ?sigSup, ?inmethod),
   (?baseSub != ?baseSup ; ?sigSub != ?sigSup).

_FieldExprSubsetTrans(?baseSub, ?sigSub, ?baseSup, ?sigSup) <-
   _FieldExprSubset2(?baseSub, ?sigSub, ?baseSup, ?sigSup).

_FieldExprSubsetTrans(?baseSub, ?sigSub, ?baseSup, ?sigSup) <-
   _FieldExprSubset2(?baseSub, ?sigSub, ?baseInterm, ?sigInterm),
   _FieldExprSubsetTrans(?baseInterm, ?sigInterm, ?baseSup, ?sigSup).

_FieldExprSCC(?baseSub, ?sigSub, ?baseSup, ?sigSup) <-
   _FieldExprSubsetTrans(?baseSub, ?sigSub, ?baseSup, ?sigSup),
   _FieldExprSubsetTrans(?baseSup, ?sigSup, ?baseSub, ?sigSub).

_StaticFieldExprSubset(?sigSub, ?sigSup) <-
   LoadStaticField(?sigSub, ?var, ?inmethod),
   StoreStaticField(?var, ?sigSup, ?inmethod),
   ?sigSub != ?sigSup.

_StaticFieldExprSubsetTrans(?sigSub, ?sigSup) <-
   _StaticFieldExprSubset(?sigSub, ?sigSup).

_StaticFieldExprSubsetTrans(?sigSub, ?sigSup) <-
   _StaticFieldExprSubset(?sigSub, ?sigInterm),
   _StaticFieldExprSubsetTrans(?sigInterm, ?sigSup).

_StaticFieldExprSCC(?sigSub, ?sigSup) <-
   _StaticFieldExprSubsetTrans(?sigSub, ?sigSup),
   _StaticFieldExprSubsetTrans(?sigSup, ?sigSub).
*/
  

/*
// The above algorithms find almost all of the copies, but what about
// cyclic move patterns or more complex domination? These are very
// rare in our intermediate language, but we can easily catch them by
// SCC computation. Below is a more precise algorithm (ISMM'12) for
// determining which variables merely copy information from others. It
// is not deployed because a) it yields no benefit (67.2K redundant
// vars for antlr+jdk1.4 vs. 66.3K vars for the simple algorithms); b)
// it may be expensive for large methods, since it includes O(n^3)
// computations in order to compute SCCs and dominance; c) (fixable)
// the implementation below does not distinguish "root" vars (which
// have outside flow and are special: equivalent to other vars in the
// same SCC but not equivalent to vars that merely dominate them). It
// assumes it can eliminate any local var. 

_InSameScc(?var1, ?var2) <- _TransitiveCopy(?var1, ?var2), _TransitiveCopy(?var2, ?var1).
_InSameScc(?var, ?var) <- Var(?var).

SCCRepresentativeOf[?n1] = m <- agg<<m = min(?n2)>>(_InSameScc(?n1,?n2)).

_CanReachBypassing(?from, ?to, ?bypass) <-
   _DirectAssign(?to, ?from),
   Var:DeclaringMethod(?from, ?method),
   Var:DeclaringMethod(?bypass, ?method),
   ?to != ?bypass.

_CanReachBypassing(?from, ?to, ?bypass) <-
   _CanReachBypassing(?from, ?interm, ?bypass),
   _DirectAssign(?to, ?interm),
   ?to != ?bypass.

_OutsideReachableBypassing(?from, ?to, ?bypass) <-
   _CanReachBypassing(?from, ?to, ?bypass),
   !_InSameScc(?from, ?to).

// A var is a copy of another, in a different SCC, i.e., higher up the DAG.
_FlowFromHigherVar(?from, ?to) <-
   _TransitiveCopy(?from, ?to), !_InSameScc(?from, ?to).

// A var in a top-level SCC
_SCCRoot(?var) <- Var(?var), !_FlowFromHigherVar(_, ?var).

// Nobody can be higher up the DAG or in an independent branch (after SCC 
// decomposition) and reach the dominated node without going through the dominator.
// Note we add here the requirement that the root is different from the no-bypass
// node.
_SCCRootReachableBypassing(?from, ?to, ?bypass) <-
   _SCCRoot(?from),
   _OutsideReachableBypassing(?from, ?to, ?bypass),
   ?from != ?bypass.

_Dominates(?domVar, ?subVar) <-
   _FlowFromHigherVar(?domVar, ?subVar),
   !(_SCCRootReachableBypassing(_, ?subVar, ?domVar)).  

Copy(?var) <- SCCRepresentativeOf[?var] = ?nocopyVar, ?var != ?nocopyVar.
Copy(?subVar) <- _Dominates(?domVar, ?subVar), ?domVar != ?subVar.
*/


// The code below tried to refine Algorithm B (above). Instead of tracing
// from vars assigned in a single move instruction, also consider multiple move
// instructions that are guaranteed to all yield a subset of the values of
// one specific move instruction. There is no point,
// though, because repeated application of transformations gets the same effect.
// The benefit is small anyway.
// ------------------------------------------
/*
// This version doesn't yet work correctly, but attempts full generality
_TransitiveAssign(?from, ?to) <-
   _OptDirectAssign(?from, ?to).

_TransitiveAssign(?from, ?to) <-
   _TransitiveAssign(?from, ?interm),
   _DirectAssign(?to, ?interm).

_AssignNotSubsumedBy(?to, ?from, ?fromBy) <-
   _OptDirectAssign(?from, ?to), 
   _OptDirectAssign(?fromBy, ?to), 
   ?from != ?fromBy,
   !_TransitiveAssign(?from, ?fromBy).

_AssignDoesntSubsumeAll(?to, ?from) <-
   _OptDirectAssign(?from, ?to),
   _OptDirectAssign(?from2, ?to),
   ?from2 != ?from,
   _AssignNotSubsumedBy(?to, ?from2, ?from).

_DirectCopiesCandidate(?from, ?to) <-
   _DirectAssign(?to, ?from),
   !_AssignDoesntSubsumeAll(?to, ?from).

_DirectCopiesTemp[?to] = m <-
   agg<<m = min(?from)>>(_DirectCopiesCandidate(?from,?to)).

_DirectCopies[?to] = ?from <- _DirectCopiesTemp[?to] = ?from.  

// -------------
// Second version below.
// Only for the case of exactly two assigns to a variable, one
// of which is subsumed by the other.
_TripleAssign(?var) <-
   _DualAssign(?var),  // just for filtering
   _OptDirectAssign(?var2, ?var), 
   _OptDirectAssign(?var3, ?var), 
   _OptDirectAssign(?var4, ?var), 
   ?var2 != ?var3, ?var2 != ?var4, ?var3 != ?var4.

_AssignNotSubsumed(?to, ?from) <-
   _OptDirectAssign(?from, ?to), 
   _OptDirectAssign(?from2, ?to), 
   ?from != ?from2,
   !_DirectAssign(?from, ?from2).

_DirectCopiesCandidate(?from,?to) <-
   _DirectAssign(?to, ?from),
   _DualAssign(?to),
   !_TripleAssign(?to),
   !_AssignNotSubsumed(?to, ?from),
   !_Root(?to).


_DirectCopiesTemp[?to] = m <-
   agg<<m = min(?from)>>(_DirectCopiesCandidate(?from,?to)).

_DirectCopies[?to] = ?from <- _DirectCopiesTemp[?to] = ?from.  
*/
// ------------------------------------------



/*
// EFFORT to mimic Steensgard's insight. Horrible result. Maybe remove casts?
Root(?to) <- 
   ThisVar[_] = ?to ;
   FormalParam[_,_] = ?to;
   AssignHeapAllocation(_, ?to, _).

_OptLoadInstanceField(?to, ?base, ?sig, ?inmethod) <-
   LoadInstanceField(?base, ?sig, ?to, ?inmethod).
_OptLoadStaticField(?to, ?sig, ?inmethod) <-
   LoadStaticField(?sig, ?to, ?inmethod).

// Roots are in a group each. Other vars are grouped together if assigned, 
// transitively. 

// If there is an assignment in *any* direction, the variables are equivalent.
InSameGroup(?from, ?to) <- AssignLocal(?from, ?to, _).

// Same for a cast.
InSameGroup(?from, ?to) <- AssignCast(_, ?from, ?to, _).

// reading or writing to the same field of equivalent objects makes two
// local variables equivalent.
InSameGroup(?var1, ?var2) <-
   _OptLoadInstanceField(?var1, ?base1, ?sig, ?inmethod),
   _OptLoadInstanceField(?var2, ?base2, ?sig, ?inmethod),
   InSameGroup(?base1, ?base2).

InSameGroup(?var1, ?var2) <-
   StoreInstanceField(?var1, ?base1, ?sig, ?inmethod),
   _OptLoadInstanceField(?var2, ?base2, ?sig, ?inmethod),
   InSameGroup(?base1, ?base2).

InSameGroup(?var1, ?var2) <-
   StoreInstanceField(?var1, ?base1, ?sig, ?inmethod),
   StoreInstanceField(?var2, ?base2, ?sig, ?inmethod),
   InSameGroup(?base1, ?base2).

InSameGroup(?var1, ?var2) <-
   _OptLoadStaticField(?var1, ?sig, ?inmethod),
   _OptLoadStaticField(?var2, ?sig, ?inmethod).

InSameGroup(?var1, ?var2) <-
   StoreStaticField(?var1, ?sig, ?inmethod),
   _OptLoadStaticField(?var2, ?sig, ?inmethod).

InSameGroup(?var1, ?var2) <-
   StoreStaticField(?var1, ?sig, ?inmethod),
   StoreStaticField(?var2, ?sig, ?inmethod).

// The equivalence relation is reflexive, symmetric, and transitive.
InSameGroup(?from, ?to) <-
   InSameGroup(?from, ?interm), InSameGroup(?interm, ?to).
InSameGroup(?from, ?to) <- InSameGroup(?to, ?from).
InSameGroup(?var, ?var) <- Var(?var).

GroupRepresentative[?n1] = m <- agg<<m = min(?n2)>>(InSameGroup(?n1,?n2)).

Copies[?varToReplace] = ?replacementVar 
<- 
   GroupRepresentative[?varToReplace] = ?replacementVar,
   ?varToReplace != ?replacementVar.
*/
