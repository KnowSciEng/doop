// For this analysis, every heap context recorded on allocation
// corresponds to the most significant element of the calling
// context of the allocator method.
#define RecordMacro(ctx, value, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContext3FromContext[ctx]] = hctx


// For this analysis the context of a method call corresponds to the
// declaring classes of the receiver object and the receiver object of the
// caller and the call-site.
// Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], invocation, \
						ClassToInstr[Value:DeclaringType[value]]] = calleeCtx

#define AdvancedMergeBasisMacro(callerCtx, invocation, hctx, value) \
  MergeBasis(callerCtx, hctx, invocation, value)

#define CachedMergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  CachedMerge[hctx, invocation, value] = calleeCtx

// For this analysis, static calls use the invocation site and
// the declaring class of the receiver object of the caller as a context.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContext1FromContext[callerCtx], invocation, \
                   		RealContext3FromContext[callerCtx]] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], RealContext2FromContext[callerCtx], ClassToInstr[Value:DeclaringType[value]]] = newCtx

#define MergeStartupMacro(hctx, value, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], ImmutableInvValue[], ClassToInstr[Value:DeclaringType[value]]] = calleeCtx

// This is exactly equivalent to the regular merge logic, but written
// differently. At finalization, we create a new hctx, based on the
// callerCtx, and then use this new hctx as we would in regular Merge.
// The macro below does this, without referring to the new hctx (i.e.,
// using knowledge of how it is created). This is necessary because since
// the new hctx is created in the same rule, it will not yet have values
// for its inverse functions (RealHContextFromHContext), so the rule will never
// fire if done naively. The signature of the macro (which does not accept a
// hctx) is a hint for avoiding this problem.
#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContext1FromContext[callerCtx], RealContext2FromContext[callerCtx], ClassToInstr[Value:DeclaringType[value]]] = newCtx


#define InitContextMacro(valueId) \
  Context(ctx), ContextFromRealContext[value1, invo, value2] = ctx \
  <- ClassTypeValue(class1, "java.lang.String"), ClassToInstr[class1] = value1, \
  MethodInvocationValue(invo, valueId), Instruction:Id(value2, valueId)

#define InitHContextMacro(valueId) \
  HContext(hctx), HContextFromRealHContext[value] = hctx \
  <- Instruction:Id(value:valueId)
