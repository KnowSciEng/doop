//----------------------------------------------------------------------
// [Flow-insensitive Schema Layer]
//
// The following section contains a slightly modified schema that
// hides the underlying instruction entities, which are irrelevant to
// flow-insensitive analyses.
//
// The basic pattern is that, for each instruction entity, we
// introduce another predicate that joins all of its properties
// (encoded as functional predicates) but does not contain the
// instruction itself.
//
// Note that this pattern applies only to a subset of instructions
// that is important for flow-insensitive analysis.
//----------------------------------------------------------------------

Throw(?insn, ?var) ->
   Throw:Insn(?insn), Var(?var).


// Fields (OPT inmethod last)
LoadInstanceField(?base, ?sig, ?to, ?inmethod) ->
   MethodSignature(?inmethod),
   Var(?base),
   FieldSignature(?sig),
   Var(?to).

LoadStaticField(?sig, ?to, ?inmethod) ->
   MethodSignature(?inmethod),
   FieldSignature(?sig),
   Var(?to).

StoreInstanceField(?from, ?base, ?signature, ?inmethod) ->
   MethodSignature(?inmethod),
   Var(?from),
   Var(?base),
   FieldSignature(?signature).

StoreStaticField(?from, ?signature, ?inmethod) ->
   MethodSignature(?inmethod),
   Var(?from),
   FieldSignature(?signature).


// Arrays
LoadArrayIndex(?base, ?to, ?inmethod) ->
   MethodSignature(?inmethod),
   Var(?base),
   Var(?to).

StoreArrayIndex(?from, ?base, ?inmethod) ->
   MethodSignature(?inmethod),
   Var(?from),
   Var(?base).


// Assignments
AssignCast(?type, ?from, ?to, ?inmethod) ->
   MethodSignature(?inmethod),
   Var(?from),
   Var(?to),
   Type(?type).

AssignLocal(?from, ?to, ?inmethod) ->
   MethodSignature(?inmethod),
   Var(?from),
   Var(?to).

AssignNull(?to, ?inmethod) ->
   MethodSignature(?inmethod), Var(?to).

AssignHeapAllocation(?heap, ?to, ?inmethod) ->
   HeapAllocation(?heap),
   MethodSignature(?inmethod),
   Var(?to).


// Return (Note: a Jimple method can have multiple return variables)
ReturnVar(?var, ?method) ->
   MethodSignature(?method),
   Var(?var).


// Method Invocations
VirtualMethodInvocation(?invocation, ?signature, ?inmethod) ->
   MethodInvocation(?invocation),
   MethodSignature(?signature),
   MethodSignature(?inmethod).

StaticMethodInvocation(?invocation, ?signature, ?inmethod) ->
   MethodInvocation(?invocation),
   MethodSignature(?signature),
   MethodSignature(?inmethod).


/***********************************************************************
 *
 * Reflection
 *
 ***********************************************************************/

ReifiedClass[?type] = ?heap ->
  ClassConstant(?heap),
  Type(?type).

ReifiedConstructor[?constructor] = ?heap ->
  HeapAllocation(?heap),
  MethodSignature(?constructor).

ReifiedMethod[?method] = ?heap ->
  HeapAllocation(?heap),
  MethodSignature(?method).

ReifiedField[?field] = ?heap ->
  HeapAllocation(?heap),
  FieldSignature(?field).


/**
 * Types potentially returned by a specific Class.forName invocation.
 */
Config:DynamicClass(?class, ?invocation) ->
  Type(?class),
  MethodInvocation(?invocation).

ReflectiveHeap(?heap) -> HeapAllocation(?heap).
ReflectiveHeapAllocation[?instruction, ?type] = ?heap ->
  HeapAllocation(?heap),
  Type(?type),
  Instruction(?instruction).

// Special objects to signify unknown results of reflective calls.
SpecialMissingForNameHeap[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingNewInstanceHeap[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingGetConstructorHeap[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingGetMethodHeap[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingGetMethodsHeap[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingInvokeHeapFromGetMethod[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingInvokeHeapFromGetMethods[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingGetFieldHeap[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingGetFieldsHeap[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingGetHeapFromGetField[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

SpecialMissingGetHeapFromGetFields[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

UnknownReflectiveObject[?class, ?invocation] = ?heap ->
  HeapAllocation(?heap),
  Type(?class),
  MethodInvocation(?invocation).

MarkerReflectiveObject[?invocation] = ?heap ->
  HeapAllocation(?heap),
  MethodInvocation(?invocation).

/**
 * Reflective operations
 */
java:lang:Object:getClass(?to, ?from) ->
  Var(?to), Var(?from).

java:lang:Class:forName(?invocation, ?inmethod) ->
  MethodInvocation(?invocation),
  MethodSignature(?inmethod).

java:lang:Class:getName(?to, ?from) ->
  Var(?to), Var(?from).

java:lang:Class:getComponentType(?to, ?from) ->
  Var(?to), Var(?from).

java:lang:Class:getSuperclass(?to, ?from) ->
  Var(?to), Var(?from).

java:lang:Class:getInterfaces(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:Class:getMethods(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:Class:getMethod(?to, ?param, ?from) ->
  Var(?to), Var(?param), Var(?from).

java:lang:Class:getDeclaredMethods(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:Class:getDeclaredMethod(?to, ?param, ?from) ->
  Var(?to), Var(?param), Var(?from).

java:lang:Class:getConstructors(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:Class:getConstructor(?to, ?from) ->
  Var(?to), Var(?from).

java:lang:Class:getDeclaredConstructors(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:Class:getDeclaredConstructor(?to, ?from) ->
  Var(?to), Var(?from).

java:lang:Class:getFields(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:Class:getField(?to, ?param, ?from) ->
  Var(?to), Var(?param), Var(?from).

java:lang:Class:getDeclaredFields(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:Class:getDeclaredField(?to, ?param, ?from) ->
  Var(?to), Var(?param), Var(?from).

java:lang:Class:newInstance(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:reflect:Array:newInstance(?invocation, ?to, ?param) ->
  MethodInvocation(?invocation), Var(?to), Var(?param).

java:lang:reflect:Constructor:newInstance(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:reflect:Field:get(?invocation, ?to, ?field) ->
  MethodInvocation(?invocation), Var(?to), Var(?field).

java:lang:reflect:Field:get:base[?invocation] = ?base ->
  MethodInvocation(?invocation), Var(?base).

java:lang:reflect:Field:set(?invocation, ?from, ?field) ->
  MethodInvocation(?invocation), Var(?from), Var(?field).

java:lang:reflect:Field:set:base[?invocation] = ?base ->
  MethodInvocation(?invocation), Var(?base).

java:lang:reflect:Method:invoke(?invocation, ?method) ->
  MethodInvocation(?invocation), Var(?method).


java:lang:Class:getClassLoader(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

java:lang:ClassLoader:getResource(?invocation, ?to, ?from) ->
  MethodInvocation(?invocation), Var(?to), Var(?from).

TempDelta(?invocation, ?classType, ?heapType, ?heapStr) ->
  MethodInvocation(?invocation), Type(?classType), Type(?heapType), string(?heapStr).


MainMethodArgsArray(?argsArray) -> HeapAllocation(?argsArray).

MainMethodArgHeap(?argHeap) -> HeapAllocation(?argHeap).

/**
 * Predicates to store runtime metrics and statistics
 */
Stats:Runtime(?attr, ?value) -> string(?attr), decimal[64](?value).
Stats:Metrics(?attr, ?value) -> string(?attr), uint[64](?value).
