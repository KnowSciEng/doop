#include "class-initialization-declarations.logic"
#include "exceptions-declarations.logic"
#include "implicit-reachable-declarations.logic"
#include "string-constants-declarations.logic"
#include "threads-declarations.logic"

#if defined(REFLECTION)
#include "reflection/declarations.logic" 
#endif

FakeInvocation:RegisterFinalize0[?heap] = ?invo ->
   HeapAllocation(?heap), MethodInvocation(?invo).
FakeInvocation:RegisterFinalize[?value] = ?invo ->
   Value(?value), MethodInvocation(?invo).

//-----------------------------------------------------------------------------
// [Value - artificially created]
//-----------------------------------------------------------------------------

Value(?value) -> .
lang:entity(`Value).
lang:physical:storageModel[`Value] = "ScalableSparse".
lang:physical:capacity[`Value] = 4194304.

Value:Heap:Cons[?heap] = ?value -> HeapAllocation(?heap), Value(?value).
Value:Num:Cons[?const] = ?value -> NumConstant(?const), Value(?value).
Value:Mock:Cons[?id]   = ?value -> string(?id), Value(?value).

lang:constructor(`Value:Heap:Cons).
lang:constructor(`Value:Num:Cons).
lang:constructor(`Value:Mock:Cons).

Value:Heap[?value] = ?heap -> Value(?value), HeapAllocation(?heap).
Value:byHeap[?heap] = ?value -> HeapAllocation(?heap), Value(?value).

Value:Num[?value] = ?const -> Value(?value), NumConstant(?const).
Value:byNum[?const] = ?value -> NumConstant(?const), Value(?value).

Value:Id[?value] = ?id -> Value(?value), string(?id).
Value:byId[?id] = ?value -> string(?id), Value(?value).

Value:isHeap(?value) -> Value(?value).
Value:isNonHeap(?value) -> Value(?value).

Value:Type[?value] = ?type -> Value(?value), Type(?type).
Value:DeclaringType[?value] = ?type -> Value(?value), Type(?type).

// [Miscellaneous]
Value:Null[] = ?null -> Value(?null).

//-----------------------------------------------------------------------------
// [Proxy classes and methods - artificially created]
//-----------------------------------------------------------------------------

ProxyClass(?t) -> ClassType(?t).
lang:entity(`ProxyClass).
lang:physical:capacity[`ProxyClass] = 131072.

// Special information for proxied interfaces. Encodes that in the original code we had:
//   <?result> = Proxy.newProxyInstance(classLoader, <?interfaces>, <?handler>);
// and we generate:
//   Constructor <?constr>; // to be populated by other rules
//   <?cArgs> = new Object[] {<?handler>};
//   <?result> = <?constr>.newInstance(<?cArgs>);

DynamicProxy(?originalInvo, ?newInstance, ?constr, ?cArgs, ?interfaces, ?handler, ?result) ->
   MethodInvocation(?originalInvo), MethodInvocation(?newInstance),
   Var(?constr), Var(?cArgs), Var(?interfaces), Var(?handler), Var(?result).

// Special information for proxied methods. For every proxy class,
// each method ?proxied (calling some ?original method) contains a
// special variable ?mVar that points to its reified representation of
// type Method. The method also contains an ?invoke instruction that
// calls ?original via Method.invoke().
ProxyMethod(?proxied, ?original, ?mVar, ?argsVar, ?argsNewId, ?invoke) ->
   Method(?proxied), Method(?original), Var(?mVar), Var(?argsVar),
   string(?argsNewId), StaticMethodInvocation:Insn(?invoke).
