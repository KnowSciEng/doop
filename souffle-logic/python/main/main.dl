  //-----------------------------------------------------------------------------
  // [Value]
  //-----------------------------------------------------------------------------

  .type NumConstantValue

  .type BoolConstantValue

  //.type NoneConstantValue

  .type Value = HeapAllocation | NumConstantValue | BoolConstantValue | Function | Module

  //.decl isValue(?value:Value)

  //.decl Value_isHeap(?value:Value)

  // Value_Num maps each numeric constant to a value while
  // also prepending it with *num-constant-* to distinguish it
  // from heap allocations that share the same string value.
  .decl Value_Num(?value:NumConstantValue, ?const:NumConstant)

  //.decl Value_isNonHeap(?value:Value)

  //.decl Value_Type(?value:Value, ?type:Type)
  //.decl Value_DeclaringType(?value:Value, ?type:Type)

  // [Miscellaneous]
  //.decl Value_None(?none:Value)



  .output VarPointsTo
  .decl VarPointsTo(?var:Var, ?val:Value)

  .output LexicalAccessInsn_VarName
  .output LexicalAccessInsn_VarScope
  .output isLexicalRead_Insn
  .output isLexicalWrite_Insn

  VarPointsTo(?var, ?val):-
    isLexicalRead_Insn(?insn),
    AssignInstruction_To(?insn, ?var),
    LexicalAccessInsn_VarName(?insn, ?name),
    LexicalAccessInsn_VarScope(?insn, ?scope),
    isLexicalWrite_Insn(?writeInstr),
    LexicalAccessInsn_VarName(?writeInstr, ?name),
    LexicalAccessInsn_VarScope(?writeInstr, ?scope),
    LexicalWriteInsn_From(?writeInstr, ?from),
    VarPointsTo(?from, ?val).

