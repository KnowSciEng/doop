isModule("<tensorflow>").

//------------------------------------------------------
//                    TENSOR DATA TYPES
//------------------------------------------------------

.type TensorDataType = ClassType

.decl isTensorDataType(?type: TensorDataType)
ModeledClass("<tensorflow.float16>", "float16", "<tensorflow>").
isTensorDataType("<tensorflow.float16>").
ModeledClass("<tensorflow.float32>", "float32", "<tensorflow>").
isTensorDataType("<tensorflow.float32>").
ModeledClass("<tensorflow.float64>", "float64", "<tensorflow>").
isTensorDataType("<tensorflow.float64>").
ModeledClass("<tensorflow.bfloat16>", "bfloat16", "<tensorflow>").
isTensorDataType("<tensorflow.bfloat16>").
ModeledClass("<tensorflow.complex64>", "complex64", "<tensorflow>").
isTensorDataType("<tensorflow.complex64>").
ModeledClass("<tensorflow.complex128>", "complex128", "<tensorflow>").
isTensorDataType("<tensorflow.complex128>").
ModeledClass("<tensorflow.int8>", "int8", "<tensorflow>").
isTensorDataType("<tensorflow.int8>").
ModeledClass("<tensorflow.uint8>", "uint8", "<tensorflow>").
isTensorDataType("<tensorflow.uint8>").
ModeledClass("<tensorflow.uint16>", "uint16", "<tensorflow>").
isTensorDataType("<tensorflow.uint16>").
ModeledClass("<tensorflow.uint32>", "uint32", "<tensorflow>").
isTensorDataType("<tensorflow.uint32>").
ModeledClass("<tensorflow.uint64>", "uint64", "<tensorflow>").
isTensorDataType("<tensorflow.uint64>").
ModeledClass("<tensorflow.int16>", "int16", "<tensorflow>").
isTensorDataType("<tensorflow.int16>").
ModeledClass("<tensorflow.int32>", "int32", "<tensorflow>").
isTensorDataType("<tensorflow.int32>").
ModeledClass("<tensorflow.int64>", "int64", "<tensorflow>").
isTensorDataType("<tensorflow.int64>").
ModeledClass("<tensorflow.bool>", "bool", "<tensorflow>").
isTensorDataType("<tensorflow.bool>").
ModeledClass("<tensorflow.string>", "string", "<tensorflow>").
isTensorDataType("<tensorflow.string>").
ModeledClass("<tensorflow.qint8>", "qint8", "<tensorflow>").
isTensorDataType("<tensorflow.qint8>").
ModeledClass("<tensorflow.quint8>", "quint8", "<tensorflow>").
isTensorDataType("<tensorflow.quint8>").
ModeledClass("<tensorflow.qint16>", "qint16", "<tensorflow>").
isTensorDataType("<tensorflow.qint16>").
ModeledClass("<tensorflow.quint16>", "quint16", "<tensorflow>").
isTensorDataType("<tensorflow.quint16>").
ModeledClass("<tensorflow.qint32>", "qint32", "<tensorflow>").
isTensorDataType("<tensorflow.qint32>").
ModeledClass("<tensorflow.resource>", "resource", "<tensorflow>").
isTensorDataType("<tensorflow.resource>").
ModeledClass("<tensorflow.variant>", "variant", "<tensorflow>").
isTensorDataType("<tensorflow.variant>").

.decl TensorShapeListSize(?val:Value, ?size:number)
.decl TensorShapeListContent(?val:Value, ?index:number, ?indexValue:Value)
.output TensorShapeListSize
.output TensorShapeListContent

ModeledClass("<tensorflow.Tensor>", "Tensor", "<tensorflow>").

ModeledModule("<tensorflow.layers>", "layers", "<tensorflow>").
ModeledModule("<tensorflow.nn>", "nn", "<tensorflow>").

ModeledFunction("<tensorflow.reshape>", "reshape", "<tensorflow>").
FormalParam( 0, "tensor", "<tensorflow.reshape>", "<tensorflow.reshape>/mockParam1").
FormalParam( 1, "shape", "<tensorflow.reshape>",  "<tensorflow.reshape>/mockParam2").
FormalParam( 2, "name", "<tensorflow.reshape>",   "<tensorflow.reshape>/mockParam3").

ModeledFunction("<tensorflow.constant>", "constant", "<tensorflow>").


ModeledFunction("<tensorflow.placeholder>", "placeholder", "<tensorflow>").
FormalParam( 0, "dtype", "<tensorflow.placeholder>", "<tensorflow.placeholder>/mockParam1").
FormalParam( 1, "shape", "<tensorflow.placeholder>", "<tensorflow.placeholder>/mockParam2").
FormalParam( 2, "name", "<tensorflow.placeholder>",  "<tensorflow.placeholder>/mockParam3").

ModeledFunction("<tensorflow.layers.conv2d>", "conv2d", "<tensorflow.layers>").
FormalParam( 0, "inputs", "<tensorflow.layers.conv2d>", "<tensorflow.layers.conv2d>/mockParam1").
FormalParam( 1, "filters", "<tensorflow.layers.conv2d>", "<tensorflow.layers.conv2d>/mockParam2").
FormalParam( 2, "kernel_size", "<tensorflow.layers.conv2d>",  "<tensorflow.layers.conv2d>/mockParam3").
FormalParam( 3, "strides", "<tensorflow.layers.conv2d>",  "<tensorflow.layers.conv2d>/mockParam4").
FormalParam( 4, "padding", "<tensorflow.layers.conv2d>",  "<tensorflow.layers.conv2d>/mockParam5").
FormalParam( 5, "data_format", "<tensorflow.layers.conv2d>",  "<tensorflow.layers.conv2d>/mockParam6").
FormalParam( 6, "dilation_rate", "<tensorflow.layers.conv2d>",  "<tensorflow.layers.conv2d>/mockParam7").

isListOfIntConsts("<tensorflow.layers>/new list/0").
ConstListDimensions("<tensorflow.layers>/new list/0",2).
ConstListContents("<tensorflow.layers>/new list/0", 0, "<num-constant(int):1>").
ConstListContents("<tensorflow.layers>/new list/0", 1, "<num-constant(int):1>").

FormalParam_DefaultValFrom("<tensorflow.layers.conv2d>", "strides", "<tensorflow.layers>/stridesDefValVar").
VarPointsTo("<tensorflow.layers>/stridesDefValVar", "<tensorflow.layers>/new list/0").
VarPointsToList("<tensorflow.layers>/stridesDefValVar", "<tensorflow.layers>/new list/0").

FormalParam_DefaultValFrom("<tensorflow.layers.conv2d>", "dilation_rate", "<tensorflow.layers>/dilationRateDefValVar").
VarPointsTo("<tensorflow.layers>/dilationRateDefValVar", "<tensorflow.layers>/new list/0").
VarPointsToList("<tensorflow.layers>/dilationRateDefValVar", "<tensorflow.layers>/new list/0").

FormalParam_DefaultValFrom("<tensorflow.layers.conv2d>", "data_format", "<tensorflow.layers>/dataFormatDefValVar").
VarPointsTo("<tensorflow.layers>/dataFormatDefValVar", "<string constant:channels_last>").
Value_String("<string constant:channels_last>" ,"channels_last").

FormalParam_DefaultValFrom("<tensorflow.layers.conv2d>", "padding", "<tensorflow.layers>/paddingDefValVar").
VarPointsTo("<tensorflow.layers>/paddingDefValVar", "<string constant:valid>").
Value_String("<string constant:valid>" ,"valid").


.decl TensorHasConcreteDimensions(?tensorVal:Value)
.output TensorHasConcreteDimensions

//------------------------------------------------------
//                    PLACEHOLDER INVOC
//------------------------------------------------------

#define TensorValueMacro(op,fun,val1, val2) cat("<tensor ", cat(fun, cat("/", cat(op, cat(val1, cat("+", cat(val2,">")))))))

.decl isValidTensorPlaceHolderInvocation(?insn:FunctionInvocation_Insn, ?typeArgVal:Value, ?dimListVal:Value)
.output isValidTensorPlaceHolderInvocation

isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal):-
  FunctionInvResolvesTo(?insn, ?baseVal, "<tensorflow.placeholder>"),
  ResolvedActualParams(?insn, ?baseVal, 0, "dtype", ?typeVal),
  HeapAllocation_Type(?typeVal, ?typeValType),
  isTensorDataType(?typeValType),
  ResolvedActualParams(?insn, ?baseVal, 1, "shape", ?dimListVal),
  isListOfConsts(?dimListVal),
  PyConstListSpecialValueCount(?dimListVal, "<None>", ?specialValueCount),
  ?specialValueCount < 2.

TensorShapeListSize(?tensorVal, ?size),
TensorShapeListContent(?tensorVal, ?index, ?indexValue):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  Instruction_Function(?insn, ?function),
  AssignInstruction_To(?insn, ?tensorAssignVar),
  ?tensorVal = TensorValueMacro("placeholder",?function, ?typeVal, ?dimListVal),
  VarPointsTo(?tensorAssignVar, ?tensorVal),
  VarPointsToList(?dimListVar, ?dimListVal),
  ConstListDimensions(?dimListVal, ?size),
  ConstListContents(?dimListVal, ?index, ?indexValue).


ConstListDimensions(?tensorVal, ?size),
ConstListContents(?tensorVal, ?index, ?indexValue):-
  TensorShapeListSize(?tensorVal, ?size),
  TensorShapeListContent(?tensorVal, ?index, ?indexValue).

VarPointsTo(?var, ?value),
Value_Type(?value, "<tensorflow.Tensor>"):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  AssignInstruction_To(?insn, ?var),
  Instruction_Function(?insn, ?function),
  ?value = TensorValueMacro("placeholder",?function, ?typeVal, ?dimListVal).

TensorHasConcreteDimensions(?tensorVal):-
  isValidTensorPlaceHolderInvocation(?insn, ?typeVal, ?dimListVal),
  Instruction_Function(?insn, ?function),
  AssignInstruction_To(?insn, ?tensorAssignVar),
  ?tensorVal = TensorValueMacro("placeholder",?function, ?typeVal, ?dimListVal),
  VarPointsTo(?tensorAssignVar, ?tensorVal),
  isListOfIntConsts(?dimListVal).

//------------------------------------------------------
//              RESHAPE OP
//------------------------------------------------------

.decl TensorReshapeInvocationProducesOutput_Value(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value, ?outputVal:Value)
.output TensorReshapeInvocationProducesOutput_Value

.decl TensorReshapeInvocationProducesOutput(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output TensorReshapeInvocationProducesOutput

.decl isValidTensorReshapeInvocationClass1(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationClass1

.decl isValidTensorReshapeInvocationClass2(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationClass2

.decl isPossibleMisalignedTensorReshapeInvocation(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isPossibleMisalignedTensorReshapeInvocation

.decl isInvalidTensorReshapeInvocation(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isInvalidTensorReshapeInvocation

.decl isValidTensorReshapeInvocationLevel1(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationLevel1

.decl isValidTensorReshapeInvocationLevel2(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isValidTensorReshapeInvocationLevel2

.decl isNotValidTensorReshapeInvocationLevel2(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value)
.output isNotValidTensorReshapeInvocationLevel2

.decl ValidTensorReshape_ReplaceMinus1WithVal(?insn:FunctionInvocation_Insn, ?tensorArgVal:Value, ?dimListArgVal:Value, ?replaceVal:Value)
.output ValidTensorReshape_ReplaceMinus1WithVal



//Checks if the required args are given and their values have correct values
isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal):-
  FunctionInvResolvesTo(?insn, ?baseVal, "<tensorflow.reshape>"),
  ResolvedActualParams(?insn, ?baseVal, 0, "tensor", ?tensorArgVal),
  Value_Type(?tensorArgVal, "<tensorflow.Tensor>"),
  ResolvedActualParams(?insn, ?baseVal, 1, "shape", ?dimListArgVal),
  isListOfConsts(?dimListArgVal),
  PyConstListSpecialValueCount(?dimListArgVal, "<num-constant(int):-1>", ?specialValueCount),
  ?specialValueCount < 2.

// Checks if, for the two list arguments --the shape list of the tensor value, and the reshape shape list--
// the multiplication of all the elements(excluding -1 and None) has the same results
isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListMultAll(?tensorArgVal,?tensorRes),
  ConstListMultAll(?dimListArgVal,?dimListRes),
  ?tensorRes = ?dimListRes.

// The opposite of the previous rule
isNotValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListMultAll(?tensorArgVal,?tensorRes),
  ConstListMultAll(?dimListArgVal,?dimListRes),
  ?tensorRes != ?dimListRes.

//All the input tensors dims are known
//The shape of the dimension list does not contain -1
TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isValidTensorReshapeInvocationClass2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  TensorHasConcreteDimensions(?tensorArgVal),
  PyConstListSpecialValueCount(?dimListArgVal, "<num-constant(int):-1>", 0).

//All the input tensors dims are known
//The shape of the dimension list contains -1  but it is 1
ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, "<num-constant(int):1>"),
TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isValidTensorReshapeInvocationClass2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  TensorHasConcreteDimensions(?tensorArgVal),
  PyConstListSpecialValueCount(?dimListArgVal, "<num-constant(int):-1>", 1).

//All the input tensors dims are known
//MAYBE GENERALISE THIS TO COVER THE ABOVE CASE AS WELL
isIntConstant(?replaceNumStr),
Value_Num(?replaceNumVal, ?replaceNumStr),
ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, ?replaceNumVal),
TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isValidTensorReshapeInvocationClass2(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isNotValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListContents(?dimListArgVal, _, "<num-constant(int):-1>"),
  TensorHasConcreteDimensions(?tensorArgVal),
  ConstListMultAll(?tensorArgVal,?tensorMultRes),
  ConstListMultAll(?dimListArgVal,?dimListMultRes),
  ?tensorMultRes % ?dimListMultRes = 0,
  ?replaceNumStr = to_string(?tensorMultRes / ?dimListMultRes),
  ?replaceNumVal = cat("<num-constant(int):",cat(?replaceNumStr,">")).

isInvalidTensorReshapeInvocation(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isNotValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListContents(?dimListArgVal, _, "<num-constant(int):-1>"),
  TensorHasConcreteDimensions(?tensorArgVal),
  ConstListMultAll(?tensorArgVal,?tensorMultRes),
  ConstListMultAll(?dimListArgVal,?dimListMultRes),
  ?tensorMultRes % ?dimListMultRes != 0.

//RECHECK THIS!
isInvalidTensorReshapeInvocation(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isNotValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  TensorHasConcreteDimensions(?tensorArgVal),
  PyConstListSpecialValueCount(?dimListArgVal, "<num-constant(int):-1>", 0).




ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, "<None>"),
TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isValidTensorReshapeInvocationClass1(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListContents(?tensorArgVal, ?pos, "<None>"),
  ConstListContents(?dimListArgVal, ?pos, "<num-constant(int):-1>").

ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, "<None>"),
TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
isPossibleMisalignedTensorReshapeInvocation(?insn, ?tensorArgVal, ?dimListArgVal):-
  isValidTensorReshapeInvocationLevel1(?insn, ?tensorArgVal, ?dimListArgVal),
  isValidTensorReshapeInvocationLevel2(?insn, ?tensorArgVal, ?dimListArgVal),
  ConstListContents(?tensorArgVal, ?pos1, "<None>"),
  ConstListContents(?dimListArgVal, ?pos2, "<num-constant(int):-1>"),
  ?pos1 != ?pos2.

TensorShapeListSize(?outVal, ?size),
TensorShapeListContent(?outVal, ?index, ?indexValue):-
  TensorReshapeInvocationProducesOutput_Value(?insn, ?tensorArgVal, ?dimListArgVal, ?outVal),
  ConstListDimensions(?dimListArgVal, ?size),
  ConstListContents(?dimListArgVal, ?index, ?indexValue),
  ?indexValue != "<num-constant(int):-1>".

TensorShapeListSize(?outVal, ?size),
TensorShapeListContent(?outVal, ?index, ?newValue):-
  TensorReshapeInvocationProducesOutput_Value(?insn, ?tensorArgVal, ?dimListArgVal, ?outVal),
  ConstListDimensions(?dimListArgVal, ?size),
  ConstListContents(?dimListArgVal, ?index, "<num-constant(int):-1>"),
  ValidTensorReshape_ReplaceMinus1WithVal(?insn, ?tensorArgVal, ?dimListArgVal, ?newValue).

TensorReshapeInvocationProducesOutput_Value(?insn, ?tensorArgVal, ?dimListArgVal, ?outVal):-
  TensorReshapeInvocationProducesOutput(?insn, ?tensorArgVal, ?dimListArgVal),
  Instruction_Function(?insn, ?function),
  ?outVal = TensorValueMacro("reshape",?function, ?tensorArgVal, ?dimListArgVal).


VarPointsTo(?var, ?outVal),
Value_Type(?outVal, "<tensorflow.Tensor>"):-
  TensorReshapeInvocationProducesOutput_Value(?insn, ?tensorArgVal, ?dimListArgVal, ?outVal),
  AssignInstruction_To(?insn, ?var).

TensorHasConcreteDimensions(?outVal),
VarPointsTo(?var, ?outVal),
Value_Type(?outVal, "<tensorflow.Tensor>"):-
  isValidTensorReshapeInvocationClass2(?insn, ?tensorArgVal, ?dimListArgVal),
  TensorReshapeInvocationProducesOutput_Value(?insn, ?tensorArgVal, ?dimListArgVal, ?outVal),
  AssignInstruction_To(?insn, ?var),
  TensorHasConcreteDimensions(?tensorArgVal).


//------------------------------------------------------
//              CONVOLUTION LAYER OP
//------------------------------------------------------

#define LayersConvValue(op,fun,val1, val2, val3, val4, val5, val6) cat("<tensor ", cat(fun, cat("/", cat(op, cat(val1, cat("+", cat(val2, cat("+", cat(val3, cat("+", cat(val4, cat("+", cat(val5, cat("+", cat(val6,">")))))))))))))))

.decl ConvOperation(?insn:FunctionInvocation_Insn, ?baseVal:Value, ?newVal:Value)
.output ConvOperation

.decl ConvOperation_ProducesOutput(?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_ProducesOutput

.decl ConvOperation_AllDimsCanBeComputed(?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_AllDimsCanBeComputed

.decl ConvOperation_NumOfDims(?insn:FunctionInvocation_Insn, ?newVal:Value, ?ndims:number)
.output ConvOperation_NumOfDims

.decl ConvOperation_ChannelsLast(?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_ChannelsLast

.decl ConvOperation_DimResult(?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?dimRes:Value)
.output ConvOperation_DimResult

.decl ConvOperation_StridesForDim(?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?strideValForDim:Value)
.output ConvOperation_StridesForDim

.decl ConvOperation_KernelSizeForDim(?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?kernelSizeValForDim:Value)
.output ConvOperation_KernelSizeForDim

.decl ConvOperation_DillationRateForDim(?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?dillationRateValForDim:Value)
.output ConvOperation_DillationRateForDim

.decl ConvOperation_NameToVal(?insn:FunctionInvocation_Insn, ?newVal:Value, ?name:symbol, ?valForName:Value)
.output ConvOperation_NameToVal

ConvOperation_NameToVal(?insn, ?newVal, "inputs", ?inputsTensorArgVal),
ConvOperation_NameToVal(?insn, ?newVal, "filters", ?filtersArgVal),
ConvOperation_NameToVal(?insn, ?newVal, "kernel_size", ?kernelSizeArgVal),
ConvOperation_NameToVal(?insn, ?newVal, "strides", ?stridesArgVal),
ConvOperation_NameToVal(?insn, ?newVal, "data_format", ?dataFormatArgVal),
ConvOperation_NameToVal(?insn, ?newVal, "dilation_rate", ?dilationRateArgVal),
ConvOperation_NumOfDims(?insn, ?newVal, 2),
ConvOperation(?insn, ?baseVal, ?newVal):-
  FunctionInvResolvesTo(?insn, ?baseVal, "<tensorflow.layers.conv2d>"),
  ResolvedActualParams(?insn, ?baseVal, 0, "inputs", ?inputsTensorArgVal),
  ResolvedActualParams(?insn, ?baseVal, 1, "filters", ?filtersArgVal),
  ResolvedActualParams(?insn, ?baseVal, 2, "kernel_size", ?kernelSizeArgVal),
  ResolvedActualParams(?insn, ?baseVal, 3, "strides", ?stridesArgVal),
  ResolvedActualParams(?insn, ?baseVal, 5, "data_format", ?dataFormatArgVal),
  ResolvedActualParams(?insn, ?baseVal, 6, "dilation_rate", ?dilationRateArgVal),
  Instruction_Function(?insn, ?function),
  ?newVal = LayersConvValue("conv2d", ?function, ?inputsTensorArgVal, ?filtersArgVal, ?kernelSizeArgVal, ?stridesArgVal, ?dataFormatArgVal, ?dilationRateArgVal).

.decl PossibleDimNumber(?dim: number)
PossibleDimNumber(1).
PossibleDimNumber(2).
PossibleDimNumber(3).

ConvOperation_StridesForDim(?insn, ?newVal, ?dim, ?strideValForDim):-
  ConvOperation_NumOfDims(?insn, ?newVal, ?numOfDims),
  ?dim <= ?numOfDims,
  PossibleDimNumber(?dim),
  ConvOperation_NameToVal(?insn, ?newVal, "strides", ?stridesArgVal),
  (
    (
        isListOfIntConsts(?stridesArgVal),
        ConstListContents(?stridesArgVal, ?dim - 1, ?strideValForDim),
        Value_Num(?strideValForDim, _)
    );
    (
        ?strideValForDim = ?stridesArgVal,
        Value_Num(?strideValForDim, _)
    )
  ).

ConvOperation_KernelSizeForDim(?insn, ?newVal, ?dim, ?kernelSizeValForDim):-
  ConvOperation_NumOfDims(?insn, ?newVal, ?numOfDims),
  ?dim <= ?numOfDims,
  PossibleDimNumber(?dim),
  ConvOperation_NameToVal(?insn, ?newVal, "kernel_size", ?kernelSizeArgVal),
  (
    (
        isListOfIntConsts(?kernelSizeArgVal),
        ConstListContents(?kernelSizeArgVal, ?dim - 1, ?kernelSizeValForDim),
        Value_Num(?kernelSizeValForDim, _)
    );
    (
        ?kernelSizeValForDim = ?kernelSizeArgVal,
        Value_Num(?kernelSizeValForDim, _)
    )
  ).

ConvOperation_DillationRateForDim(?insn, ?newVal, ?dim, ?dillationRateValForDim):-
  ConvOperation_NumOfDims(?insn, ?newVal, ?numOfDims),
  ?dim <= ?numOfDims,
  PossibleDimNumber(?dim),
  ConvOperation_NameToVal(?insn, ?newVal, "dilation_rate", ?dilationRateArgVal),
  (
    (
        isListOfIntConsts(?dilationRateArgVal),
        ConstListContents(?dilationRateArgVal, ?dim - 1, ?dillationRateValForDim),
        Value_Num(?dillationRateValForDim, _)
    );
    (
        ?dillationRateValForDim = ?dilationRateArgVal,
        Value_Num(?dillationRateValForDim, _)
    )
  ).

ConvOperation_ChannelsLast(?insn, ?newVal):-
    ConvOperation_NameToVal(?insn, ?newVal, "data_format", "channels_last").


Value_Num(?dimRes, ?valNumStr),
ConvOperation_DimResult(?insn, ?newVal, ?dim, ?dimRes):-
  ConvOperation_NumOfDims(?insn, ?newVal, ?numOfDims),
  ?dim <= ?numOfDims,
  PossibleDimNumber(?dim),
  (
    (
      ConvOperation_NameToVal(?insn, ?newVal, "data_format", "<string constant:channels_last>"),
      ?dimPosInTensor = ?dim
    );
    (
      ConvOperation_NameToVal(?insn, ?newVal, "data_format", "<string constant:channels_first>"),
      ?dimPosInTensor = ?dim + 1
    )
  ),
  ConvOperation_NameToVal(?insn, ?newVal, "inputs", ?inputsTensorVal),
  ConstListContents(?inputsTensorVal, ?dimPosInTensor, ?tensorValForDim),
  ConvOperation_KernelSizeForDim(?insn, ?newVal, ?dim, ?kernelSizeValForDim),
  Value_Num(?tensorValForDim, ?tensorValForDimNumStr),
  Value_Num(?kernelSizeValForDim, ?kernelSizeValForDimNumStr),
  ?temp = to_number(?tensorValForDimNumStr) + 1 - to_number(?kernelSizeValForDimNumStr),
  ConvOperation_StridesForDim(?insn, ?newVal, ?dim, ?strideValForDim),
  Value_Num(?strideValForDim, ?strideValForDimNumStr),
  ?stridesNum = to_number(?strideValForDimNumStr),
  ?temp % ?stridesNum = 0,
  ?valNumStr = to_string(?temp / ?stridesNum),
  ?dimRes = cat("<num-constant(int):",cat(?valNumStr, ">")).


ConvOperation_AllDimsCanBeComputed(?insn, ?newVal):-
    ConvOperation_NumOfDims(?insn, ?newVal, ?numOfDims),
    ?numOfDims = 2,
    ConvOperation_DimResult(?insn, ?newVal, 1, _),
    ConvOperation_DimResult(?insn, ?newVal, 2, _).

ConvOperation_AllDimsCanBeComputed(?insn, ?newVal):-
    ConvOperation_NumOfDims(?insn, ?newVal, ?numOfDims),
    ?numOfDims = 3,
    ConvOperation_DimResult(?insn, ?newVal, 1, _),
    ConvOperation_DimResult(?insn, ?newVal, 2, _),
    ConvOperation_DimResult(?insn, ?newVal, 3, _).

VarPointsTo(?var, ?newVal),
Value_Type(?newVal, "<tensorflow.Tensor>"):-
  ConvOperation_ProducesOutput(?insn, ?newVal),
  AssignInstruction_To(?insn, ?var).

ConvOperation_ProducesOutput(?insn, ?newVal):-
  ConvOperation(?insn, _, ?newVal),
  ConvOperation_AllDimsCanBeComputed(?insn, ?newVal).

TensorShapeListSize(?newVal, ?size):-
  ConvOperation_ProducesOutput(?insn, ?newVal),
  ConvOperation_NameToVal(?insn, ?newVal, "inputs", ?inputsTensorVal),
  TensorShapeListSize(?inputsTensorVal, ?size).

TensorShapeListContent(?newVal, ?dimPosInTensor, ?dimValue):-
  ConvOperation_ProducesOutput(?insn, ?newVal),
  ConvOperation_DimResult(?insn, ?newVal, ?dim, ?dimValue),
  (
    (
      ConvOperation_NameToVal(?insn, ?newVal, "data_format", "<string constant:channels_last>"),
      ?dimPosInTensor = ?dim
    );
    (
      ConvOperation_NameToVal(?insn, ?newVal, "data_format", "<string constant:channels_first>"),
      ?dimPosInTensor = ?dim + 1
    )
  ).

TensorShapeListContent(?newVal, 0, ?batchValue):-
  ConvOperation_ProducesOutput(?insn, ?newVal),
  ConvOperation_NameToVal(?insn, ?newVal, "inputs", ?inputsTensorVal),
  TensorShapeListContent(?inputsTensorVal, 0, ?batchValue).

TensorShapeListContent(?newVal, ?channelsPosInTensor, ?filtersArgVal):-
  ConvOperation_ProducesOutput(?insn, ?newVal),
  ConvOperation_DimResult(?insn, ?newVal, ?dim, ?dimValue),
  (
    (
      ConvOperation_NameToVal(?insn, ?newVal, "data_format", "<string constant:channels_last>"),
      TensorShapeListSize(?newVal, ?size),
      ?channelsPosInTensor = ?size - 1
    );
    (
      ConvOperation_NameToVal(?insn, ?newVal, "data_format", "<string constant:channels_first>"),
      ?channelsPosInTensor = 1
    )
  ),
  ConvOperation_NameToVal(?insn, ?newVal, "filters", ?filtersArgVal).