// For this analysis, every heap context recorded on allocation
// corresponds to the 2 most significant elements of the calling
// context of the allocator method.
// Subtle point: this may need to be created because even though it
// exists as a Context it may not exist as an HContext.
#define RecordMacro(ctx, value, hctx) \
  ctx = [ctxType1, ctxType2, ctxType3], \
  hctx = [ctxType2, ctxType3]


// For this analysis the context of a method call corresponds to the
// declaring classes of the receiver object, the receiver object
// of the caller and so on. Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, value, calleeCtx) \
  hctx = [hctxType1, hctxType2], \
  Value_DeclaringType(value, type), \
  calleeCtx = [hctxType1, hctxType2, type]

// For this analysis, static calls just keep the same context as the
// caller.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  calleeCtx = callerCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, value, callerCtx, newCtx) \
  hctx = [hctxType1, hctxType2], \
  Value_DeclaringType(value, type), \
  newCtx = [hctxType1, hctxType2, type]

#define MergeStartupMacro(hctx, value, calleeCtx) \
  hctx = [hctxType1, hctxType2], \
  Value_DeclaringType(value, type), \
  calleeCtx = [hctxType1, hctxType2, type]

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, value, newCtx) \
  callerCtx = [ctxType1, ctxType2, ctxType3], \
  Value_DeclaringType(value, type), \
  newCtx = [ctxType2, ctxType3, type]


#define InitContextMacro(value) \
  isContext(ctx) :- ctx = [value, value, "java.lang.String"]

#define InitHContextMacro(value) \
  isHContext(hctx) :- hctx = [value, value]
