// This is a temporary hack. See near bottom for a proper definition of
// these predicates. Unfortunately derived predicates don't seem to
// be supported by the join optimizer currently.
#define ObjectShouldNotBeRefined(heap) \
    ((NegativeObjectFilter[] = true, ValueToRefine(heap)); \
    (!NegativeObjectFilter[] = true, !ValueToRefine(heap)))
#define ObjectShouldBeRefined(heap) \
    ((!NegativeObjectFilter[] = true, ValueToRefine(heap)); \
    (NegativeObjectFilter[] = true, !ValueToRefine(heap)))
#define SiteShouldNotBeRefined(invocation) \
    ((!NegativeSiteFilter[] = true, !SiteToRefine(invocation)); \
    (NegativeSiteFilter[] = true, SiteToRefine(invocation)))
#define SiteShouldBeRefined(invocation) \
    ((!NegativeSiteFilter[] = true, SiteToRefine(invocation)); \
    (NegativeSiteFilter[] = true, !SiteToRefine(invocation)))

/**
 * Elegance hacks, using macros: instead of burdening all normal
 * analyses, provide default definitions for the common cases.
 */

#ifndef MULTIPLE_SEGREGATED_ANALYSES
ImmutableContextFromHContext[?hctx] = ?ctx <-
  ImmutableContext(?ctx), HContext(?hctx).

ImmutableHContextFromContext[?ctx] = ?hctx <-
  ImmutableHContext(?hctx), Context(?ctx).

ImmutableContextFromContext[?ctx1] = ?ctx2 <-
  ImmutableContext(?ctx2), Context(?ctx1).

#ifndef CompatibleContextAndHContextMacro
#define CompatibleContextAndHContextMacro(ctx, hctx) ctx = ctx, hctx = hctx
#endif
#ifndef CompatibleHContextsMacro
#define CompatibleHContextsMacro(hctx1, hctx2) hctx1 = hctx1, hctx2 = hctx2
#endif
#endif // MULTIPLE_SEGREGATED_ANALYSES

#include "main.logic"

/**
 * Generic context-sensitive pointer analysis
 */

// There should be no need for this. It's a bad sign if there is.
//lang:compiler:disableError:NEGATION_RECURSION[]=true.

// Ignore verification of calculation in head
lang:compiler:warning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = false.


/**
 * Heap allocation
 */

#ifndef AdvancedRecordBasisMacro
RecordMacro(?ctx, ?value, ?hctx),
VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  AssignNormalHeapAllocation(?heap, ?var, ?inmethod),
  Value:byHeap[?heap] = ?value,
  ReachableContext(?ctx, ?inmethod),
#ifdef RecordArrayMacro
  !ArrayType(Value:Type[?value]),
#endif
  ObjectShouldNotBeRefined(?value).

#else /* there is advanced behavior available */
AdvancedRecordBasisMacro(?ctx, ?var, ?value) <-
  AssignNormalHeapAllocation(?heap, ?var, ?inmethod),
  Value:byHeap[?heap] = ?value,
  ReachableContext(?ctx, ?inmethod).

VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  AdvancedRecordBasisMacro(?ctx, ?var, ?value),
  CachedRecordMacro(?ctx, ?value, ?hctx),
#ifdef RecordArrayMacro
  !ArrayType(Value:Type[?value]),
#endif
  ObjectShouldNotBeRefined(?value).
#endif /* #ifndef AdvancedRecordBasisMacro */


#ifdef RecordArrayMacro
// This doesn't seem to pay off usually. So few analyses (e.g., 1-obj,
// which greatly benefits) define this macro and handle arrays
// specially.
RecordArrayMacro(?ctx, ?value, ?hctx),
VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  AssignNormalHeapAllocation(?heap, ?var, ?inmethod),
  Value:byHeap[?heap] = ?value,
  ReachableContext(?ctx, ?inmethod),
  ArrayType(Value:Type[?value]),
  ObjectShouldNotBeRefined(?value).
#endif // def RecordArrayMacro

RecordMacro(?ctx, ?value, ?hctx),
VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  AssignAuxiliaryHeapAllocation(?heap, ?var, ?inmethod),
  Value:byHeap[?heap] = ?value,
  ReachableContext(?ctx, ?inmethod).

#ifdef RecordRefinedMacro
RecordRefinedMacro(?ctx, ?value, ?hctx),
VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  AssignNormalHeapAllocation(?heap, ?var, ?inmethod),
  Value:byHeap[?heap] = ?value,
  ReachableContext(?ctx, ?inmethod),
  ObjectShouldBeRefined(?value).
#endif
 
VarPointsTo(?hctx, ?value, ?ctx, ?var) <-
  ImmutableHContextFromContext[?ctx] = ?hctx,
  Value:byHeap[?heap] = ?value,
  ReachableAssignContextInsensitiveHeapAllocation(?var, ?ctx, ?heap).

ReachableAssignContextInsensitiveHeapAllocation(?var, ?ctx, ?heap) <-
  AssignContextInsensitiveHeapAllocation(?heap, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod).

/**
 * Null assignments
 */
VarPointsTo(?hctx, ?null, ?toCtx, ?to) <-
   ImmutableHContextFromContext[?toCtx] = ?hctx,
   AssignNull(?to, ?inmethod),
   Value:Null[] = ?null,
   ReachableContext(?toCtx, ?inmethod).

/**
 * Assignment of numeric constant. Currently context-insensitive and
 * only used for android analyses, hence the ad hoc logic to match
 * a specific host class (R).
 */

VarPointsTo(?hctx, ?value, ?toCtx, ?to) <-
   (AssignNumConstant:Id[?insn] = ?const;
    AssignCastNumConstant:Id[?insn] = ?const), // TODO: check the cast?
   AssignInstruction:To[?insn] = ?to,
   Value:byNum[?const] = ?value,
   Instruction:Method[?insn] = ?inmethod,
   ReachableContext(?toCtx, ?inmethod),
   ImmutableHContextFromContext[?toCtx] = ?hctx.


// /**
//  * Local assignments
//  */
//
// Assign(?type, ?ctx, ?to, ?ctx, ?from) <-
//   AssignLocal(?from, ?to, ?inmethod),
//   ReachableContext(?ctx, ?inmethod),
//   Var:Type[?to] = ?type.


// No need to check if type compatible: check is done at original
// inputs to VarPointsTo
VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  OptAssignLocal(?to, ?from).

OptAssignLocal(?to, ?from) -> Var(?to), Var(?from).
OptAssignLocal(?to, ?from) <-
  Reachable(?inmethod),
  AssignLocal(?from, ?to, ?inmethod).

/**
 * Cast assignments
 */

VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  OptAssignCast(?type, ?to, ?from),
  Value:Type[?value] = ?valuetype,
  SupertypeOf(?type, ?valuetype).

OptAssignCast(?type, ?to, ?from) -> Type(?type), Var(?to), Var(?from).
OptAssignCast(?type, ?to, ?from) <-
  Reachable(?inmethod),
  AssignCast(?type, ?from, ?to, ?inmethod).


/**
 * Load/Store instance fields
 */

LoadHeapInstanceField(?ctx, ?to, ?sig, ?basehctx, ?basevalue) <-
  LoadInstanceField(?base, ?sig, ?to, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from) <-
  StoreInstanceField(?from, ?base, ?signature, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

#ifndef FEATHERWEIGHT_ANALYSIS
HeapInterproceduralAssign(?ctxTo, ?to, ?ctxFrom, ?from) <-
  LoadHeapInstanceField(?ctxTo, ?to, ?signature, ?basehctx, ?basevalue),
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctxFrom, ?from).
// !Value:Null(?basevalue).

VarPointsTo(?hctx, ?value, ?toCtx, ?to) <-
  HeapInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from),
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  NotSpecialObject(?value).

VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
  InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
#else
// FEATHERWEIGHT_ANALYSIS
VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
  InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
#endif

#ifndef FEATHERWEIGHT_ANALYSIS
InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) <-
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  NotSpecialObject(?value).
// !Value:Null(?basevalue).
#else
NoInformationOnSignature(?signature) <-
 isField(?signature),
 !DynamicInstanceFieldPointsTo(?signature, _, _, _, _).

ConstructorVar(?var) <-
  Var_DeclaringMethod(?var, ?meth),
  ApplicationMethod(?meth),
  ClassConstructor(?meth, _).

InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) <-
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  ConstructorVar(?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  NoInformationOnSignature(?signature),
  Value:byDynamicHeap(_, ?value),
  NotSpecialObject(?value),
  !Value:Null(?basevalue).
#endif

 
/**
 * Load static fields
 */
VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
  OptLoadStaticField(?ctx, ?to, ?sig),
  StaticFieldPointsTo(?hctx, ?value, ?sig),
  CompatibleContextAndHContextMacro(?ctx, ?hctx).

OptLoadStaticField(?ctx, ?to, ?sig) <-
  LoadStaticField(?sig, ?to, ?inmethod),
  ReachableContext(?ctx, ?inmethod).

/**
 * Store static fields
 */

#ifndef FEATHERWEIGHT_ANALYSIS
StaticFieldPointsTo(?hctx, ?value, ?signature) <-
  ReachableStoreStaticFieldFrom(?from),
  OptStoreStaticField(?signature, ?from),
  VarPointsTo(?hctx, ?value, _, ?from).
#endif

OptStoreStaticField(?signature, ?from) <-
  StoreStaticField(?from, ?signature, _).

ReachableStoreStaticFieldFrom(?from) -> Var(?from).
ReachableStoreStaticFieldFrom(?from) <-
  StoreStaticField(?from, _, ?inmethod),
  Reachable(?inmethod).


/**
 * Store default value in static field (android-only!)
 */

StaticFieldPointsTo(?hctx, ?value, ?signature) <-
  FieldInitialValue[?signature] = ?const,
  Value:byNum[?const] = ?value,
  ImmutableHContext(?hctx).


/**
 * Load array index
 */

VarPointsTo(?hctx, ?value, ?ctx, ?to) <-
  NotEmptyArrayValue(?basevalue),
  LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue),
  ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue),
  // this is necessary to handle untyped array operations, e.g., the
  // simulation of arrayCopy calls as Load/Stores
  Value:Type[?basevalue] = ?basevaluetype,
  Var:Type[?to] = ?type,
  ComponentType[?basevaluetype] = ?basecomponenttype,
  SupertypeOf(?type, ?basecomponenttype).


NotEmptyArrayValue(?value) -> Value(?value).

NotEmptyArrayValue(?value) <-
  (Value:Heap[?value] = ?heap,
   !HeapAllocation:EmptyArray(?heap)) ;
  Value:isNonHeap(?value).

LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue) <-
  ReachableLoadArrayIndexBase(?base),
  OptLoadArrayIndex(?to, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

OptLoadArrayIndex(?to, ?base) <-
  LoadArrayIndex(?base, ?to, _).

ReachableLoadArrayIndexBase(?base) -> Var(?base).
ReachableLoadArrayIndexBase(?base) <-
  LoadArrayIndex(?base, _, ?inmethod),
  Reachable(?inmethod).

/**
 * Store array index
 */

OptStoreIntoArray(?hctx, ?basehctx, ?basevalue, ?value) <-
  StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from).

ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue) <-
  OptStoreIntoArray(?hctx, ?basehctx, ?basevalue, ?value),     
  NotSpecialObject(?value),
  NotEmptyArrayValue(?basevalue),
  Value:Type[?value] = ?valuetype,
  Value:Type[?basevalue] = ?basevaluetype,
  ComponentType[?basevaluetype] = ?componenttype,
  SupertypeOf(?componenttype, ?valuetype).

#ifndef FEATHERWEIGHT_ANALYSIS
StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from) <-
  ReachableStoreArrayIndexBase(?base),
  OptStoreArrayIndex(?from, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).
#endif
StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from) <- StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from).

ReachableStoreArrayIndexBase(?base) -> Var(?base).
ReachableStoreArrayIndexBase(?base) <-
  StoreArrayIndex(_, ?base, ?inmethod),
  Reachable(?inmethod).

OptStoreArrayIndex(?from, ?base) <-
  StoreArrayIndex(?from, ?base, _).


/**
 * Assignments for method invocations
 */

OptInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from) ->
  Context(?toCtx), Var(?to), Context(?fromCtx), Var(?from).

OptInterproceduralAssign(?calleeCtx, ?formal, ?callerCtx, ?actual) <-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  FormalParam[?index, ?method] = ?formal,
  ActualParam[?index, ?invocation] = ?actual.

OptInterproceduralAssign(?callerCtx, ?local, ?calleeCtx, ?return) <-
  ReturnVar(?return, ?method),
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
#ifdef INFORMATION_FLOW
 !SanitizationMethod(?method),
#endif
  AssignReturnValue[?invocation] = ?local.

VarPointsTo(?hctx, ?value, ?toCtx, ?to) <-
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  OptInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from).

/**
 * Virtual Method Invocation
 */

OptVirtualMethodInvocationBase(?invocation, ?base) ->
  Var(?base), MethodInvocation(?invocation).

// REVIEW: indexing changed in the Doop->flow-sens revision,
// so the optimization below should be re-examined.
OptVirtualMethodInvocationBase(?invocation, ?base) <-
  Reachable(?inmethod),
  Instruction:Method[?invocation] = ?inmethod,
  VirtualMethodInvocation:Base[?invocation] = ?base.


// This rule is the default logic for the majority of analyses

#ifndef AdvancedMergeBasisMacro
// This is the "proper" form of the rule. We diverge from it
// to enable more advanced merging logic.

MergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptVirtualMethodInvocationBase(?invocation, ?base),
  Value:Type[?value] = ?valuetype,
  ResolveInvocation[?valuetype, ?invocation] = ?tomethod,
  ThisVar[?tomethod] = ?this,
  SiteShouldNotBeRefined(?invocation).

#else /* there is advanced behavior available */

// The optimization/advanced merge treatment is as follows: the main
// analysis (this file) first creates all the possible bindings that
// the Merge logic might need to create a new context. (It uses
// AdvancedMergeBasisMacro to communicate these bindings to the individual
// context-sensitive analysis.) Then each individual analysis creates
// new context objects by employing arbitrary logic, and communicates
// back to the main analysis the results of context creation using
// CachedMergeMacro.
AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptVirtualMethodInvocationBase(?invocation, ?base).

// The main analysis is merely looking up the previously created
// context objects.

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  Value:Type[?value] = ?valuetype,
  ResolveInvocation[?valuetype, ?invocation] = ?tomethod,
  ThisVar[?tomethod] = ?this,
  SiteShouldNotBeRefined(?invocation).
#endif /* #ifndef AdvancedMergeBasisMacro */


#ifdef MergeRefinedMacro
#ifndef CachedMergeRefinedMacro
// Default behavior
/**
 * This logic applies to refinement-based (or "adaptive") analyses. The
 * analysis is first run with the filter predicate (SiteToRefine) empty,
 * performing a low-precision but cheap computation. Then the external logic
 * runs delta rules to populate the filter predicate and re-runs the analysis.
 * (Note that the #ifdef just checks if the analysis has defined the
 * appropriate macro. This is not an input flag.)
 */
MergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptVirtualMethodInvocationBase(?invocation, ?base),
  Value:Type[?value] = ?valuetype,
  ResolveInvocation[?valuetype, ?invocation] = ?tomethod,
  ThisVar[?tomethod] = ?this,
  SiteShouldBeRefined(?invocation).

#else /* there is advanced behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptVirtualMethodInvocationBase(?invocation, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  Value:Type[?value] = ?valuetype,
  ResolveInvocation[?valuetype, ?invocation] = ?tomethod,
  ThisVar[?tomethod] = ?this,
  SiteShouldBeRefined(?invocation).
#endif /* #ifndef CachedMergeRefinedMacro */
#endif /* #ifdef MergeRefinedMacro */

/**
 * Static method invocations
 */

#ifndef AdvancedMergeStaticBasisMacro
MergeStaticMacro(?callerCtx, ?invocation, ?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod) <-
  ReachableContext(?callerCtx, ?inmethod),
  StaticMethodInvocation(?invocation, ?tomethod, ?inmethod).

#else

AdvancedMergeStaticBasisMacro(?callerCtx, ?invocation) <-
  ReachableContext(?callerCtx, ?inmethod),
  StaticMethodInvocation(?invocation, _, ?inmethod).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod) <-
  AdvancedMergeStaticBasisMacro(?callerCtx, ?invocation),
  CachedMergeStaticMacro(?callerCtx, ?invocation, ?calleeCtx),
  MethodInvocation:Method[?invocation] = ?tomethod.

#endif /* #ifndef AdvancedMergeStaticBasisMacro */

/**
 * Special method invocations
 */

OptSpecialMethodInvocationBase(?invocation, ?base) ->
  Var(?base), MethodInvocation(?invocation).

// REVIEW: indexing changed in the Doop->flow-sens revision,
// so the optimization below should be re-examined.
OptSpecialMethodInvocationBase(?invocation, ?base) <-
  Reachable(?inmethod),
  Instruction:Method[?invocation] = ?inmethod,
  SpecialMethodInvocation:Base[?invocation] = ?base.

#ifndef AdvancedMergeBasisMacro
// Default behavior
MergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  VarPointsTo(?hctx, ?value,  ?callerCtx, ?base),
  OptSpecialMethodInvocationBase(?invocation, ?base),
  MethodInvocation:Method[?invocation] = ?tomethod,
  SpecialMethodInvocation:Insn(?invocation),
  ThisVar[?tomethod] = ?this,
  SiteShouldNotBeRefined(?invocation).
#else /* there is advanced behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptSpecialMethodInvocationBase(?invocation, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  MethodInvocation:Method[?invocation] = ?tomethod,
  SpecialMethodInvocation:Insn(?invocation),
  ThisVar[?tomethod] = ?this,
  SiteShouldNotBeRefined(?invocation).
#endif /* #ifndef AdvancedMergeBasisMacro */

#ifdef MergeRefinedMacro
#ifndef CachedMergeRefinedMacro
// Default behavior
MergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptSpecialMethodInvocationBase(?invocation, ?base),
  MethodInvocation:Method[?invocation] = ?tomethod,
  SpecialMethodInvocation:Insn(?invocation),
  ThisVar[?tomethod] = ?this,
  SiteShouldBeRefined(?invocation).

#else /* there is advanced behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptSpecialMethodInvocationBase(?invocation, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  MethodInvocation:Method[?invocation] = ?tomethod,
  SpecialMethodInvocation:Insn(?invocation),
  ThisVar[?tomethod] = ?this,
  SiteShouldBeRefined(?invocation).
#endif /* #ifndef CachedMergeRefinedMacro */
#endif /* #ifdef MergeRefinedMacro


/**
 * Super method invocations
 */

// REVIEW: indexing changed in the Doop->flow-sens revision,
// so the optimization below should be re-examined.
OptSuperMethodInvocationBase(?invocation, ?base) <-
  Reachable(?inmethod),
  Instruction:Method(?invocation, ?inmethod),
  SuperMethodInvocation:Base(?invocation, ?base).

#ifndef AdvancedMergeBasisMacro
// Default behavior
MergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  VarPointsTo(?hctx, ?value,  ?callerCtx, ?base),
  OptSuperMethodInvocationBase(?invocation, ?base),
  SuperMethodInvocation:Insn(?invocation),
  MethodInvocation:Method[?invocation] = ?tomethod,
  ThisVar[?tomethod] = ?this,
  SiteShouldNotBeRefined(?invocation).
#else /* there is advanced behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptSuperMethodInvocationBase(?invocation, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  MethodInvocation:Method[?invocation] = ?tomethod,
  SuperMethodInvocation:Insn(?invocation),
  ThisVar[?tomethod] = ?this,
  SiteShouldNotBeRefined(?invocation).
#endif /* #ifndef AdvancedMergeBasisMacro */

#ifdef MergeRefinedMacro
#ifndef CachedMergeRefinedMacro
// Default behavior
MergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptSuperMethodInvocationBase(?invocation, ?base),
  MethodInvocation:Method[?invocation] = ?tomethod,
  SuperMethodInvocation:Insn(?invocation),
  ThisVar[?tomethod] = ?this,
  SiteShouldBeRefined(?invocation).

#else /* there is advanced behavior available */

AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value) <-
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  OptSuperMethodInvocationBase(?invocation, ?base).

CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) <-
  AdvancedMergeBasisMacro(?callerCtx, ?invocation, ?hctx, ?value),
  CachedMergeRefinedMacro(?callerCtx, ?invocation, ?hctx, ?value, ?calleeCtx),
  MethodInvocation:Method[?invocation] = ?tomethod,
  SuperMethodInvocation:Insn(?invocation),
  ThisVar[?tomethod] = ?this,
  SiteShouldBeRefined(?invocation).
#endif /* #ifndef CachedMergeRefinedMacro */
#endif /* #ifdef MergeRefinedMacro


/**
 * Reachable
 */

ReachableContext(?ctx, ?method) <-
  CallGraphEdge(_, _, ?ctx, ?method).

Reachable(?method) <-
  ReachableContext(_, ?method).


// Utility function
Var:DeclaringType(Method:DeclaringType[?method], ?var) <- Var:DeclaringMethod(?var, ?method).

/**
 * EXPERIMENTS ONLY below this point
 */

/**
 * Logic to decide whether to apply refined or regular bindings for
 * methods and objects
 */
// We want to allow predicates that express the *complement* of the set
// of objects to refine. We introduce derived-only temp predicates to
// avoid logic replication in the points-to rule itself.

/*
// Below is the proper way to write this but it's currently not well
// supported by the query optimizer so I have to resort to brute
// force (macro-)inlining.
ObjectShouldNotBeRefined(?heap) ->
  HeapAllocation(?heap).
lang:derivationType[`ObjectShouldNotBeRefined] = "Derived".

ObjectShouldNotBeRefined(?heap) <-
  NegativeObjectFilter("true"), ValueToRefine(?heap).

ObjectShouldNotBeRefined(?heap) <-
  !(NegativeObjectFilter("true")), !ValueToRefine(?heap).

ObjectShouldBeRefined(?heap) ->
  HeapAllocation(?heap).
lang:derivationType[`ObjectShouldBeRefined] = "Derived".

ObjectShouldBeRefined(?heap) <-
  !NegativeObjectFilter("true"), ValueToRefine(?heap).

ObjectShouldBeRefined(?heap) <-
  NegativeObjectFilter("true"), !ValueToRefine(?heap).

SiteShouldNotBeRefined(?invocation) ->
  MethodInvocation(?invocation).
lang:derivationType[`SiteShouldNotBeRefined] = "Derived".

SiteShouldNotBeRefined(?invocation) <-
  !NegativeSiteFilter("true"), !SiteToRefine(?invocation).

SiteShouldNotBeRefined(?invocation) <-
  NegativeSiteFilter("true"), SiteToRefine(?invocation).

SiteShouldBeRefined(?invocation) ->
  MethodInvocation(?invocation).
lang:derivationType[`SiteShouldBeRefined] = "Derived".

SiteShouldBeRefined(?invocation) <-
  !NegativeSiteFilter("true"), SiteToRefine(?invocation).

SiteShouldBeRefined(?invocation) <-
  NegativeSiteFilter("true"), !SiteToRefine(?invocation).
*/

/*
// YANNIS: It is tempting to think that the code below works better
//  than computing InstanceFieldPointsTo as an intermediate step.
//  It doesn't. Objects are fewer than vars. Always avoid var
//  cartesian products for efficiency.
VarPointsTo(?hctx, ?heap, ?toCtx, ?to) <-
  VarPointsTo(?hctx, ?heap, ?fromCtx, ?from),
  FlowsTo(?toCtx, ?to, ?fromCtx, ?from).

FlowsTo(?toCtx, ?to, ?fromCtx, ?from) <-
  StoreHeapInstanceField(?sig, ?basehctx, ?baseheap, ?fromCtx, ?from),
  LoadHeapInstanceField(?toCtx, ?to, ?sig, ?basehctx, ?baseheap).
*/

/*
// YANNIS: There's hardly any reason why the code below might work
// better than regular interprocedural assignments (minor exception:
// for return vars, there are methods that have multiple, so some
// benefit might exist). But it was tempting, since interprocedural
// assignments are such a bottleneck. This code doesn't pay off though.
OptActualParam(?index, ?invocation, ?actual) <-
  ActualParam[?index, ?invocation] = ?actual.

OptInvocationWithParam(?index, ?calleeCtx, ?method, ?callerCtx, ?actual) <-
  ActualParam[?index, ?invocation] = ?actual,
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method).

MethodArgPointsTo(?hctx, ?heap, ?index, ?calleeCtx, ?method) <-
  OptInvocationWithParam(?index, ?calleeCtx, ?method, ?callerCtx, ?actual),
  VarPointsTo(?hctx, ?heap, ?callerCtx, ?actual).

VarPointsTo(?hctx, ?heap, ?calleeCtx, ?formal) <-
  FormalParam[?index, ?method] = ?formal,
  MethodArgPointsTo(?hctx, ?heap, ?index, ?calleeCtx, ?method).

OptReturnVar(?method, ?return) <-
  ReturnVar(?return, ?method).

ReturnVarPointsTo(?hctx, ?heap, ?calleeCtx, ?method) <-
  OptReturnVar(?method, ?return),
  VarPointsTo(?hctx, ?heap, ?calleeCtx, ?return).

VarPointsTo(?hctx, ?heap, ?callerCtx, ?local) <-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  AssignReturnValue[?invocation] = ?local,
  ReturnVarPointsTo(?hctx, ?heap, ?calleeCtx, ?method).
*/
/* YANNIS
VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?baseheap),
  InstanceFieldPointsTo(?hctx, ?heap, ?signature, ?basehctx, ?baseheap).

LoadHeapInstanceField(?ctx, ?to, ?sig, ?basehctx, ?baseheap) <-
  ReachableLoadInstanceField(?to, ?sig, ?base),
  VarPointsTo(?basehctx, ?baseheap, ?ctx, ?base).
#endif

ReachableLoadInstanceField(?to, ?sig, ?base) ->
  Var(?to), Field(?sig), Var(?base).
ReachableLoadInstanceField(?to, ?sig, ?base) <-
  LoadInstanceField(?base, ?sig, ?to, ?inmethod),
  Reachable(?inmethod).
*/

/*
StoreHeapArrayIndex(?basehctx, ?baseheap, ?ctx, ?from) <-
  ReachableStoreArrayIndex(?from, ?base),
  VarPointsTo(?basehctx, ?baseheap, ?ctx, ?base).

ReachableStoreArrayIndex(?from, ?base) <-
  StoreArrayIndex(?from, ?base, ?inmethod),
  Reachable(?inmethod).
*/
