/**
 * Context-sensitive pointer analysis with context of 2 object and a
 * context-sensitive heap abstraction.
 */

#include "macros.logic"
#include "../../../core/context-sensitivity.logic"

// In this analysis, both the real context and the real heap context 
// are pairs of HeapAllocations. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
// NOTE: Changed from HeapAllocation to CallGraphEdgeSource
// in order to use the invocation site for static calls.
ContextFromRealContext[?heap1, ?heap2] = ?ctx ->
  Context(?ctx), CallGraphEdgeSource(?heap1), CallGraphEdgeSource(?heap2).
lang:skolem(`ContextFromRealContext).
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.
//SpecialContextFromRealContext[?heap1, ?heap2, ?invocation] = ?ctx ->
//  CallGraphEdgeSource(?heap1), CallGraphEdgeSource(?heap2),
//  CallGraphEdgeSource(?invocation), Context(?ctx). 
//lang:skolem(`SpecialContextFromRealContext).
RealContext1FromContext[?ctx] = ?heap -> 
  Context(?ctx), CallGraphEdgeSource(?heap).
RealContext2FromContext[?ctx] = ?heap -> 
  Context(?ctx), CallGraphEdgeSource(?heap).

RealContext1FromContext[?ctx] = ?heap1,
RealContext2FromContext[?ctx] = ?heap2 <-
  ContextFromRealContext[?heap1, ?heap2] = ?ctx.
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.
//RealContext1FromContext[?ctx] = ?heap2,
//RealContext2FromContext[?ctx] = ?invocation <- 
//  SpecialContextFromRealContext[_, ?heap2, ?invocation] = ?ctx.

HContextFromRealHContext[?heap1, ?heap2] = ?hctx ->
  HContext(?hctx), CallGraphEdgeSource(?heap1), CallGraphEdgeSource(?heap2).
lang:skolem(`HContextFromRealHContext).

RealHContext2FromHContext[?hctx] = ?heap -> 
  HContext(?hctx), CallGraphEdgeSource(?heap).
RealHContext2FromHContext[?hctx] = ?heap2 <-
  HContextFromRealHContext[_, ?heap2] = ?hctx.

HContext(?hctx),
HContextFromRealHContext[?immutable, ?immutable] = ?hctx,
ImmutableHContext(?hctx) <-
  // Special immutable heap allocation constant
  HeapAllocationValue(?immutable, "<<immutable>>").



// Create initial objects with their heapcontexts.
HContextFromRealHContext[?heap1, ?heap2] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?heap1, ?heap2, ?alloc).

HContextFromRealHContext[?heap1, ?heap2] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?heap1, ?heap2, ?alloc).

HContextFromRealHContext[?heap1, ?heap2] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?heap1, ?heap2, ?alloc).

/**
 * Merge optimization hack
 */

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
MyMergeBasis(?hctx, ?heap) <-
  MergeBasis(_, _, ?hctx, ?heap).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContext2FromHContext[?hctx],?heap] = ?calleeCtx,
CachedMerge[?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?heap).
  

/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?initheap,?initheap] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  HeapAllocationValue(?initheap, "<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?startupheap,?startupheap] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  HeapAllocationValue(?startupheap, "<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?clinitheap,?clinitheap] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocationValue(?clinitheap, "<<class-initialization>>").
