// String constants are bare strings so we transform their ids for presentation.
#define STRING_CONSTANT(x) cat("<string constant `", cat(x, "`>"))

// Class-- //

.decl _Valid_Interesting_Type(?type:ReferenceType)
_Valid_Interesting_Type(?type) :-
  isReferenceType(?type),
  !Type_null(?type),
  !isArrayType(?type),
  _Server_Interesting_Type(?type).

.decl _Valid_Type(?type:ReferenceType)
_Valid_Type(?type) :-
  isReferenceType(?type),
  !Type_null(?type),
  !isArrayType(?type).

// ?class is implemented/extended by ?subClass
.decl Server_Class_Subtype(?class:ReferenceType, ?subClass:ReferenceType)
// ?class has access to ?field (either it is declared in the class, or in a superclass)
.decl Server_Type_Can_Access_Field(?class:ClassType, ?fld:Field)
.output Server_Class_Subtype
.output Server_Type_Can_Access_Field

Server_Class_Subtype(?class, ?subClass) :-
  basic.SubtypeOfDifferent(?subClass, ?class),
  _Valid_Type(?class),
  _Valid_Type(?subClass).

.decl _Server_Interesting_Type(?class:ReferenceType)

// All application types
_Server_Interesting_Type(?class) :-
  ApplicationClass(?class).

// All classes with a reachable method
_Server_Interesting_Type(?class) :-
  Method_DeclaringType(?method, ?class),
  mainAnalysis.Reachable(?method).

// Types of class heaps used
_Server_Interesting_Type(?type) :-
  mainAnalysis.VarPointsTo(_, ?classHeap, _, _),
  ClassHeap_InstanceType(?classHeap, ?type).

#ifdef REFLECTION
// Reified types used
_Server_Interesting_Type(?type) :-
  mainAnalysis.ReifiedClass(?type, ?value),
  mainAnalysis.VarPointsTo(_, ?value, _, _).
#endif

#ifdef REFLECTION_DYNAMIC_PROXIES
// Proxied interfaces
_Server_Interesting_Type(?interface) :-
  mainAnalysis.ProxyObject_Interface(_, ?interface).
#endif

// Transitively, everything up the hierarchy
_Server_Interesting_Type(?interface) :-
  _Server_Interesting_Type(?class),
  basic.SupertypeOf(?interface, ?class).

Server_Type_Can_Access_Field(?class, ?fld) :-
  Field_DeclaringType(?fld, ?class),
  _Server_Interesting_Type(?class).

Server_Type_Can_Access_Field(?class, ?fld) :-
  Field_DeclaringType(?fld, ?supertype),
  Field_Modifier(?mod, ?fld),
  !Modifier_private(?mod),
  basic.SupertypeOf(?supertype, ?class),
  ?supertype != ?class,
  _Valid_Interesting_Type(?class),
  _Valid_Interesting_Type(?supertype).

// --Class //


// Field-- //

.decl Server_Field_ShadowedBy(?fld:Field, ?shadowFld:Field)
.decl Server_IField_Values(?baseValue:mainAnalysis.Value, ?fld:Field, ?value:mainAnalysis.Value)
.decl Server_SField_Values(?fld:Field, ?value:mainAnalysis.Value)
.decl Server_IField_Values_Count(?baseValue:mainAnalysis.Value, ?fld:Field, ?n:number)
.output Server_Field_ShadowedBy
.output Server_IField_Values
.output Server_SField_Values
.output Server_IField_Values_Count

Server_Field_ShadowedBy(?fld, ?shadowFld) :-
  Field_DeclaringType(?fld, ?class),
  Field_SimpleName(?fld, ?name),
  basic.SubtypeOfDifferent(?subClass, ?class),
  _Valid_Interesting_Type(?class),
  _Valid_Interesting_Type(?subClass),
  Field_DeclaringType(?shadowFld, ?subClass),
  Field_SimpleName(?shadowFld, ?name).

.decl _IFPT(?baseValue:mainAnalysis.Value, ?fld:Field, ?value:mainAnalysis.Value)
.decl _SFPT(?fld:Field, ?value:mainAnalysis.Value)
.decl _SFPT_Count(?fld:Field, ?n:number)

_IFPT(?baseValue, ?fld, ?value) :-
  mainAnalysis.InstanceFieldPointsTo(_, ?value, ?fld, _, ?baseValue).

Server_IField_Values_Count(?baseValue, ?fld, ?n) :-
  _IFPT(?baseValue, ?fld, _),
  ?n = count:{_IFPT(?baseValue, ?fld, _)}.

_SFPT(?fld, ?value) :-
  mainAnalysis.StaticFieldPointsTo(_, ?value, ?fld).

_SFPT_Count(?fld, ?n) :-
  _SFPT(?fld, _),
  ?n = count:{_SFPT(?fld, _)}.

Server_IField_Values(?baseValue, ?fld, ?value) :-
  _IFPT(?baseValue, ?fld, ?value),
  Server_IField_Values_Count(?baseValue, ?fld, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD,
  mainAnalysis.isValue(?baseValue),
  mainAnalysis.isValue(?value),
  !isStringConstant(?value).

Server_IField_Values(?baseValue, ?fld, STRING_CONSTANT(?value)) :-
  _IFPT(?baseValue, ?fld, ?value),
  Server_IField_Values_Count(?baseValue, ?fld, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD,
  mainAnalysis.isValue(?baseValue),
  mainAnalysis.isValue(?value),
  isStringConstant(?value).

Server_IField_Values(?baseValue, ?fld, "<<XL-pt-set>>") :-
  Server_IField_Values_Count(?baseValue, ?fld, ?count),
  ?count > X_SERVER_LOGIC_THRESHOLD,
  mainAnalysis.isValue(?baseValue).

Server_SField_Values(?fld, ?value) :-
  _SFPT(?fld, ?value),
  _SFPT_Count(?fld, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD,
  !isStringConstant(?value),
  mainAnalysis.isValue(?value).

Server_SField_Values(?fld, STRING_CONSTANT(?value)) :-
  _SFPT(?fld, ?value),
  _SFPT_Count(?fld, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD,
  isStringConstant(?value),
  mainAnalysis.isValue(?value).

Server_SField_Values(?fld, "<<XL-pt-set>>") :-
  _SFPT_Count(?fld, ?count),
  ?count > X_SERVER_LOGIC_THRESHOLD.

// --Field //


// Var-- //

.decl Server_Var_Values(?class:ClassType, ?var:Var, ?value:mainAnalysis.Value)
.decl Server_Var_Return(?var:Var, ?method:Method)
.output Server_Var_Values
.output Server_Var_Return

.decl _VPT(?var:Var, ?value:mainAnalysis.Value)
.decl _VPT_Count(?var:Var, ?n:number)
.decl _InterestingVar(?var:Var)

_VPT(?var, ?value) :-
  mainAnalysis.VarPointsTo(_, ?value, _, ?var).

_InterestingVar(?var) :-
  _VPT(?var, _).

_VPT_Count(?var, ?n) :-
  _InterestingVar(?var),
  ?n = count:{_VPT(?var, _)}.

.decl _VarUnderThreshold(?var:Var)
_VarUnderThreshold(?var) :-
  _VPT_Count(?var, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD.

.decl _VarDeclaringClass(?var:Var, ?class:Type)
_VarDeclaringClass(?var, ?class) :-
  _InterestingVar(?var),
  Var_DeclaringMethod(?var, ?method),
  Method_DeclaringType(?method, ?class).

Server_Var_Values(?class, ?var, ?value) :-
  _VPT(?var, ?value),
  _VarUnderThreshold(?var),
//  mainAnalysis.isValue(?value),
  !isStringConstant(?value),
  _VarDeclaringClass(?var, ?class).

Server_Var_Values(?class, ?var, STRING_CONSTANT(?value)) :-
  _VPT(?var, ?value),
  _VarUnderThreshold(?var),
//  mainAnalysis.isValue(?value),
  isStringConstant(?value),
  _VarDeclaringClass(?var, ?class).

Server_Var_Values(?class, ?var, "<<XL-pt-set>>") :-
  _InterestingVar(?var),
  !_VarUnderThreshold(?var),
  _VarDeclaringClass(?var, ?class).

Server_Var_Return(?var, ?method) :-
  (ReturnVar(?var, ?method) ;
   NativeReturnVar(?var, ?method)),
   _VPT(?var, _).

// --Var //


// Array-- //

.decl Server_Array_Values(?arrayValue:mainAnalysis.Value, ?value:mainAnalysis.Value)
.output Server_Array_Values

.decl _AIPT(?arrayValue:mainAnalysis.Value, ?value:mainAnalysis.Value)
.decl _AIPT_Count(?arrayValue:mainAnalysis.Value, ?n:number)

_AIPT(?arrayValue, ?value) :-
  mainAnalysis.ArrayIndexPointsTo(_, ?value, _, ?arrayValue).

_AIPT_Count(?arrayValue, ?n) :-
  _AIPT(?arrayValue, _),
  ?n = count:{_AIPT(?arrayValue, _)}.

Server_Array_Values(?arrayValue, ?value) :-
  _AIPT(?arrayValue, ?value),
  _AIPT_Count(?arrayValue, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD.

Server_Array_Values(?arrayValue, "<<XL-pt-set>>") :-
  _AIPT_Count(?arrayValue, ?count),
  ?count > X_SERVER_LOGIC_THRESHOLD.

// --Array //


// Method-- //

// ?method is implemented/overriden by ?subMethod
.decl Server_Method_Subtype(?method:Method, ?subMethod:Method)
.output Server_Method_Subtype

Server_Method_Subtype(?method, ?subMethod) :-
  Method_DeclaringType(?method, ?type),
  Method_SimpleName(?method, ?name),
  Method_Descriptor(?method, ?desc),
  ?name != "<clinit>",
  ?name != "<init>",
  basic.SubtypeOfDifferent(?subType, ?type),
  _Valid_Interesting_Type(?type),
  _Valid_Interesting_Type(?subType),
  Method_DeclaringType(?subMethod, ?subType),
  Method_SimpleName(?subMethod, ?name),
  Method_Descriptor(?subMethod, ?desc).

// Rule to handle covariant return types.
Server_Method_Subtype(?method, ?subMethod) :-
  Method_DeclaringType(?method, ?type),
  Method_SimpleName(?method, ?name),
  Method_Descriptor(?method, ?desc),
  ?name != "<clinit>",
  ?name != "<init>",
  basic.SubtypeOfDifferent(?subType, ?type),
  _Valid_Interesting_Type(?type),
  _Valid_Interesting_Type(?subType),
  basic.MethodImplemented(?name, _, ?subType, ?subMethod),
  basic.MethodLookup(?name, ?desc, ?subType, ?subMethod).


// All the methods reachable from a method (transitive call-graph)
//.decl Server_Method_ReachesMethod(?fromMethod:Method, ?toMethod:Method)
//.decl Server_Method_AllocationCount(?method:Method, ?n:number)
//.output Server_Method_AllocationCount
//.output Server_Method_ReachesMethod
//
//.decl _MethodCallsMethod(?fromMethod:Method, ?toMethod:Method)
//.decl _MethodReachesAllocation(?method:Method, ?insn:Instruction)
//
//Server_Method_ReachesMethod(?fromMethod, ?toMethod) :-
//  _MethodCallsMethod(?fromMethod, ?toMethod).
//
//Server_Method_ReachesMethod(?fromMethod, ?toMethod) :-
//  Server_Method_ReachesMethod(?fromMethod, ?midMethod),
//  _MethodCallsMethod(?toMethod, ?midMethod).
//
//_MethodReachesAllocation(?method, ?insn) :-
//  _MethodCallsMethod(?method, ?toMethod),
//  _MethodReachesAllocation(?toMethod, ?insn).
//
//Server_Method_AllocationCount(?method, ?n) :-
//  _MethodReachesAllocation(?method, _),
//  ?n = count:{_MethodReachesAllocation(?method, _)}.
//
//Server_Method_AllocationCount(?method, 0) :-
//  Method(?method),
//  !_MethodReachesAllocation(?method, _).

// --Method //


// Invocation-- //

.decl Server_Invocation_Values(?fromMethod:Method, ?invo:MethodInvocation, ?toMethod:Method, ?isCHA:number)
.decl Server_ClassCallsClass(?fromClass:ClassType, ?toClass:ClassType)
.output Server_Invocation_Values
.output Server_ClassCallsClass

Server_Invocation_Values(?fromMethod, ?invo, ?toMethod, 0) :-
  (mainAnalysis.CallGraphEdge(_, ?invo, _, ?toMethod);
   mainAnalysis.InvokedynamicCallGraphEdge(_, ?invo, _, ?toMethod, _)),
  Instruction_Method(?invo, ?fromMethod).

#ifdef REFLECTION
Server_Invocation_Values(?fromMethod, ?invo, ?toMethod, 0) :-
  mainAnalysis.ReflectiveCallGraphEdge(_, ?invo, _, ?toMethod),
  Instruction_Method(?invo, ?fromMethod).
#endif // REFLECTION

Server_Invocation_Values(?fromMethod, ?invo, ?toMethod, 1) :-
  basic.ResolveInvocation(_, ?invo, ?toMethod),
  !mainAnalysis.CallGraphEdge(_, ?invo, _, _),
  !mainAnalysis.InvokedynamicCallGraphEdge(_, ?invo, _, _, _),
  Instruction_Method(?invo, ?fromMethod),
  mainAnalysis.Reachable(?fromMethod).

Server_ClassCallsClass(?fromClass, ?toClass) :-
  Server_Invocation_Values(?fromMethod, _, ?toMethod, _),
  Method_DeclaringType(?fromMethod, ?fromClass),
  Method_DeclaringType(?toMethod, ?toClass).

// --Invocation //


// Metrics-- //

.decl Server_Metrics(?metric:symbol, ?n:number)
.output Server_Metrics

.decl _AppVirtual(?invo:MethodInvocation)
.decl _AppVirtual_Resolved(?invo:MethodInvocation)
.decl _AppReachable(?method:Method)

_AppVirtual(?invo) :-
  // Use facts so that opaque method invocations are also recognized.
  _VirtualMethodInvocation(?invo, _, _, _, ?method),
  ApplicationMethod(?method).

_AppVirtual_Resolved(?invo) :-
  _AppVirtual(?invo),
  mainAnalysis.CallGraphEdge(_, ?invo, _, _).

_AppReachable(?method) :-
  mainAnalysis.Reachable(?method),
  ApplicationMethod(?method).

Server_Metrics("#AppVirtual (static)", ?n) :- ?n = count:{_AppVirtual(_)}.
Server_Metrics("#AppVirtual (resolved)", ?n) :- ?n = count:{_AppVirtual_Resolved(_)}.
Server_Metrics("#AppMethod (reachable)", ?n) :- ?n = count:{_AppReachable(_)}.

.decl _ClassTypeUnion(?c:ReferenceType)
_ClassTypeUnion(?c) :- isClassType(?c) ; isInterfaceType(?c).

Server_Metrics("#AppClass", ?n) :- ?n = count:{ApplicationClass(_)}.
Server_Metrics("#Class", ?n) :- ?n = count:{_ClassTypeUnion(_)}.
Server_Metrics("#AppMethod", ?n) :- ?n = count:{ApplicationMethod(_)}.
Server_Metrics("#Method", ?n) :- ?n = count:{isMethod(_)}.
Server_Metrics("#Field", ?n) :- ?n = count:{isField(_)}.
Server_Metrics("#Var", ?n) :- ?n = count:{isVar(_)}.
Server_Metrics("#HeapAllocation", ?n) :- ?n = count:{isHeapAllocation(_)}.
Server_Metrics("#MethodInvocation", ?n) :- ?n = count:{isMethodInvocation(_)}.

// --Metrics //
