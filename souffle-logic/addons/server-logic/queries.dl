// Class-- //

.decl _Valid_Type(?type:ReferenceType)
_Valid_Type(?type) :-
  isReferenceType(?type),
  !Type_null(?type),
  !isArrayType(?type),
  Server_Class_Keep(?type).


// ?class is implemented/extended by ?subClass
.decl Server_Class_Subtype(?class:ReferenceType, ?subClass:ReferenceType)
.decl Server_Class_Keep(?class:ReferenceType)
// ?class has access to ?field (either it is declared in the class, or in a superclass)
.decl Server_Class_ReachesField(?class:ClassType, ?fld:Field)
.output Server_Class_Subtype
.output Server_Class_Keep
.output Server_Class_ReachesField

Server_Class_Subtype(?class, ?subClass) :-
  SubtypeOfDifferent(?subClass, ?class),
  _Valid_Type(?class),
  _Valid_Type(?subClass).

// All application types
Server_Class_Keep(?class) :-
  ApplicationClass(?class).

// All classes with a reachable method
Server_Class_Keep(?class) :-
  Method_DeclaringType(?method, ?class),
  Reachable(?method).

// Types of class heaps used
Server_Class_Keep(?type) :-
  VarPointsTo(_, ?classHeap, _, _),
  ClassHeap_InstanceType(?classHeap, ?type).

#ifdef REFLECTION
// Reified types used
Server_Class_Keep(?type) :-
  VarPointsTo(_, ?value, _, _),
  ReifiedClass(?type, ?value).
#endif

#ifdef REFLECTION_DYNAMIC_PROXIES
// Proxied interfaces
Server_Class_Keep(?interface) :-
  ProxyObject_Interface(_, ?interface).
#endif

// Transitively, everything up the hierarchy
Server_Class_Keep(?interface) :-
  Server_Class_Keep(?class),
  SupertypeOf(?interface, ?class).

Server_Class_ReachesField(?class, ?fld) :-
  Field_DeclaringType(?fld, ?class),
  Server_Class_Keep(?class).

Server_Class_ReachesField(?class, ?fld) :-
  Field_DeclaringType(?fld, ?supertype),
  Field_Modifier(?mod, ?fld),
  !Modifier_private(?mod),
  SupertypeOf(?supertype, ?class),
  ?supertype != ?class,
  _Valid_Type(?class),
  _Valid_Type(?supertype).

// --Class //


// Field-- //

.decl Server_Field_ShadowedBy(?fld:Field, ?shadowFld:Field)
.decl Server_IField_Values(?baseValue:Value, ?fld:Field, ?value:Value)
.decl Server_SField_Values(?fld:Field, ?value:Value)
.output Server_Field_ShadowedBy
.output Server_IField_Values
.output Server_SField_Values

Server_Field_ShadowedBy(?fld, ?shadowFld) :-
  Field_DeclaringType(?fld, ?class),
  Field_SimpleName(?fld, ?name),
  SubtypeOfDifferent(?subClass, ?class),
  _Valid_Type(?class),
  _Valid_Type(?subClass),
  Field_DeclaringType(?shadowFld, ?subClass),
  Field_SimpleName(?shadowFld, ?name).

.decl _IFPT(?baseValue:Value, ?fld:Field, ?value:Value)
.decl _IFPT_Count(?baseValue:Value, ?fld:Field, ?n:number)
.decl _SFPT(?fld:Field, ?value:Value)
.decl _SFPT_Count(?fld:Field, ?n:number)

_IFPT(?baseValue, ?fld, ?value) :-
  InstanceFieldPointsTo(_, ?value, ?fld, _, ?baseValue).

_IFPT_Count(?baseValue, ?fld, ?n) :-
  _IFPT(?baseValue, ?fld, _),
  ?n = count:{_IFPT(?baseValue, ?fld, _)}.

_SFPT(?fld, ?value) :-
  StaticFieldPointsTo(_, ?value, ?fld).

_SFPT_Count(?fld, ?n) :-
  _SFPT(?fld, _),
  ?n = count:{_SFPT(?fld, _)}.

Server_IField_Values(?baseValue, ?fld, ?value) :-
  _IFPT(?baseValue, ?fld, ?value),
  _IFPT_Count(?baseValue, ?fld, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD,
  isValue(?baseValue),
  isValue(?value).

Server_IField_Values(?baseValue, ?fld, "<<XL-pt-set>>") :-
  _IFPT_Count(?baseValue, ?fld, ?count),
  ?count > X_SERVER_LOGIC_THRESHOLD,
  isValue(?baseValue).

Server_SField_Values(?fld, ?value) :-
  _SFPT(?fld, ?value),
  _SFPT_Count(?fld, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD,
  isValue(?value).

Server_SField_Values(?fld, "<<XL-pt-set>>") :-
  _SFPT_Count(?fld, ?count),
  ?count > X_SERVER_LOGIC_THRESHOLD.

// --Field //


// Var-- //

.decl Server_Var_Values(?class:ClassType, ?var:Var, ?value:Value)
.decl Server_Var_Return(?var:Var, ?method:Method)
.output Server_Var_Values
.output Server_Var_Return

.decl _VPT(?var:Var, ?value:Value)
.decl _VPT_Count(?var:Var, ?n:number)

_VPT(?var, ?value) :-
  VarPointsTo(_, ?value, _, ?var).

_VPT_Count(?var, ?n) :-
  _VPT(?var, _),
  ?n = count:{_VPT(?var, _)}.

Server_Var_Values(?class, ?var, ?value) :-
  _VPT(?var, ?value),
  _VPT_Count(?var, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD,
  isValue(?value),
  Var_DeclaringMethod(?var, ?method),
  Method_DeclaringType(?method, ?class).

Server_Var_Values(?class, ?var, "<<XL-pt-set>>") :-
  _VPT_Count(?var, ?count),
  ?count > X_SERVER_LOGIC_THRESHOLD,
  Var_DeclaringMethod(?var, ?method),
  Method_DeclaringType(?method, ?class).

Server_Var_Return(?var, ?method) :-
  ReturnVar(?var, ?method) ;
  NativeReturnVar(?var, ?method).

// --Var //


// Array-- //

.decl Server_Array_Values(?arrayValue:Value, ?value:Value)
.output Server_Array_Values

.decl _AIPT(?arrayValue:Value, ?value:Value)
.decl _AIPT_Count(?arrayValue:Value, ?n:number)

_AIPT(?arrayValue, ?value) :-
  ArrayIndexPointsTo(_, ?value, _, ?arrayValue).

_AIPT_Count(?arrayValue, ?n) :-
  _AIPT(?arrayValue, _),
  ?n = count:{_AIPT(?arrayValue, _)}.

Server_Array_Values(?arrayValue, ?value) :-
  _AIPT(?arrayValue, ?value),
  _AIPT_Count(?arrayValue, ?count),
  ?count <= X_SERVER_LOGIC_THRESHOLD.

Server_Array_Values(?arrayValue, "<<XL-pt-set>>") :-
  _AIPT_Count(?arrayValue, ?count),
  ?count > X_SERVER_LOGIC_THRESHOLD.

// --Array //


// Method-- //

// ?method is implemented/overriden by ?subMethod
.decl Server_Method_Subtype(?method:Method, ?subMethod:Method)
.output Server_Method_Subtype

Server_Method_Subtype(?method, ?subMethod) :-
  Method_DeclaringType(?method, ?type),
  Method_SimpleName(?method, ?name),
  Method_Descriptor(?method, ?desc),
  ?name != "<clinit>",
  ?name != "<init>",
  SubtypeOfDifferent(?subType, ?type),
  _Valid_Type(?type),
  _Valid_Type(?subType),
  Method_DeclaringType(?subMethod, ?subType),
  Method_SimpleName(?subMethod, ?name),
  Method_Descriptor(?subMethod, ?desc).

// Rule to handle covariant return types.
Server_Method_Subtype(?method, ?subMethod) :-
  Method_DeclaringType(?method, ?type),
  Method_SimpleName(?method, ?name),
  Method_Descriptor(?method, ?desc),
  ?name != "<clinit>",
  ?name != "<init>",
  SubtypeOfDifferent(?subType, ?type),
  _Valid_Type(?type),
  _Valid_Type(?subType),
  MethodImplemented(?name, _, ?subType, ?subMethod),
  basic.MethodLookup(?name, ?desc, ?subType, ?subMethod).


// All the methods reachable from a method (transitive call-graph)
//.decl Server_Method_ReachesMethod(?fromMethod:Method, ?toMethod:Method)
//.decl Server_Method_AllocationCount(?method:Method, ?n:number)
//.output Server_Method_AllocationCount
//.output Server_Method_ReachesMethod
//
//.decl _MethodCallsMethod(?fromMethod:Method, ?toMethod:Method)
//.decl _MethodReachesAllocation(?method:Method, ?insn:Instruction)
//
//Server_Method_ReachesMethod(?fromMethod, ?toMethod) :-
//  _MethodCallsMethod(?fromMethod, ?toMethod).
//
//Server_Method_ReachesMethod(?fromMethod, ?toMethod) :-
//  Server_Method_ReachesMethod(?fromMethod, ?midMethod),
//  _MethodCallsMethod(?toMethod, ?midMethod).
//
//_MethodReachesAllocation(?method, ?insn) :-
//  _MethodCallsMethod(?method, ?toMethod),
//  _MethodReachesAllocation(?toMethod, ?insn).
//
//Server_Method_AllocationCount(?method, ?n) :-
//  _MethodReachesAllocation(?method, _),
//  ?n = count:{_MethodReachesAllocation(?method, _)}.
//
//Server_Method_AllocationCount(?method, 0) :-
//  Method(?method),
//  !_MethodReachesAllocation(?method, _).

// --Method //


// Invocation-- //

.decl Server_Invocation_Values(?fromMethod:Method, ?invo:MethodInvocation, ?toMethod:Method, ?isCHA:number)
.output Server_Invocation_Values

Server_Invocation_Values(?fromMethod, ?invo, ?toMethod, 0) :-
  CallGraphEdge(_, ?invo, _, ?toMethod),
  Instruction_Method(?invo, ?fromMethod).

Server_Invocation_Values(?fromMethod, ?invo, ?toMethod, 1) :-
  ResolveInvocation(_, ?invo, ?toMethod),
  !CallGraphEdge(_, ?invo, _, _),
  Instruction_Method(?invo, ?fromMethod),
  Reachable(?fromMethod).

/*Server_Invocation_Values(?invo, ?toMethod) :-
  InvokedynamicCallGraphEdge(_, ?invo, _, ?toMethod).
*/

// --Invocation //


// Metrics-- //

.decl Server_Metrics(?metric:symbol, ?n:number)
.output Server_Metrics

.decl _AppVirtual(?invo:MethodInvocation)
.decl _AppVirtual_Resolved(?invo:MethodInvocation)
.decl _AppVirtual_Count(?n:number)
.decl _AppVirtual_Resolved_Count(?n:number)
.decl _AppReachable(?method:Method)
.decl _AppMethod_Count(?n:number)
.decl _AppReachable_Count(?n:number)

_AppVirtual(?invo) :-
  isVirtualMethodInvocation_Insn(?invo),
  Instruction_Method(?invo, ?method),
  ApplicationMethod(?method).

_AppVirtual_Resolved(?invo) :-
  _AppVirtual(?invo),
  CallGraphEdge(_, ?invo, _, _).

_AppVirtual_Count(?n) :-
  ?n = count:{_AppVirtual(_)}.

_AppVirtual_Resolved_Count(?n) :-
  ?n = count:{_AppVirtual_Resolved(_)}.

_AppReachable(?method) :-
  Reachable(?method),
  ApplicationMethod(?method).

_AppMethod_Count(?n) :-
  ?n = count:{ApplicationMethod(_)}.

_AppReachable_Count(?n) :-
  ?n = count:{_AppReachable(_)}.

Server_Metrics("AppVirtual (static)", ?n) :- _AppVirtual_Count(?n).
Server_Metrics("AppVirtual (resolved)", ?n) :- _AppVirtual_Resolved_Count(?n).
//Server_Metrics("AppVirtual (%)", ?n) :- ?n = (1.0 * _AppVirtual_Resolved_Count(?c1)) / _AppVirtual_Count(?c2).
Server_Metrics("AppMethod (static)", ?n) :- _AppMethod_Count(?n).
Server_Metrics("AppMethod (reachable)", ?n) :- _AppReachable_Count(?n).
//Server_Metrics("AppMethod (%)", ?n) :- ?n = (1.0 * _AppReachable_Count(?c1)) / _AppMethod_Count(?c2).

// --Metrics //
