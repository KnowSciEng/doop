#ifdef ANDROID
#include "android-declarations.dl"
#endif
#include "class-initialization-declarations.dl"
#include "exceptions-declarations.dl"
#include "implicit-reachable-declarations.dl"
#include "threads-declarations.dl"

#if defined(REFLECTION)
#include "reflection/declarations.dl"
#endif

.decl FakeInvocation_RegisterFinalize0(?heap:HeapAllocation, ?invo:MethodInvocation)

.decl FakeInvocation_RegisterFinalize(?value:Value, ?invo:MethodInvocation)

//-----------------------------------------------------------------------------
// [Value]
//-----------------------------------------------------------------------------

.type Value = HeapAllocation | NumConstant

.decl isValue(?value:Value)

.decl Value_isHeap(?value:Value)
.decl Value_isMock(?value:Value)

// Value_Num maps each numeric constant to a value while
// also prepending it with *num-constant-* to distinguish it
// from heap allocations that share the same string value.
.decl Value_Num(?value:Value, ?const:NumConstant)

.decl Value_isNonHeap(?value:Value)

// Special value objects are just artificial ones that we use to find where the
// result of a reflective call can flow to. We don't want to track them
// through the heap.
.decl NotSpecialObject(?value:Value)

.decl Value_Type(?value:Value, ?type:Type)
.decl Value_DeclaringType(?value:Value, ?type:Type)

// [Miscellaneous]
.decl Value_Null(?null:Value)
