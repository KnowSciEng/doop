isModule("<tensorflow>").

//------------------------------------------------------
//                    TENSOR DATA TYPES
//------------------------------------------------------

.type TensorDataType = ClassType

.decl isTensorDataType(?type: TensorDataType)
ModeledClass("<tensorflow.float16>", "float16", "<tensorflow>").
isTensorDataType("<tensorflow.float16>").
ModeledClass("<tensorflow.float32>", "float32", "<tensorflow>").
isTensorDataType("<tensorflow.float32>").
ModeledClass("<tensorflow.float64>", "float64", "<tensorflow>").
isTensorDataType("<tensorflow.float64>").
ModeledClass("<tensorflow.bfloat16>", "bfloat16", "<tensorflow>").
isTensorDataType("<tensorflow.bfloat16>").
ModeledClass("<tensorflow.complex64>", "complex64", "<tensorflow>").
isTensorDataType("<tensorflow.complex64>").
ModeledClass("<tensorflow.complex128>", "complex128", "<tensorflow>").
isTensorDataType("<tensorflow.complex128>").
ModeledClass("<tensorflow.int8>", "int8", "<tensorflow>").
isTensorDataType("<tensorflow.int8>").
ModeledClass("<tensorflow.uint8>", "uint8", "<tensorflow>").
isTensorDataType("<tensorflow.uint8>").
ModeledClass("<tensorflow.uint16>", "uint16", "<tensorflow>").
isTensorDataType("<tensorflow.uint16>").
ModeledClass("<tensorflow.uint32>", "uint32", "<tensorflow>").
isTensorDataType("<tensorflow.uint32>").
ModeledClass("<tensorflow.uint64>", "uint64", "<tensorflow>").
isTensorDataType("<tensorflow.uint64>").
ModeledClass("<tensorflow.int16>", "int16", "<tensorflow>").
isTensorDataType("<tensorflow.int16>").
ModeledClass("<tensorflow.int32>", "int32", "<tensorflow>").
isTensorDataType("<tensorflow.int32>").
ModeledClass("<tensorflow.int64>", "int64", "<tensorflow>").
isTensorDataType("<tensorflow.int64>").
ModeledClass("<tensorflow.bool>", "bool", "<tensorflow>").
isTensorDataType("<tensorflow.bool>").
ModeledClass("<tensorflow.string>", "string", "<tensorflow>").
isTensorDataType("<tensorflow.string>").
ModeledClass("<tensorflow.qint8>", "qint8", "<tensorflow>").
isTensorDataType("<tensorflow.qint8>").
ModeledClass("<tensorflow.quint8>", "quint8", "<tensorflow>").
isTensorDataType("<tensorflow.quint8>").
ModeledClass("<tensorflow.qint16>", "qint16", "<tensorflow>").
isTensorDataType("<tensorflow.qint16>").
ModeledClass("<tensorflow.quint16>", "quint16", "<tensorflow>").
isTensorDataType("<tensorflow.quint16>").
ModeledClass("<tensorflow.qint32>", "qint32", "<tensorflow>").
isTensorDataType("<tensorflow.qint32>").
ModeledClass("<tensorflow.resource>", "resource", "<tensorflow>").
isTensorDataType("<tensorflow.resource>").
ModeledClass("<tensorflow.variant>", "variant", "<tensorflow>").
isTensorDataType("<tensorflow.variant>").

.decl TensorShapeListLength(?hctx:configuration.HContext, ?val:Value, ?size:number)
.decl TensorShapeListContent(?hctx:configuration.HContext, ?val:Value, ?index:number, ?indexValue:Value)
.output TensorShapeListLength
.output TensorShapeListContent

ModeledClass("<tensorflow.Tensor>", "Tensor", "<tensorflow>").

ModeledClass("<tensorflow.TensorShape>", "TensorShape", "<tensorflow>").

ModeledModule("<tensorflow.layers>", "layers", "<tensorflow>").
ModeledModule("<tensorflow.nn>", "nn", "<tensorflow>").

ModeledFunction("<tensorflow.reshape>", "reshape", "<tensorflow>").
FormalParam( 0, "tensor", "<tensorflow.reshape>", "<tensorflow.reshape>/mockParam1").
FormalParam( 1, "shape", "<tensorflow.reshape>",  "<tensorflow.reshape>/mockParam2").
FormalParam( 2, "name", "<tensorflow.reshape>",   "<tensorflow.reshape>/mockParam3").

ModeledFunction("<tensorflow.constant>", "constant", "<tensorflow>").

ModeledFunction("<tensorflow.placeholder>", "placeholder", "<tensorflow>").
FormalParam( 0, "dtype", "<tensorflow.placeholder>", "<tensorflow.placeholder>/mockParam1").
FormalParam( 1, "shape", "<tensorflow.placeholder>", "<tensorflow.placeholder>/mockParam2").
FormalParam( 2, "name", "<tensorflow.placeholder>",  "<tensorflow.placeholder>/mockParam3").


ModeledFunction("<tensorflow.layers.conv1d>", "conv1d", "<tensorflow.layers>").
ModeledFunction("<tensorflow.layers.conv2d>", "conv2d", "<tensorflow.layers>").
ModeledFunction("<tensorflow.layers.conv3d>", "conv3d", "<tensorflow.layers>").

FormalParam( 0, "inputs", ?function, cat(?function,"/mockParam1")),
FormalParam( 1, "filters", ?function, cat(?function,"/mockParam2")),
FormalParam( 2, "kernel_size", ?function,  cat(?function,"/mockParam3")),
FormalParam( 3, "strides", ?function,  cat(?function,"/mockParam4")),
FormalParam( 4, "padding", ?function,  cat(?function,"/mockParam5")),
FormalParam( 5, "data_format", ?function,  cat(?function,"/mockParam6")),
FormalParam( 6, "dilation_rate", ?function,  cat(?function,"/mockParam7")):-
  ?function = "<tensorflow.layers.conv1d>";
  ?function = "<tensorflow.layers.conv2d>";
  ?function = "<tensorflow.layers.conv3d>".

//isListOfIntConsts("<tensorflow.layers>/new list/0").
//ConstListDimensions("<tensorflow.layers>/new list/0",2).
//ConstListContents("<tensorflow.layers>/new list/0", 0, "<num-constant(int):1>").
//ConstListContents("<tensorflow.layers>/new list/0", 1, "<num-constant(int):1>").

Value_Num("<num-constant(int):1>", "1").
Value_String("<string constant:valid>" ,"valid").
Value_String("<string constant:channels_last>" ,"channels_last").

VarPointsTo(?hctx, "<num-constant(int):1>", ?ctx, "<tensorflow.layers>/stridesDefValVar"),
VarPointsTo(?hctx, "<num-constant(int):1>", ?ctx, "<tensorflow.layers>/dilationRateDefValVar"),
VarPointsTo(?hctx, "<string constant:channels_last>", ?ctx, "<tensorflow.layers>/dataFormatDefValVar"),
VarPointsTo(?hctx, "<string constant:valid>", ?ctx, "<tensorflow.layers>/paddingDefValVar") :-
  isImmutableContext(?ctx),
  isImmutableHContext(?hctx).

FormalParam_DefaultValFrom(?function, "strides", "<tensorflow.layers>/stridesDefValVar"),
FormalParam_DefaultValFrom(?function, "dilation_rate", "<tensorflow.layers>/dilationRateDefValVar"),
FormalParam_DefaultValFrom(?function, "data_format", "<tensorflow.layers>/dataFormatDefValVar"),
FormalParam_DefaultValFrom(?function, "padding", "<tensorflow.layers>/paddingDefValVar"):-
  ?function = "<tensorflow.layers.conv1d>";
  ?function = "<tensorflow.layers.conv2d>";
  ?function = "<tensorflow.layers.conv3d>".

ModeledFunction("<tensorflow.nn.conv1d>", "conv1d", "<tensorflow.nn>").
ModeledFunction("<tensorflow.nn.conv2d>", "conv2d", "<tensorflow.nn>").
ModeledFunction("<tensorflow.nn.conv3d>", "conv3d", "<tensorflow.nn>").

FormalParam( 0, "inputs", ?function, cat(?function,"/mockParam1")),
FormalParam( 1, "filter", ?function, cat(?function,"/mockParam2")),
FormalParam( 2, "strides", ?function,  cat(?function,"/mockParam3")),
FormalParam( 3, "padding", ?function,  cat(?function,"/mockParam4")),
FormalParam( 4, "use_cudnn_on_gpu", ?function,  cat(?function,"/mockParam5")),
FormalParam( 5, "data_format", ?function,  cat(?function,"/mockParam6")),
FormalParam( 5, "name", ?function,  cat(?function,"/mockParam7")):-
  ?function = "<tensorflow.nn.conv1d>";
  ?function = "<tensorflow.nn.conv2d>";
  ?function = "<tensorflow.nn.conv3d>".

VarPointsTo(?hctx, "<None>", ?ctx, "<tensorflow.nn>/useCudnnOnGpuDefValVar"),
VarPointsTo(?hctx, "<None>", ?ctx, "<tensorflow.nn>/dataFormatDefValVar"),
VarPointsTo(?hctx, "<None>", ?ctx, "<tensorflow.nn>/nameDefValVar") :-
  isImmutableContext(?ctx),
  isImmutableHContext(?hctx).

FormalParam_DefaultValFrom(?function, "use_cudnn_on_gpu", "<tensorflow.nn>/useCudnnOnGpuDefValVar"),
FormalParam_DefaultValFrom(?function, "data_format", "<tensorflow.nn>/dataFormatDefValVar"),
FormalParam_DefaultValFrom(?function, "name", "<tensorflow.nn>/nameDefValVar"):-
  ?function = "<tensorflow.nn.conv1d>";
  ?function = "<tensorflow.nn.conv2d>";
  ?function = "<tensorflow.nn.conv3d>".

.decl TensorObjectHasConcreteDimensions(?tensorHctx:configuration.HContext, ?tensorVal:Value)
.output TensorObjectHasConcreteDimensions

//------------------------------------------------------
//              GENERAL OPERATION MODELING
//------------------------------------------------------

.decl TensorOperation_NameToVal(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value, ?name:symbol, ?namedValHctx:configuration.HContext, ?namedVal:Value)
.output TensorOperation_NameToVal

.decl TensorOperationProducesOutput(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value)
.output TensorOperationProducesOutput

.decl TensorShape(?tensorHctx:configuration.HContext, ?tensor:Value, ?shapeHctx:configuration.HContext, ?shapeList:Value)
.output TensorShape

.decl TensorDType(?tensorHctx:configuration.HContext, ?tensor:Value, ?dtypeHctx:configuration.HContext, ?dtype:Value)
.output TensorDType

configuration.RecordContextRequest(?ctx, ?outTensorVal, ?var) :-
  TensorOperationProducesOutput(?ctx, ?insn, ?outTensorVal),
  AssignInstruction_To(?insn, ?var).

TensorShape(?hctx, ?outTensorVal, ?hctx, ?tensorShapeVal),
Value_Type(?outTensorVal, "<tensorflow.TensorShape>"),
VarPointsTo(?hctx, ?outTensorVal, ?ctx, ?var),
Value_Type(?outTensorVal, "<tensorflow.Tensor>"):-
  configuration.RecordContextResponse(?ctx, ?outTensorVal, ?var, ?hctx),
  TensorOperationProducesOutput(?ctx, ?insn, ?outTensorVal),
  AssignInstruction_To(?insn, ?var),
  ?tensorShapeVal = cat("<shape ",cat(?outTensorVal, ">")).

TensorObjectHasConcreteDimensions(?hctx, ?tensor):-
  TensorOperationProducesOutput(?ctx, ?insn, ?tensor),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?hctx, ?tensor, ?ctx, ?var),
  TensorShape(?hctx, ?tensor, ?listHctx, ?tensorShape),
  ListOfIntConsts(?listHctx, ?tensorShape).

ListOfConstsLength(?hctx, ?tensorVal, ?len),
ListOfConstsAtIndexPointsTo(?hctx, ?tensorVal, ?index, ?indexValue):-
  TensorShapeListLength(?hctx, ?tensorVal, ?len),
  TensorShapeListContent(?hctx, ?tensorVal, ?index, ?indexValue).

//------------------------------------------------------
//                    PLACEHOLDER INVOC
//------------------------------------------------------

#define PlaceHolderValueMacro(op,fun, index, val1, val2,hctxVal2) cat("<tensor ", cat(fun, cat("/", cat(op, cat( to_string(index), cat(val1, cat("+", cat(val2, cat("-", cat(hctxVal2,">"))))))))))

.decl PlaceholderOperation(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value)
.output PlaceholderOperation

TensorOperation_NameToVal(?ctx, ?insn, ?placeHolderOp, "dtype", ?typeHctx, ?typeVal),
TensorOperation_NameToVal(?ctx, ?insn, ?placeHolderOp, "shape", ?dimListHctx, ?dimListArgVal),
PlaceholderOperation(?ctx, ?insn, ?placeHolderOp):-
  FunctionInvResolvesTo(?ctx, ?insn, _, _, "<tensorflow.placeholder>"),
  ResolvedActualParamValue(?ctx, ?insn, "<tensorflow.placeholder>", "dtype", ?typeHctx, ?typeVal),
  ResolvedActualParamValue(?ctx, ?insn, "<tensorflow.placeholder>", "shape", ?dimListHctx, ?dimListArgVal),
  HeapAllocation_Type(?typeVal, ?typeValType),
  Instruction_Function(?insn, ?fun),
  Instruction_Index(?insn, ?index),
  ?placeHolderOp = PlaceHolderValueMacro("placeholder", ?fun, ?index, ?typeValType, ?dimListArgVal, ?dimListHctx).

TensorOperationProducesOutput(?ctx, ?insn, ?placeHolderOp):-
  PlaceholderOperation(?ctx, ?insn, ?placeHolderOp),
  TensorOperation_NameToVal(?ctx, ?insn, ?placeHolderOp, "dtype", _, ?typeVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?placeHolderOp, "shape", ?dimListHctx, ?dimListArgVal),
  HeapAllocation_Type(?typeVal, ?typeValType),
  isTensorDataType(?typeValType),
  ListOfConsts(?dimListHctx, ?dimListArgVal).

//TensorObjectHasConcreteDimensions(?hctx, ?placeHolderOpVal):-
  //PlaceholderOperation(?ctx, ?insn, ?placeHolderOpVal),
  //TensorOperationProducesOutput(?ctx, ?insn, ?placeHolderOpVal),
  //TensorOperation_NameToVal(?ctx, ?insn, ?placeHolderOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  //AssignInstruction_To(?insn, ?var),
  //VarPointsTo(?hctx, ?placeHolderOpVal, ?ctx, ?var),
  //ListOfIntConsts(?dimListHctx, ?dimListArgVal).

TensorShapeListLength(?shapeHctx, ?tensorShapeVal, ?size),
TensorShapeListContent(?shapeHctx, ?tensorShapeVal, ?index, ?indexValue):-
  PlaceholderOperation(?ctx, ?insn, ?placeHolderOpVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?placeHolderOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?placeHolderOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?hctx, ?placeHolderOpVal, ?ctx, ?var),
  TensorShape(?hctx, ?placeHolderOpVal, ?shapeHctx, ?tensorShapeVal),
  ListInitialLength(?dimListArgVal, ?size),
  ListOfConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, ?index, ?indexValue).

TensorDType(?tensorHctx, ?placeHolderOpVal, ?dtypeHctx, ?typeVal):-
  PlaceholderOperation(?ctx, ?insn, ?placeHolderOpVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?placeHolderOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?placeHolderOpVal, "dtype", ?dtypeHctx, ?typeVal),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?tensorHctx, ?placeHolderOpVal, ?ctx, ?var).

//------------------------------------------------------
//              RESHAPE OP
//------------------------------------------------------

.decl ReshapeOperation(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value)
.output ReshapeOperation

.decl ReshapeOperationInvalid(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value)
.output ReshapeOperationInvalid

.decl ReshapeOperationPossibleMissalignment(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value)
.output ReshapeOperationPossibleMissalignment

.decl ReshapeOperationCorrectTypeArgs(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value)
.output ReshapeOperationCorrectTypeArgs

.decl ReshapeOperationTensorAndListSameMult(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value)
.output ReshapeOperationTensorAndListSameMult

.decl ReshapeOperationTensorAndListDiffMult(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value)
.output ReshapeOperationTensorAndListDiffMult

.decl ReshapeOperationReplaceMinus1WithVal(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?reshapeOpVal:Value, ?newVal:Value)
.output ReshapeOperationReplaceMinus1WithVal

#define ReshapeValueMacro(op,fun, index,val1, hctxVal1, val2,hctxVal2) cat("<tensor ", cat(fun, cat("/", cat(op, cat( to_string(index), cat("/", cat(val1, cat("-", cat(hctxVal1, cat("+", cat(val2, cat("-", cat(hctxVal2,">")))))))))))))

//Checks if the required args are given and their values have correct values


TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
ReshapeOperation(?ctx, ?insn, ?reshapeOpVal):-
  FunctionInvResolvesTo(?ctx, ?insn, _, _, "<tensorflow.reshape>"),
  ResolvedActualParamValue(?ctx, ?insn, "<tensorflow.reshape>", "tensor", ?tensorHctx, ?tensorArgVal),
  ResolvedActualParamValue(?ctx, ?insn, "<tensorflow.reshape>", "shape", ?dimListHctx, ?dimListArgVal),
  Instruction_Function(?insn, ?fun),
  Instruction_Index(?insn, ?index),
  ?reshapeOpVal = ReshapeValueMacro("reshape", ?fun, ?index, ?tensorArgVal, ?tensorHctx, ?dimListArgVal, ?dimListHctx).


ReshapeOperationCorrectTypeArgs(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperation(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", _, ?tensorArgVal),
  Value_Type(?tensorArgVal, "<tensorflow.Tensor>"),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ListOfIntConsts(?dimListHctx, ?dimListArgVal).
  //PyConstListSpecialValueCount(?dimListArgVal, "<num-constant(int):-1>", ?specialValueCount),
  //?specialValueCount < 2.


// Checks if, for the two list arguments --the shape list of the tensor value, and the reshape shape list--
// the multiplication of all the elements(excluding -1 and None) has the same results
ReshapeOperationTensorAndListSameMult(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationCorrectTypeArgs(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorShape(?tensorHctx, ?tensorArgVal, ?shapeHctx, ?tensorShapeVal),
  ConstListMultAll(?shapeHctx, ?tensorShapeVal,?tensorRes),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ConstListMultAll(?dimListHctx, ?dimListArgVal,?dimListRes),
  ?tensorRes = ?dimListRes.

// The opposite of the previous rule
ReshapeOperationTensorAndListDiffMult(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationCorrectTypeArgs(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorShape(?tensorHctx, ?tensorArgVal, ?shapeHctx, ?tensorShapeVal),
  ConstListMultAll(?shapeHctx, ?tensorShapeVal,?tensorRes),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ConstListMultAll(?dimListHctx, ?dimListArgVal,?dimListRes),
  ?tensorRes != ?dimListRes.

//All the input tensors dims are known
//The shape of the dimension list does not contain -1
//isValidTensorReshapeInvocationClass2(?insn, ?tensorArgVal, ?dimListArgVal),,
TensorOperationProducesOutput(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationTensorAndListSameMult(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorObjectHasConcreteDimensions(?tensorHctx, ?tensorArgVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ListOfPosIntConsts(?dimListHctx, ?dimListArgVal).

//All the input tensors dims are known
//The shape of the dimension list contains -1  but it is 1
ReshapeOperationReplaceMinus1WithVal(?ctx, ?insn, ?reshapeOpVal, "<num-constant(int):1>"),
TensorOperationProducesOutput(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationTensorAndListSameMult(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorObjectHasConcreteDimensions(?tensorHctx, ?tensorArgVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ListOfIntConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, _, "<num-constant(int):-1>").

//All the input tensors dims are known
//MAYBE GENERALISE THIS TO COVER THE ABOVE CASE AS WELL
isIntConstant(?replaceNumStr),
Value_Num(?replaceNumVal, ?replaceNumStr),
ReshapeOperationReplaceMinus1WithVal(?ctx, ?insn, ?reshapeOpVal, ?replaceNumVal),
TensorOperationProducesOutput(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationCorrectTypeArgs(?ctx, ?insn, ?reshapeOpVal),
  ReshapeOperationTensorAndListDiffMult(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ListOfIntConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, _, "<num-constant(int):-1>"),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorObjectHasConcreteDimensions(?tensorHctx, ?tensorArgVal),
  TensorShape(?tensorHctx, ?tensorArgVal, ?shapeHctx, ?tensorShapeVal),
  ConstListMultAll(?shapeHctx, ?tensorShapeVal,?tensorMultRes),
  ConstListMultAll(?dimListHctx, ?dimListArgVal,?dimListMultRes),
  ?tensorMultRes % ?dimListMultRes = 0,
  ?replaceNumStr = to_string(?tensorMultRes / ?dimListMultRes),
  ?replaceNumVal = cat("<num-constant(int):",cat(?replaceNumStr,">")).

ReshapeOperationInvalid(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationCorrectTypeArgs(?ctx, ?insn, ?reshapeOpVal),
  ReshapeOperationTensorAndListDiffMult(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ListOfIntConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, _, "<num-constant(int):-1>"),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorObjectHasConcreteDimensions(?tensorHctx, ?tensorArgVal),
  TensorShape(?tensorHctx, ?tensorArgVal, ?shapeHctx, ?tensorShapeVal),
  ConstListMultAll(?shapeHctx, ?tensorShapeVal,?tensorMultRes),
  ConstListMultAll(?dimListHctx, ?dimListArgVal,?dimListMultRes),
  ?tensorMultRes % ?dimListMultRes != 0.

//RECHECK THIS!
ReshapeOperationInvalid(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationCorrectTypeArgs(?ctx, ?insn, ?reshapeOpVal),
  ReshapeOperationTensorAndListDiffMult(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  ListOfPosIntConsts(?dimListHctx, ?dimListArgVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorObjectHasConcreteDimensions(?tensorHctx, ?tensorArgVal).


ReshapeOperationReplaceMinus1WithVal(?ctx, ?insn, ?reshapeOpVal, "<None>"),
TensorOperationProducesOutput(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationTensorAndListSameMult(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorShape(?tensorHctx, ?tensorArgVal, ?shapeHctx, ?tensorShapeVal),
  ListOfIntConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, ?pos, "<num-constant(int):-1>"),
  ListOfConstsAtIndexPointsTo(?shapeHctx, ?tensorShapeVal, ?pos, "<None>").

ReshapeOperationReplaceMinus1WithVal(?ctx, ?insn, ?reshapeOpVal, "<None>"),
ReshapeOperationPossibleMissalignment(?ctx, ?insn, ?reshapeOpVal),
TensorOperationProducesOutput(?ctx, ?insn, ?reshapeOpVal):-
  ReshapeOperationTensorAndListSameMult(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "tensor", ?tensorHctx, ?tensorArgVal),
  TensorShape(?tensorHctx, ?tensorArgVal, ?shapeHctx, ?tensorShapeVal),
  ListOfIntConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, ?pos1, "<num-constant(int):-1>"),
  ListOfConstsAtIndexPointsTo(?shapeHctx, ?tensorShapeVal, ?pos2, "<None>"),
  ?pos1 != ?pos2.

TensorShapeListLength(?shapeHctx, ?tensorShapeVal, ?size),
TensorShapeListContent(?shapeHctx, ?tensorShapeVal, ?index, ?indexValue):-
  ReshapeOperation(?ctx, ?insn, ?reshapeOpVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?hctx, ?reshapeOpVal, ?ctx, ?var),
  TensorShape(?hctx, ?reshapeOpVal, ?shapeHctx, ?tensorShapeVal),
  ListInitialLength(?dimListArgVal, ?size),
  ListOfConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, ?index, ?indexValue),
  ?indexValue != "<num-constant(int):-1>".

TensorShapeListLength(?shapeHctx, ?tensorShapeVal, ?size),
TensorShapeListContent(?shapeHctx, ?tensorShapeVal, ?index, ?indexValue):-
  ReshapeOperation(?ctx, ?insn, ?reshapeOpVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?reshapeOpVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?reshapeOpVal, "shape", ?dimListHctx, ?dimListArgVal),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?hctx, ?reshapeOpVal, ?ctx, ?var),
  TensorShape(?hctx, ?reshapeOpVal, ?shapeHctx, ?tensorShapeVal),
  ListInitialLength(?dimListArgVal, ?size),
  ListOfConstsAtIndexPointsTo(?dimListHctx, ?dimListArgVal, ?index, "<num-constant(int):-1>"),
  ReshapeOperationReplaceMinus1WithVal(?ctx, ?insn, ?reshapeOpVal, ?indexValue).

//------------------------------------------------------
//              CONVOLUTION LAYER OP
//------------------------------------------------------

#define LayersConvValue(op,fun,val1, val2, val3, val4, val5, val6, val7) cat("<tensor ", cat(fun, cat("/", cat(op, cat(val1, cat("+", cat(val2, cat("+", cat(val3, cat("+", cat(val4, cat("+", cat(val5, cat("+", cat(val6, cat("+", cat(val7,">")))))))))))))))))

#define NNConvValue(op,fun,val1, val2, val3, val4, val5) cat("<tensor ", cat(fun, cat("/", cat(op, cat(val1, cat("+", cat(val2, cat("+", cat(val3, cat("+", cat(val4, cat("+", cat(val5, ">")))))))))))))

.decl ConvOperationFunctionInfo(?function:Function, ?funName:symbol, ?nDims:number)
.output ConvOperationFunctionInfo

ConvOperationFunctionInfo("<tensorflow.layers.conv1d>", "conv1d", 1).
ConvOperationFunctionInfo("<tensorflow.layers.conv2d>", "conv2d", 2).
ConvOperationFunctionInfo("<tensorflow.layers.conv3d>", "conv3d", 3).
ConvOperationFunctionInfo("<tensorflow.nn.conv1d>", "conv1d", 1).
ConvOperationFunctionInfo("<tensorflow.nn.conv2d>", "conv2d", 2).
ConvOperationFunctionInfo("<tensorflow.nn.conv3d>", "conv3d", 3).

.decl ConvOperation(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation

.decl NNConvOperation(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output NNConvOperation

.decl LayersConvOperation(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output LayersConvOperation

.decl ConvOperation_AllDimsCanBeComputed(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_AllDimsCanBeComputed

.decl ConvOperation_NumOfDims(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?ndims:number)
.output ConvOperation_NumOfDims

.decl ConvOperation_ValidDimension(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number)
.output ConvOperation_ValidDimension

.decl ConvOperation_ChannelsLast(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_ChannelsLast

.decl ConvOperation_ChannelsFirst(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_ChannelsFirst

.decl ConvOperation_PaddingSame(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_PaddingSame

.decl ConvOperation_PaddingValid(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value)
.output ConvOperation_PaddingValid

.decl ConvOperation_DimResult(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?dimRes:Value)
.output ConvOperation_DimResult

.decl ConvOperation_GetNumbersForDim(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?tensorValForDimNum:number, ?kernelSizeValForDimNum:number, ?strideValForDimNum:number)
.output ConvOperation_GetNumbersForDim

.decl ConvOperation_StridesForDim(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?strideValForDim:Value)
.output ConvOperation_StridesForDim

.decl ConvOperation_KernelSizeForDim(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?kernelSizeValForDim:Value)
.output ConvOperation_KernelSizeForDim

.decl ConvOperation_DillationRateForDim(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?dim:number, ?dillationRateValForDim:Value)
.output ConvOperation_DillationRateForDim

.decl ConvOperation_NumOfOutputChannels(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?newVal:Value, ?outputChannelsVal:Value)
.output ConvOperation_StridesForDim

.decl PossibleDimNumber(?dim: number)
PossibleDimNumber(1).
PossibleDimNumber(2).
PossibleDimNumber(3).

#if(0)

TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "inputs", ?inputsTensorHctx, ?inputsTensorArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "filters", ?filtersHctx, ?filtersArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "kernel_size", ?kernelSizeHctx, ?kernelSizeArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "strides", ?stridesHctx, ?stridesArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "padding", ?paddingHctx, ?paddingArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "data_format", ?dataFormatHctx, ?dataFormatArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "dilation_rate", ?dilationRateHctx, ?dilationRateArgVal),
ConvOperation_NumOfDims(?ctx, ?insn, ?newVal, ?nDims),
LayersConvOperation(?ctx, ?insn, ?newVal),
ConvOperation(?ctx, ?insn, ?newVal):-
  FunctionInvResolvesTo(?ctx, ?insn, _, _, ?function),
  Function_Module(?function, "<tensorflow.layers>"),
  ConvOperationFunctionInfo(?function, ?funName, ?nDims),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "inputs", ?inputsTensorHctx, ?inputsTensorArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "filters", ?filtersHctx, ?filtersArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "kernel_size", ?kernelSizeHctx, ?kernelSizeArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "strides", ?stridesHctx, ?stridesArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "padding", ?paddingHctx, ?paddingArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "data_format", ?dataFormatHctx, ?dataFormatArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "dilation_rate", ?dilationRateHctx, ?dilationRateArgVal),
  Instruction_Function(?insn, ?inFunction),
  ?newVal = LayersConvValue(?funName, ?inFunction, ?inputsTensorArgVal, ?filtersArgVal, ?kernelSizeArgVal, ?stridesArgVal, ?paddingArgVal, ?dataFormatArgVal, ?dilationRateArgVal).

TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "inputs", ?inputsTensorHctx, ?inputsTensorArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "filter", ?filtersHctx, ?filterArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "strides", ?stridesHctx, ?stridesArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "padding", ?paddingHctx, ?paddingArgVal),
TensorOperation_NameToVal(?ctx, ?insn, ?newVal, "data_format", ?dataFormatHctx, ?dataFormatArgVal),
ConvOperation_NumOfDims(?ctx, ?insn, ?newVal, ?nDims),
NNConvOperation(?ctx, ?insn, ?newVal),
ConvOperation(?ctx, ?insn, ?newVal):-
  FunctionInvResolvesTo(?ctx, ?insn, _, _, ?function),
  Function_Module(?function, "<tensorflow.nn>"),
  ConvOperationFunctionInfo(?function, ?funName, ?nDims),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "inputs", ?inputsTensorHctx, ?inputsTensorArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "filter", ?filtersHctx, ?filterArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "strides", ?stridesHctx, ?stridesArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "padding", ?paddingHctx, ?paddingArgVal),
  ResolvedActualParamValue(?ctx, ?insn, ?function, "data_format", ?dataFormatHctx, ?dataFormatArgVal),
  Instruction_Function(?insn, ?inFunction),
  ?newVal = NNConvValue(?funName, ?inFunction, ?inputsTensorArgVal, ?filterArgVal, ?stridesArgVal, ?paddingArgVal, ?dataFormatArgVal).


ConvOperation_ValidDimension(?ctx, ?insn, ?newVal, ?dim):-
  ConvOperation_NumOfDims(?ctx, ?insn, ?newVal, ?numOfDims),
  ?dim <= ?numOfDims,
  PossibleDimNumber(?dim).

ConvOperation_ChannelsLast(?ctx, ?insn, ?newVal):-
  LayersConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "data_format", _, "<string constant:channels_last>").

ConvOperation_ChannelsFirst(?ctx, ?insn, ?newVal):-
  LayersConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "data_format", _, "<string constant:channels_first>").

ConvOperation_ChannelsLast(?ctx, ?insn, ?newVal):-
  NNConvOperation(?ctx, ?insn, ?newVal),
  (
    ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "data_format", _, "<string constant:NHWC>");
    ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "data_format", _, "<None>")
  ).

ConvOperation_ChannelsFirst(?ctx, ?insn, ?newVal):-
  NNConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "data_format", _, "<string constant:NCHW>").

ConvOperation_PaddingSame(?ctx, ?insn, ?newVal):-
  LayersConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "padding", _, "<string constant:same>").

ConvOperation_PaddingValid(?ctx, ?insn, ?newVal):-
  LayersConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "padding", _, "<string constant:valid>").

ConvOperation_PaddingSame(?ctx, ?insn, ?newVal):-
  NNConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "padding", _, "<string constant:SAME>").

ConvOperation_PaddingValid(?ctx, ?insn, ?newVal):-
  NNConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "padding", _, "<string constant:VALID>").

//.decl getValueFromIntOrListOfInts(?inVal:Value, ?dim:number, ?actualVal:Value)
//getValueFromIntOrListOfInts(?inVal, ?dim, ?actualVal):-
//  PossibleDimNumber(?dim),
//  (
//    isListOfIntConsts(?inVal),
//    ConstListContents(?inVal, ?dim - 1, ?actualVal),
//    Value_Num(?actualVal, _)
//  );
//  (
//    ?actualVal = ?inVal,
//    Value_Num(?actualVal, _)
//  ).

ConvOperation_StridesForDim(?ctx, ?insn, ?newVal, ?dim, ?strideValForDim):-
  LayersConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_ValidDimension(?ctx, ?insn, ?newVal, ?dim),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "strides", ?stridesHctx, ?stridesArgVal),
  (
    (
        ListOfIntConsts(?stridesHctx, ?stridesArgVal),
        ListOfIntConstsAtIndexPointsTo(?stridesHctx, ?stridesArgVal, ?dim - 1, ?strideValForDim),
        Value_Num(?strideValForDim, _)
    );
    (
        ?strideValForDim = ?stridesArgVal,
        Value_Num(?strideValForDim, _)
    )
  ).

ConvOperation_StridesForDim(?ctx, ?insn, ?newVal, ?dim, ?strideValForDim):-
  NNConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_ValidDimension(?ctx, ?insn, ?newVal, ?dim),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "strides", ?stridesHctx, ?stridesArgVal),
  ListOfIntConstsAtIndexPointsTo(?stridesHctx, ?stridesArgVal, ?dim, ?strideValForDim).

ConvOperation_KernelSizeForDim(?ctx, ?insn, ?newVal, ?dim, ?kernelSizeValForDim):-
  LayersConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_ValidDimension(?ctx, ?insn, ?newVal, ?dim),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "kernel_size", ?kernelSizeHctx, ?kernelSizeArgVal),
  (
    (
        ListOfIntConsts(?kernelSizeHctx, ?kernelSizeArgVal),
        ListOfIntConstsAtIndexPointsTo(?kernelSizeHctx, ?kernelSizeArgVal, ?dim - 1, ?kernelSizeValForDim),
        Value_Num(?kernelSizeValForDim, _)
    );
    (
        ?kernelSizeValForDim = ?kernelSizeArgVal,
        Value_Num(?kernelSizeValForDim, _)
    )
  ).

ConvOperation_KernelSizeForDim(?ctx, ?insn, ?newVal, ?dim, ?kernelSizeValForDim):-
  NNConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_ValidDimension(?ctx, ?insn, ?newVal, ?dim),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "filter", ?filterHctx, ?filterArgVal),
  TensorShapeListContent(?filterHctx,?filterArgVal, ?dim - 1, ?kernelSizeValForDim).

ConvOperation_DillationRateForDim(?ctx, ?insn, ?newVal, ?dim, ?dillationRateValForDim):-
  LayersConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_ValidDimension(?ctx, ?insn, ?newVal, ?dim),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "dilation_rate", ?dilationRateHctx, ?dilationRateArgVal),
  (
    (
        ListOfIntConsts(?dilationRateHctx, ?dilationRateArgVal),
        ListOfIntConstsAtIndexPointsTo(?dilationRateHctx, ?dilationRateArgVal, ?dim - 1, ?dillationRateValForDim),
        Value_Num(?dillationRateValForDim, _)
    );
    (
        ?dillationRateValForDim = ?dilationRateArgVal,
        Value_Num(?dillationRateValForDim, _)
    )
  ).

ConvOperation_NumOfOutputChannels(?ctx, ?insn, ?newVal, ?outputChannelsNumValue):-
  NNConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "filter", ?filterHctx, ?filterArgVal),
  TensorShapeListSize(?filterHctx, ?filterArgVal, ?size),
  TensorShapeListContent(?filterHctx, ?filterArgVal, ?size - 1, ?outputChannelsNumValue).

ConvOperation_NumOfOutputChannels(?ctx, ?insn, ?newVal, ?outputChannelsNumValue):-
    LayersConvOperation(?ctx, ?insn, ?newVal),
    ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "filters", _, ?outputChannelsNumValue).

ConvOperation_GetNumbersForDim(?ctx, ?insn, ?newVal, ?dim, ?tensorValForDimNum, ?kernelSizeValForDimNum, ?strideValForDimNum):-
  ConvOperation_ValidDimension(?ctx, ?insn, ?newVal, ?dim),
  (
    (
      ConvOperation_ChannelsLast(?ctx, ?insn, ?newVal),
      ?dimPosInTensor = ?dim
    );
    (
      ConvOperation_ChannelsFirst(?ctx, ?insn, ?newVal),
      ?dimPosInTensor = ?dim + 1
    )
  ),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "inputs", ?inputsHctx, ?inputsTensorVal),
  TensorShapeListContent(?inputsHctx, ?inputsTensorVal, ?dimPosInTensor, ?tensorValForDim),
  ConvOperation_KernelSizeForDim(?ctx, ?insn, ?newVal, ?dim, ?kernelSizeValForDim),
  Value_Num(?tensorValForDim, ?tensorValForDimNumStr),
  Value_Num(?kernelSizeValForDim, ?kernelSizeValForDimNumStr),
  ?tensorValForDimNum = to_number(?tensorValForDimNumStr),
  ?kernelSizeValForDimNum = to_number(?kernelSizeValForDimNumStr),
  ConvOperation_StridesForDim(?ctx, ?insn, ?newVal, ?dim, ?strideValForDim),
  Value_Num(?strideValForDim, ?strideValForDimNumStr),
  ?strideValForDimNum = to_number(?strideValForDimNumStr).

Value_Num(?dimRes, ?valNumStr),
ConvOperation_DimResult(?ctx, ?insn, ?newVal, ?dim, ?dimRes):-
  ConvOperation_GetNumbersForDim(?ctx, ?insn, ?newVal, ?dim, ?tensorValForDimNum, ?kernelSizeValForDimNum, ?strideValForDimNum),
  (
    (
      ConvOperation_PaddingSame(?ctx, ?insn, ?newVal),
      ?temp = ?tensorValForDimNum
    );
    (
      ConvOperation_PaddingValid(?ctx, ?insn, ?newVal),
      ?temp = ?tensorValForDimNum + 1 - ?kernelSizeValForDimNum
    )
  ),
  ?temp % ?strideValForDimNum = 0,
  ?valNumStr = to_string(?temp / ?strideValForDimNum),
  ?dimRes = cat("<num-constant(int):",cat(?valNumStr, ">")).

Value_Num(?dimRes, ?valNumStr),
ConvOperation_DimResult(?ctx, ?insn, ?newVal, ?dim, ?dimRes):-
  ConvOperation_GetNumbersForDim(?ctx, ?insn, ?newVal, ?dim, ?tensorValForDimNum, ?kernelSizeValForDimNum, ?strideValForDimNum),
  (
    (
      ConvOperation_PaddingSame(?ctx, ?insn, ?newVal),
      ?temp = ?tensorValForDimNum
    );
    (
      ConvOperation_PaddingValid(?ctx, ?insn, ?newVal),
      ?temp = ?tensorValForDimNum + 1 - ?kernelSizeValForDimNum
    )
  ),
  ?temp2 = ?temp % ?strideValForDimNum,
  ?temp2 != 0,
  ?valNumStr = to_string((?temp + ?temp2)/ ?strideValForDimNum),
  ?dimRes = cat("<num-constant(int):",cat(?valNumStr, ">")).



ConvOperation_AllDimsCanBeComputed(?ctx, ?insn, ?newVal):-
    ConvOperation_NumOfDims(?ctx, ?insn, ?newVal, ?numOfDims),
    ?numOfDims = 1,
    ConvOperation_DimResult(?ctx, ?insn, ?newVal, 1, _).

ConvOperation_AllDimsCanBeComputed(?ctx, ?insn, ?newVal):-
    ConvOperation_NumOfDims(?ctx, ?insn, ?newVal, ?numOfDims),
    ?numOfDims = 2,
    ConvOperation_DimResult(?ctx, ?insn, ?newVal, 1, _),
    ConvOperation_DimResult(?ctx, ?insn, ?newVal, 2, _).

ConvOperation_AllDimsCanBeComputed(?ctx, ?insn, ?newVal):-
    ConvOperation_NumOfDims(?ctx, ?insn, ?newVal, ?numOfDims),
    ?numOfDims = 3,
    ConvOperation_DimResult(?ctx, ?insn, ?newVal, 1, _),
    ConvOperation_DimResult(?ctx, ?insn, ?newVal, 2, _),
    ConvOperation_DimResult(?ctx, ?insn, ?newVal, 3, _).


TensorOperationProducesOutput(?ctx, ?insn, ?newVal):-
  ConvOperation(?ctx, ?insn, ?newVal),
  ConvOperation_AllDimsCanBeComputed(?ctx, ?insn, ?newVal).

TensorShapeListSize(?hctx, ?newVal, ?size):-
  ConvOperation(?ctx, ?insn, ?newVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "inputs", ?inputsHctx, ?inputsTensorVal),
  TensorShapeListSize(?inputsHctx, ?inputsTensorVal, ?size).

TensorShapeListContent(?hctx, ?newVal, ?dimPosInTensor, ?dimValue):-
  ConvOperation(?ctx, ?insn, ?newVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?newVal),
  ConvOperation_DimResult(?ctx, ?insn, ?newVal, ?dim, ?dimValue),
  (
    (
      ConvOperation_ChannelsLast(?ctx, ?insn, ?newVal),
      ?dimPosInTensor = ?dim
    );
    (
      ConvOperation_ChannelsFirst(?ctx, ?insn, ?newVal),
      ?dimPosInTensor = ?dim + 1
    )
  ).

TensorShapeListContent(?hctx, ?newVal, 0, ?batchValue):-
  ConvOperation(?ctx, ?insn, ?newVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?newVal),
  ConvOperation_NameToVal(?ctx, ?insn, ?newVal, "inputs", ?inputsHctx, ?inputsTensorVal),
  TensorShapeListContent(?inputsHctx, ?inputsTensorVal, 0, ?batchValue).

TensorShapeListContent(?hctx, ?newVal, ?channelsPosInTensor, ?outputChannelsNum):-
  ConvOperation(?ctx, ?insn, ?newVal),
  TensorOperationProducesOutput(?ctx, ?insn, ?newVal),
  ConvOperation_DimResult(?insn, ?newVal, ?dim, ?dimValue),
  (
    (
      ConvOperation_ChannelsLast(?ctx, ?insn, ?newVal),
      TensorShapeListSize(?hctx, ?newVal, ?size),
      ?channelsPosInTensor = ?size - 1
    );
    (
      ConvOperation_ChannelsFirst(?ctx, ?insn, ?newVal),
      ?channelsPosInTensor = 1
    )
  ),
  ConvOperation_NumOfOutputChannels(?ctx, ?insn, ?newVal, ?outputChannelsNum).

#endif